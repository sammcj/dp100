//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

// ---------------- Integer Types Definitions -----------------

typedef int8_t int3_t;
typedef int64_t int128_t;
typedef int64_t int224_t;
typedef int64_t int256_t;
typedef int64_t int864_t;

// ----------------- Float Types Definitions ------------------

typedef float float32_t;
typedef double float64_t;
typedef long double float80_t;

// ------------------- Function Prototypes --------------------

int64_t function_104f9c2(void);
int64_t function_1052c946(void);
int64_t function_12246426(void);
int64_t function_12408756(void);
int64_t function_1240d1fe(void);
int64_t function_1241d081(void);
int64_t function_1357c9af(void);
int64_t function_13dc0620(void);
int64_t function_148fba1b(void);
int64_t function_15e5f692(void);
int64_t function_16779a9f(void);
int64_t function_1754d62b(void);
int64_t function_17b4d222(void);
int64_t function_1832b69d(void);
int64_t function_1972cc66(void);
int64_t function_1a8d3b07(void);
int64_t function_1b8d249a(void);
int64_t function_1c429cfc(void);
int64_t function_1c6581dc(void);
int64_t function_1c7bf71b(void);
int64_t function_1d371942(void);
int64_t function_1f2e87ee(void);
int64_t function_1f409b7a(void);
int64_t function_1fbddef(void);
int64_t function_20407d31(void);
int64_t function_20676f21(void);
int64_t function_209ed9b0(void);
int64_t function_21c2ab30(void);
int64_t function_2255b126(void);
int64_t function_2287875c(void);
int64_t function_23870220(void);
int64_t function_2412996(void);
int64_t function_24429e0a(void);
int64_t function_24431495(void);
int64_t function_2513e838(void);
int64_t function_25c881ea(void);
int64_t function_28ca876c(void);
int64_t function_294f6eb9(void);
int64_t function_298bc388(void);
int64_t function_29bd6b5d(void);
int64_t function_2a4ae174(void);
int64_t function_2ac73058(void);
int64_t function_2c9a4c73(void);
int64_t function_2e61d632(void);
int64_t function_2f55d12c(void);
int64_t function_301a295f(void);
int64_t function_31d7c0d(void);
int64_t function_3204623(void);
int64_t function_32dffe3d(void);
int64_t function_33317529(void);
int64_t function_34429f26(void);
int64_t function_34de015c(void);
int64_t function_371b503f(void);
int64_t function_374189a1(void);
int64_t function_3749a8d9(void);
int64_t function_37f9c53e(void);
int64_t function_38167e9a(void);
int64_t function_381da545(void);
int64_t function_3840b120(void);
int64_t function_3855e932(void);
int64_t function_38f6eff5(void);
int64_t function_39f8e121(void);
int64_t function_3a405f4b(void);
int64_t function_3a9700a6(void);
int64_t function_3c644146(void);
int64_t function_3e5027ca(void);
int64_t function_402000(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40338b(void);
int64_t function_403701(void);
int64_t function_403720(void);
int64_t function_403723(void);
int64_t function_403744(void);
int64_t function_403761(void);
int64_t function_40376d(void);
int64_t function_403b93(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4047bd(void);
int64_t function_4048a2(void);
int64_t function_4048ae(int64_t result);
int64_t function_4049d2(void);
int64_t function_404aa4(int64_t a1, int64_t a2, int64_t a3);
int64_t function_404d30(int64_t a1);
int64_t function_404eba(void);
int64_t function_40505e(int64_t a1);
int64_t function_40516c(int64_t a1, int64_t a2);
int64_t function_4051bd(void);
int64_t function_405291(int64_t a1);
int64_t function_4053a9(int64_t a1, int64_t a2);
int64_t function_405504(void);
int64_t function_40560b38(void);
int64_t function_405794(void);
int64_t function_40586a(int64_t a1, int64_t a2);
int64_t function_4059b4(int64_t a1);
int64_t function_405a7b(void);
int64_t function_405c2d(int64_t a1);
int64_t function_405cbc(void);
int64_t function_405f30(void);
int64_t function_40618f(void);
int64_t function_4061ba(void);
int64_t function_4061cb(int64_t a1, int64_t a2);
int64_t function_4061dd(int64_t a1);
int64_t function_4061eb(void);
int64_t function_406203(int64_t a1);
int64_t function_40623f(void);
int64_t function_406253(void);
int64_t function_406265(int64_t a1);
int64_t function_40627c(void);
int64_t function_406287(void);
int64_t function_406293(void);
int64_t function_406295(int64_t a1);
int64_t function_4062a1(int64_t a1);
int64_t function_4062a7(void);
int64_t function_4062c4(int64_t a1);
int64_t function_4062ce(void);
int64_t function_4062d9(int64_t a1, int64_t a2);
int64_t function_406308(int64_t a1, int64_t a2);
int64_t function_40631d(void);
int64_t function_406334(void);
int64_t function_40633d(int64_t a1);
int64_t function_406359(int64_t a1);
int64_t function_406367(void);
int64_t function_406379(int64_t a1);
int64_t function_406389(int64_t a1);
int64_t function_40639b(void);
int64_t function_4063a3(void);
int64_t function_4063af(void);
int64_t function_4063eb(void);
int64_t function_40641d(void);
int64_t function_406424(int64_t a1, int64_t a2);
int64_t function_406447(void);
int64_t function_406453(void);
int64_t function_40645f(void);
int64_t function_406467(void);
int64_t function_406475(int64_t a1);
int64_t function_406483(void);
int64_t function_4064a3(void);
int64_t function_4064b7(void);
int64_t function_4064e3(void);
int64_t function_40650f(void);
int64_t function_406517(void);
int64_t function_406550(void);
int64_t function_406557(void);
int64_t function_406568(void);
int64_t function_406571(void);
int64_t function_406595(void);
int64_t function_40659b(void);
int64_t function_4065b3(void);
int64_t function_4065d3(void);
int64_t function_4065d9(void);
int64_t function_4065df(void);
int64_t function_4065e3(void);
int64_t function_4065e7(void);
int64_t function_4065ee(void);
int64_t function_4065f3(void);
int64_t function_4065fb(int64_t a1);
int64_t function_406605(void);
int64_t function_406627(void);
int64_t function_406634(int64_t a1);
int64_t function_406636(void);
int64_t function_40663c(void);
int64_t function_40664b(void);
int64_t function_40666c(void);
int64_t function_406683(int64_t a1);
int64_t function_4066ac(void);
int64_t function_4066d3(void);
int64_t function_4066ea(int64_t a1);
int64_t function_4066fb(void);
int64_t function_406734(void);
int64_t function_40678d(void);
int64_t function_4067a6(void);
int64_t function_4067c4(void);
int64_t function_4067d3(int64_t a1);
int64_t function_4067f9(void);
int64_t function_406876(void);
int64_t function_4068b2(void);
int64_t function_4068cb(void);
int64_t function_40695e(void);
int64_t function_4069a0(int64_t a1, int64_t a2);
int64_t function_406a2d(int64_t a1, int64_t a2);
int64_t function_406b3d(void);
int64_t function_406b5d(int64_t a1, uint64_t a2);
int64_t function_406bb9(void);
int64_t function_406bee(void);
int64_t function_406c0c(void);
int64_t function_406c75(void);
int64_t function_406cb3(int64_t a1, int64_t a2, int64_t a3);
int64_t function_406ce3(int64_t a1, int64_t a2, int64_t a3);
int64_t function_406d3c(void);
int64_t function_406d59(void);
int64_t function_406dc3(void);
int64_t function_406e00(void);
int64_t function_406ea6(void);
int64_t function_406f0d(int64_t a1);
int64_t function_406fdf(int64_t a1, int64_t a2, int64_t a3);
int64_t function_407012(int64_t a1);
int64_t function_407057(void);
int64_t function_4070d4(void);
int64_t function_4070d7(void);
int64_t function_40714e(void);
int64_t function_407158(void);
int64_t function_40715a(void);
int64_t function_407176(void);
int64_t function_40720b(void);
int64_t function_407215(void);
int64_t function_407223(int64_t a1, int64_t a2);
int64_t function_407240(int64_t a1);
int64_t function_407256(int64_t a1);
int64_t function_407260(int64_t a1, int64_t a2);
int64_t function_40726d(int64_t a1, int64_t a2);
int64_t function_407272(int64_t a1);
int64_t function_407298(void);
int64_t function_4072a2(void);
int64_t function_4072ac(void);
int64_t function_4072b6(void);
int64_t function_4072c0(void);
int64_t function_4072ca(void);
int64_t function_4072d4(void);
int64_t function_4072de(void);
int64_t function_4072e8(void);
int64_t function_4072fa(void);
int64_t function_407306(void);
int64_t function_40730a(void);
int64_t function_407317(void);
int64_t function_40731e(void);
int64_t function_40732e(void);
int64_t function_407338(void);
int64_t function_407342(void);
int64_t function_407344(int64_t a1);
int64_t function_407362(void);
int64_t function_40737c(int64_t a1);
int64_t function_407385(int64_t a1);
int64_t function_40738c(int64_t a1, int64_t a2);
int64_t function_4073aa(void);
int64_t function_4073b2(void);
int64_t function_4073cb(void);
int64_t function_4073d0(int64_t a1, int64_t a2);
int64_t function_4073ec(void);
int64_t function_4073f0(int64_t a1, int64_t a2);
int64_t function_4073fe(void);
int64_t function_407414(void);
int64_t function_40741e(void);
int64_t function_407426(void);
int64_t function_407432(void);
int64_t function_40743c(void);
int64_t function_407446(void);
int64_t function_407450(void);
int64_t function_40745a(void);
int64_t function_407464(void);
int64_t function_40746e(void);
int64_t function_407472(int64_t a1, int64_t a2);
int64_t function_40747c(int64_t a1, int64_t a2);
int64_t function_40748a(void);
int64_t function_407490(int64_t a1, int64_t a2);
int64_t function_40749e(int64_t a1, int64_t a2);
int64_t function_4074a4(int64_t a1, int64_t a2);
int64_t function_4074b4(void);
int64_t function_4074be(void);
int64_t function_4074d2(void);
int64_t function_4074dc(void);
int64_t function_4074e6(void);
int64_t function_4074f0(void);
int64_t function_4074fa(void);
int64_t function_407504(void);
int64_t function_407508(void);
int64_t function_40757b(int64_t a1);
int64_t function_4078e6(int64_t a1);
int64_t function_407a77(void);
int64_t function_407d26(int64_t a1);
int64_t function_407e29(int64_t a1, int64_t a2);
int64_t function_407e43(int64_t a1, int64_t a2);
int64_t function_407f01(int64_t a1);
int64_t function_407f6a(int64_t a1);
int64_t function_40802a(int64_t a1, int64_t a2);
int64_t function_408143(int64_t a1);
int64_t function_40833c(uint64_t a1);
int64_t function_408411(uint64_t a1, uint64_t a2, int64_t a3);
int64_t function_408714(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4087d0(void);
int64_t function_4087d3(void);
int64_t function_40883f(int64_t a1, int64_t a2);
int64_t function_408854(int64_t a1, int64_t a2, int64_t a3);
int64_t function_408909(int64_t a1);
int64_t function_408c96(void);
int64_t function_408cc7(uint64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_408d54(int64_t a1);
int64_t function_408d57(void);
int64_t function_408e45(void);
int64_t function_408e4e(void);
int64_t function_408e77(void);
int64_t function_409105(uint64_t a1, int64_t a2, uint64_t a3);
int64_t function_40914f(void);
int64_t function_409514(void);
int64_t function_4095db(void);
int64_t function_40961d(void);
int64_t function_409622(void);
int64_t function_40963e(void);
int64_t function_409642(void);
int64_t function_409648(int64_t a1);
int64_t function_409674(void);
int64_t function_4096fe(void);
int64_t function_409734(void);
int64_t function_4098a3(int64_t a1);
int64_t function_4098b2(int64_t a1);
int64_t function_409911(void);
int64_t function_40992b(void);
int64_t function_40994e(void);
int64_t function_409b47(int64_t a1);
int64_t function_409b4c(int64_t a1, int64_t a2);
int64_t function_409c75(uint64_t a1, int64_t a2);
int64_t function_409c8f(void);
int64_t function_409c91(int64_t a1);
int64_t function_409caa(uint64_t a1, int64_t a2);
int64_t function_409cbe(void);
int64_t function_409cc0(int64_t a1);
int64_t function_409d9e(uint64_t a1, int64_t a2);
int64_t function_409e31(int64_t a1);
int64_t function_409f30(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40a050(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40a1a3(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40a1c8(void);
int64_t function_40a298(void);
int64_t function_40a2f6(void);
int64_t function_40a34f(void);
int64_t function_40a35c(int64_t a1);
int64_t function_40a36b(int64_t a1, int64_t a2, int64_t result);
int64_t function_40a508(int64_t a1);
int64_t function_40a556(void);
int64_t function_40a55c(int64_t a1, uint64_t a2, uint64_t a3);
int64_t function_40a589(void);
int64_t function_40a5a5(int64_t a1, int64_t a2, uint64_t result, int64_t a4);
int64_t function_40a658(void);
int64_t function_40a7fc(int64_t a1, int64_t a2);
int64_t function_40a8db(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_40a90f(void);
int64_t function_40a923(int64_t a1, uint64_t a2);
int64_t function_40a9be(int64_t a1);
int64_t function_40aa6d(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40abc2(int64_t a1);
int64_t function_40ad00(void);
int64_t function_40aef1(void);
int64_t function_40b119(void);
int64_t function_40b248(int64_t a1);
int64_t function_40b24c(void);
int64_t function_40b333(int64_t a1);
int64_t function_40b33b(void);
int64_t function_40b351(void);
int64_t function_40b35b(void);
int64_t function_40b37d(void);
int64_t function_40b39b(void);
int64_t function_40b3a6(int64_t a1, int64_t a2);
int64_t function_40b3b1(int64_t a1);
int64_t function_40b3c7(int64_t a1, uint64_t a2);
int64_t function_40b3cf(void);
int64_t function_40b3f3(void);
int64_t function_40b3fc(void);
int64_t function_40b411(void);
int64_t function_40b415(void);
int64_t function_40b41f(void);
int64_t function_40b425(void);
int64_t function_40b43f(void);
int64_t function_40b459(int64_t a1);
int64_t function_40b471(void);
int64_t function_40b488(void);
int64_t function_40b48b(void);
int64_t function_40b497(int64_t a1, int64_t a2);
int64_t function_40b49b(void);
int64_t function_40b4a0(int64_t a1);
int64_t function_40b4a3(void);
int64_t function_40b4a7(void);
int64_t function_40b4ab(void);
int64_t function_40b4b4(int64_t a1);
int64_t function_40b4b8(int64_t a1);
int64_t function_40b4bd(int64_t a1);
int64_t function_40b4c0(void);
int64_t function_40b4e3(void);
int64_t function_40b4eb(void);
int64_t function_40b507(uint64_t a1);
int64_t function_40b517(void);
int64_t function_40b537(void);
int64_t function_40b539(int64_t a1);
int64_t function_40b583(void);
int64_t function_40b59f(void);
int64_t function_40b5bf(int64_t a1);
int64_t function_40b5d3(int64_t a1, int64_t a2);
int64_t function_40b5e5(void);
int64_t function_40b5ef(void);
int64_t function_40b5f5(int64_t a1);
int64_t function_40b615(int64_t a1);
int64_t function_40b62f(void);
int64_t function_40b637(void);
int64_t function_40b644(void);
int64_t function_40b64d(void);
int64_t function_40b657(void);
int64_t function_40b683(void);
int64_t function_40b691(void);
int64_t function_40b697(void);
int64_t function_40b6a0(int64_t a1, int64_t a2);
int64_t function_40b6b7(void);
int64_t function_40b6bf(int64_t a1, int64_t a2);
int64_t function_40b6c3(void);
int64_t function_40b6c8(void);
int64_t function_40b6d8(int64_t a1);
int64_t function_40b6df(int64_t a1, int64_t a2);
int64_t function_40b6eb(void);
int64_t function_40b6fb(void);
int64_t function_40b703(void);
int64_t function_40b707(void);
int64_t function_40b71a(void);
int64_t function_40b735(void);
int64_t function_40b73d(int64_t a1);
int64_t function_40b73f(void);
int64_t function_40b74b(void);
int64_t function_40b76b(void);
int64_t function_40b77b(void);
int64_t function_40b783(void);
int64_t function_40b789(void);
int64_t function_40b78c(void);
int64_t function_40b7cb(void);
int64_t function_40b7db(void);
int64_t function_40b7e4(void);
int64_t function_40b7f7(int64_t a1, int64_t a2);
int64_t function_40b835(int64_t a1);
int64_t function_40b84d(int64_t a1);
int64_t function_40b85b(void);
int64_t function_40b85d(int64_t a1);
int64_t function_40b860(void);
int64_t function_40b867(void);
int64_t function_40b87f(void);
int64_t function_40b885(int64_t a1);
int64_t function_40b89f(void);
int64_t function_40b8b3(void);
int64_t function_40b8b9(void);
int64_t function_40b8bb(void);
int64_t function_40b8c7(void);
int64_t function_40b8e5(void);
int64_t function_40b8f7(void);
int64_t function_40b907(void);
int64_t function_40b90b(void);
int64_t function_40b913(void);
int64_t function_40b931(int64_t a1);
int64_t function_40b937(void);
int64_t function_40b93f(int64_t a1, int64_t a2);
int64_t function_40b94e(void);
int64_t function_40b968(int64_t a1, int64_t a2);
int64_t function_40b9a8(int64_t a1);
int64_t function_40b9d4(int64_t a1);
int64_t function_40b9e2(int64_t a1);
int64_t function_40ba03(void);
int64_t function_40ba2b(int64_t a1);
int64_t function_40ba37(void);
int64_t function_40ba4b(void);
int64_t function_40ba5f(void);
int64_t function_40ba64(int64_t a1, int64_t a2);
int64_t function_40ba73(void);
int64_t function_40ba94(void);
int64_t function_40baa7(void);
int64_t function_40baad(void);
int64_t function_40bab5(void);
int64_t function_40babb(void);
int64_t function_40babf(void);
int64_t function_40bad1(void);
int64_t function_40bae7(void);
int64_t function_40baff(void);
int64_t function_40bb13(void);
int64_t function_40bb1f(void);
int64_t function_40bb33(void);
int64_t function_40bb3c(int64_t a1, uint64_t a2);
int64_t function_40bb50(void);
int64_t function_40bb77(void);
int64_t function_40bb84(void);
int64_t function_40bb93(void);
int64_t function_40bb97(void);
int64_t function_40bb99(void);
int64_t function_40bba7(void);
int64_t function_40bbab(int64_t a1);
int64_t function_40bbcb(int64_t a1, int64_t a2);
int64_t function_40bbd7(void);
int64_t function_40bbe3(void);
int64_t function_40bbe7(void);
int64_t function_40bbfc(int64_t a1, uint64_t a2);
int64_t function_40bc27(int64_t a1);
int64_t function_40bc33(void);
int64_t function_40bc35(int64_t a1);
int64_t function_40bc3f(void);
int64_t function_40bc4b(void);
int64_t function_40bc67(int64_t a1);
int64_t function_40bc70(void);
int64_t function_40bc86(int64_t a1);
int64_t function_40bc93(void);
int64_t function_40bc9f(void);
int64_t function_40bca7(void);
int64_t function_40bcab(void);
int64_t function_40bcbb(void);
int64_t function_40bcdf(void);
int64_t function_40bce3(void);
int64_t function_40bcef(void);
int64_t function_40bcf7(int64_t a1, int64_t a2);
int64_t function_40bd10(int64_t a1);
int64_t function_40bd3c(void);
int64_t function_40bde9(void);
int64_t function_40be72(void);
int64_t function_40bea7(void);
int64_t function_40bef1(void);
int64_t function_40bf14(int64_t a1);
int64_t function_40bf48(int64_t a1);
int64_t function_40bfad(void);
int64_t function_40bfd1(void);
int64_t function_40bfd5(int64_t a1);
int64_t function_40bff7(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40c009(void);
int64_t function_40c024(void);
int64_t function_40c1a8(void);
int64_t function_40c1b5(void);
int64_t function_40c28b(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_40c310(void);
int64_t function_40c373(void);
int64_t function_40c3aa(void);
int64_t function_40c45d(int64_t a1);
int64_t function_40c5fb(void);
int64_t function_40c618(void);
int64_t function_40c66f(void);
int64_t function_40c6d4(void);
int64_t function_40c719(int64_t a1);
int64_t function_40c736(int64_t a1, int64_t a2);
int64_t function_40c777(void);
int64_t function_40c796(int64_t a1, int64_t a2);
int64_t function_40c7b1(int64_t a1, int64_t a2);
int64_t function_40c7c3(int64_t a1, int64_t a2);
int64_t function_40c7dc(void);
int64_t function_40c801(int64_t a1, int64_t a2);
int64_t function_40c8f9(void);
int64_t function_40c916(int64_t a1, int64_t a2);
int64_t function_40c93c(int64_t a1, int64_t a2);
int64_t function_40c947(void);
int64_t function_40c95e(void);
int64_t function_40c9ab(void);
int64_t function_40c9b8(void);
int64_t function_40c9bf(uint64_t a1);
int64_t function_40c9e8(int64_t a1, int64_t a2);
int64_t function_40ca09(void);
int64_t function_40ca3a(void);
int64_t function_40caec(void);
int64_t function_40cb68(void);
int64_t function_40cbb1(int64_t a1);
int64_t function_40cbba(void);
int64_t function_40cbe6(void);
int64_t function_40cc69(int64_t a1, int64_t a2);
int64_t function_40ccb9(int64_t a1);
int64_t function_40cdfc(void);
int64_t function_40ce0d(void);
int64_t function_40ce2b(void);
int64_t function_40ce35(void);
int64_t function_40ce49(void);
int64_t function_40ce5d(void);
int64_t function_40ce6e(void);
int64_t function_40ce79(int64_t a1, int64_t a2);
int64_t function_40ce96(void);
int64_t function_40ce98(int64_t a1, int64_t a2);
int64_t function_40ceb4(void);
int64_t function_40cec8(void);
int64_t function_40ced2(void);
int64_t function_40cee6(void);
int64_t function_40cef0(void);
int64_t function_40cefa(void);
int64_t function_40cf04(void);
int64_t function_40cf1f(void);
int64_t function_40cf21(int64_t a1);
int64_t function_40cf63(int64_t a1);
int64_t function_40cf74(int64_t a1);
int64_t function_40cf90(int64_t a1);
int64_t function_40cf9c(int64_t a1);
int64_t function_40cfb7(int64_t a1, int64_t a2);
int64_t function_40cfc8(int64_t a1, int64_t a2);
int64_t function_40cfcd(void);
int64_t function_40cfe4(int64_t a1, int64_t a2);
int64_t function_40cfff(int64_t a1, int64_t a2);
int64_t function_40d029(void);
int64_t function_40d045(void);
int64_t function_40d053(void);
int64_t function_40d071(void);
int64_t function_40d09d(void);
int64_t function_40d0b1(void);
int64_t function_40d0cc(void);
int64_t function_40d113(void);
int64_t function_40d11d(void);
int64_t function_40d127(void);
int64_t function_40d149(void);
int64_t function_40d15a(void);
int64_t function_40d15e(int64_t a1);
int64_t function_40d16d(int64_t a1, int64_t a2);
int64_t function_40d180(void);
int64_t function_40d187(void);
int64_t function_40d18a(void);
int64_t function_40d195(void);
int64_t function_40d1a1(void);
int64_t function_40d1a4(void);
int64_t function_40d1ac(void);
int64_t function_40d1ae(void);
int64_t function_40d1b6(void);
int64_t function_40d1bf(void);
int64_t function_40d1d0(void);
int64_t function_40d1d2(int64_t a1);
int64_t function_40d1e4(void);
int64_t function_40d1f8(void);
int64_t function_40d202(void);
int64_t function_40d20c(void);
int64_t function_40d216(void);
int64_t function_40d227(void);
int64_t function_40d23c(void);
int64_t function_40d25a(void);
int64_t function_40d264(void);
int64_t function_40d275(void);
int64_t function_40d27f(void);
int64_t function_40d2ab(void);
int64_t function_40d2b6(void);
int64_t function_40d2c2(void);
int64_t function_40d2d2(int64_t a1, int64_t a2);
int64_t function_40d2d9(int64_t a1, int64_t a2);
int64_t function_40d2f8(void);
int64_t function_40d300(int64_t a1);
int64_t function_40d30b(int64_t a1, int64_t a2);
int64_t function_40d31b(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40d325(int64_t a1, int64_t a2);
int64_t function_40d342(int64_t a1);
int64_t function_40d354(int64_t a1, int64_t a2);
int64_t function_40d360(int64_t a1, int64_t a2);
int64_t function_40d36a(int64_t a1, int64_t a2);
int64_t function_40d378(int64_t a1);
int64_t function_40d390(void);
int64_t function_40d3d0(int64_t a1, int64_t a2);
int64_t function_40d3ef(void);
int64_t function_40d40a(void);
int64_t function_40d414(void);
int64_t function_40d428(void);
int64_t function_40d480(void);
int64_t function_40d48a(int64_t a1);
int64_t function_40d494(void);
int64_t function_40d4bc(void);
int64_t function_40d4d7(int64_t a1);
int64_t function_40d4e2(void);
int64_t function_40d4ec(void);
int64_t function_40d4f1(int64_t a1);
int64_t function_40d506(int64_t a1);
int64_t function_40d50b(int64_t a1);
int64_t function_40d524(int64_t a1);
int64_t function_40d542(void);
int64_t function_40d561(int64_t a1, int64_t a2);
int64_t function_40d574(void);
int64_t function_40d57e(void);
int64_t function_40d588(void);
int64_t function_40d598(int64_t a1, int64_t a2);
int64_t function_40d5ad(void);
int64_t function_40d5cb(void);
int64_t function_40d5d3(void);
int64_t function_40d5e0(int64_t a1, int64_t a2);
int64_t function_40d600(int64_t a1, int64_t a2);
int64_t function_40d61d(void);
int64_t function_40d627(void);
int64_t function_40d62c(int64_t a1, int64_t a2);
int64_t function_40d652(void);
int64_t function_40d656(int64_t a1, int64_t a2);
int64_t function_40d66d(void);
int64_t function_40d677(void);
int64_t function_40d681(void);
int64_t function_40d68b(void);
int64_t function_40d69f(void);
int64_t function_40d6b0(void);
int64_t function_40d6cb(void);
int64_t function_40d6d5(void);
int64_t function_40d6e9(void);
int64_t function_40d704(void);
int64_t function_40d706(void);
int64_t function_40d70e(void);
int64_t function_40d718(void);
int64_t function_40d722(void);
int64_t function_40d744(void);
int64_t function_40d746(int64_t a1, int64_t a2);
int64_t function_40d77a(void);
int64_t function_40d784(void);
int64_t function_40d7b7(void);
int64_t function_40d7f7(void);
int64_t function_40d808(void);
int64_t function_40d812(void);
int64_t function_40d81c(void);
int64_t function_40d914(int64_t a1);
int64_t function_40d943(int64_t a1, uint64_t a2);
int64_t function_40d968(int64_t a1);
int64_t function_40d96f(int64_t a1, uint64_t a2);
int64_t function_40d9b8(int64_t a1, int64_t a2);
int64_t function_40da78(int64_t a1, int64_t a2);
int64_t function_40daf0(int64_t a1);
int64_t function_40de4e(int64_t a1, int64_t a2);
int64_t function_40df5d(uint64_t a1, int64_t a2);
int64_t function_40dfe5(uint64_t a1, int64_t a2);
int64_t function_40e176(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_40e1ed(uint64_t a1, int64_t a2);
int64_t function_40e6dd(uint64_t a1, uint64_t a2, int64_t a3);
int64_t function_40e837(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_40e9fc(void);
int64_t function_40ec2d(int64_t a1, int64_t a2);
int64_t function_40ee09(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_40ee39(int64_t a1, uint64_t a2);
int64_t function_40ee72(void);
int64_t function_40efa6(int64_t a1);
int64_t function_40efea(int64_t a1, int64_t a2);
int64_t function_40f051(int64_t a1, int64_t a2);
int64_t function_40f0b4(void);
int64_t function_40f0ba(int64_t a1);
int64_t function_40f0e6(void);
int64_t function_40f1cf(int64_t a1);
int64_t function_40f1de(int64_t a1);
int64_t function_40f1e4(int64_t a1);
int64_t function_40f1ea(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40f1f0(int64_t a1);
int64_t function_40f1f6(int64_t a1);
int64_t function_40f1fc(int64_t a1, int64_t a2);
int64_t function_40f202(int64_t a1);
int64_t function_40f20c(int64_t a1);
int64_t function_40f212(int64_t a1);
int64_t function_40f218(int64_t a1);
int64_t function_40f21c(int64_t a1, int64_t a2);
int64_t function_40f28a(void);
int64_t function_40f28c(void);
int64_t function_40f28e(uint64_t a1);
int64_t function_40f2a8(void);
int64_t function_40f2ae(void);
int64_t function_40f2c0(void);
int64_t function_40f2c8(void);
int64_t function_40f2ce(void);
int64_t function_40f2d0(int64_t a1, int64_t a2);
int64_t function_40f2d8(int64_t a1, int64_t a2);
int64_t function_40f383(int64_t a1, int64_t a2);
int64_t function_40f3de(int64_t a1);
int64_t function_40f473(int64_t a1, int64_t a2);
int64_t function_40f47c(void);
int64_t function_40f47e(void);
int64_t function_40f480(void);
int64_t function_40f4d9(int64_t a1);
int64_t function_40f526(void);
int64_t function_40f528(int64_t a1, int64_t a2);
int64_t function_40f52c(void);
int64_t function_40f52e(int64_t a1);
int64_t function_40f565(int64_t a1);
int64_t function_40f581(int64_t a1, int64_t a2);
int64_t function_40f586(void);
int64_t function_40f588(int64_t a1, int64_t a2);
int64_t function_40f599(uint64_t a1, int64_t a2);
int64_t function_40f5d0(int64_t a1);
int64_t function_40f5d4(void);
int64_t function_40f5d6(void);
int64_t function_40f901(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40f962(int64_t a1, int64_t a2, int64_t a3);
int64_t function_40fc9e(int64_t a1);
int64_t function_40fd96(void);
int64_t function_40fda9(int64_t a1);
int64_t function_40fdad(int64_t a1, uint64_t a2);
int64_t function_40fdd1(uint64_t a1, int64_t a2);
int64_t function_40fe16(void);
int64_t function_40fecc(void);
int64_t function_410022(int64_t a1, int64_t a2);
int64_t function_410076(int64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7);
int64_t function_41d2f3(int32_t a1);
int64_t function_41d347(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41d372(void);
int64_t function_41d3a9(int64_t a1);
int64_t function_41d3b3(void);
int64_t function_41d3bd(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_41d4d4(int64_t a1, int64_t a2);
int64_t function_41d514(int64_t a1, int64_t a2);
int64_t function_41d522(uint64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41d611(void);
int64_t function_41d622(void);
int64_t function_41d63f(int64_t a1, int64_t a2);
int64_t function_41d655(int64_t a1);
int64_t function_41d681(int64_t a1);
int64_t function_41d691(void);
int64_t function_41d6c6(void);
int64_t function_41d6ec(void);
int64_t function_41d6ee(void);
int64_t function_41d6f4(void);
int64_t function_41d6fe(void);
int64_t function_41d704(void);
int64_t function_41d717(int64_t a1);
int64_t function_41d753(int64_t a1, int64_t a2);
int64_t function_41d7cf(void);
int64_t function_41d80e(uint64_t a1, int64_t a2);
int64_t function_41d879(void);
int64_t function_41d87d(int64_t a1, int64_t a2);
int64_t function_41d888(void);
int64_t function_41d894(int64_t a1, int64_t a2);
int64_t function_41d8da(void);
int64_t function_41d8dc(int64_t a1);
int64_t function_41d935(int64_t a1);
int64_t function_41d93b(void);
int64_t function_41d99e(void);
int64_t function_41d9d9(int64_t a1);
int64_t function_41d9f8(int64_t a1);
int64_t function_41da03(void);
int64_t function_41da07(void);
int64_t function_41da6d(int64_t a1);
int64_t function_41da96(int64_t a1, int64_t a2);
int64_t function_41daae(void);
int64_t function_41dab7(int64_t a1, int64_t a2);
int64_t function_41dad7(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41db8b(void);
int64_t function_41dc14(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41dc87(int64_t a1, int64_t a2);
int64_t function_41dcb5(int64_t a1);
int64_t function_41dccc(int64_t a1, int64_t a2);
int64_t function_41dcde(void);
int64_t function_41dd20(int64_t a1, int64_t a2);
int64_t function_41dd3a(int64_t a1);
int64_t function_41dd40(void);
int64_t function_41dd45(void);
int64_t function_41dd53(void);
int64_t function_41dd54(void);
int64_t function_41dd73(int64_t a1);
int64_t function_41dd74(int64_t a1);
int64_t function_41dd75(uint64_t a1);
int64_t function_41de12(int64_t a1, int64_t a2);
int64_t function_41de9a(int64_t a1);
int64_t function_41de9f(void);
int64_t function_41dec0(void);
int64_t function_41df0f(int64_t a1, int64_t a2);
int64_t function_41df2e(int64_t a1, int64_t a2);
int64_t function_41e006(int64_t a1);
int64_t function_41e026(int64_t a1, int64_t a2, int64_t a3, uint64_t a4);
int64_t function_41e0d4(void);
int64_t function_41e0dc(void);
int64_t function_41e0e0(void);
int64_t function_41e126(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41e1a9(void);
int64_t function_41e1e7(void);
int64_t function_41e211(void);
int64_t function_41e28e(void);
int64_t function_41e2f2(int64_t a1);
int64_t function_41e2f7(int64_t a1);
int64_t function_41e341(void);
int64_t function_41e37c(void);
int64_t function_41e3aa(int64_t a1, int64_t a2);
int64_t function_41e3ec(int64_t a1, int64_t a2);
int64_t function_41e4ad(void);
int64_t function_41e4b2(void);
int64_t function_41e4c3(void);
int64_t function_41e4d0(void);
int64_t function_41e4d8(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41e553(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_41e5ad(void);
int64_t function_41e5b1(void);
int64_t function_41e5cd(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_41e6a8(void);
int64_t function_41e6b2(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41e6c1(void);
int64_t function_41e6c6(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41e733(void);
int64_t function_41e736(void);
int64_t function_41e738(void);
int64_t function_41e743(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41e804(void);
int64_t function_41e80b(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41e8b2(int64_t a1, int64_t a2);
int64_t function_41e8d3(void);
int64_t function_41e906(void);
int64_t function_41e912(int64_t a1);
int64_t function_41e9c5(int64_t a1);
int64_t function_41e9ed(void);
int64_t function_41e9fa(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41eaeb(uint64_t a1, uint64_t a2);
int64_t function_41eb4d(int64_t a1, int64_t a2);
int64_t function_41eb8d(void);
int64_t function_41eb9d(void);
int64_t function_41ebb2(int64_t a1);
int64_t function_41ebbc(int64_t a1, int64_t a2);
int64_t function_41ebde(void);
int64_t function_41ebec(int64_t a1);
int64_t function_41ec0a(void);
int64_t function_41ec12(void);
int64_t function_41ec37(void);
int64_t function_41ece4(void);
int64_t function_41ed0d(void);
int64_t function_41ed13(int64_t a1, int64_t a2);
int64_t function_41ed5d(int64_t a1);
int64_t function_41edbe(void);
int64_t function_41eddd(void);
int64_t function_41ee2f(void);
int64_t function_41ee3b(int64_t a1, int64_t a2);
int64_t function_41eeb5(void);
int64_t function_41eede(int64_t a1);
int64_t function_41eeea(int64_t a1, int64_t a2);
int64_t function_41ef14(int64_t a1, int64_t a2);
int64_t function_41ef44(void);
int64_t function_41ef61(int64_t a1, int64_t a2);
int64_t function_41ef67(void);
int64_t function_41ef9d(int64_t a1, int64_t a2);
int64_t function_41efaa(int64_t a1, int64_t a2);
int64_t function_41efeb(int64_t a1);
int64_t function_41f017(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41f10f(int64_t a1);
int64_t function_41f112(int64_t a1);
int64_t function_41f131(void);
int64_t function_41f202(int64_t a1);
int64_t function_41f210(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41f2c4(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41f2e1(int64_t a1);
int64_t function_41f2eb(int64_t a1, int64_t a2);
int64_t function_41f372(int64_t a1);
int64_t function_41f391(int64_t a1, int64_t a2);
int64_t function_41f3f8(int64_t a1, int64_t a2);
int64_t function_41f40f(int64_t a1, int64_t a2);
int64_t function_41f4a7(void);
int64_t function_41f4b2(void);
int64_t function_41f4be(int64_t a1);
int64_t function_41f4c8(int64_t a1, uint64_t a2);
int64_t function_41f4f1(int64_t a1);
int64_t function_41f50c(uint64_t a1);
int64_t function_41f518(int64_t a1, int64_t a2);
int64_t function_41f570(int64_t a1, int64_t a2);
int64_t function_41f585(int64_t a1);
int64_t function_41f588(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_41f5bd(void);
int64_t function_41f5bf(int64_t a1);
int64_t function_41f5e4(void);
int64_t function_41f5f6(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41f6b2(void);
int64_t function_41f6d7(int64_t a1);
int64_t function_41f6e2(void);
int64_t function_41f6e6(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t result);
int64_t function_41f778(int64_t a1);
int64_t function_41f78b(int64_t a1);
int64_t function_41f7eb(void);
int64_t function_41f7f9(void);
int64_t function_41f809(int64_t a1, int64_t a2);
int64_t function_41f843(void);
int64_t function_41f86f(void);
int64_t function_41f87c(uint64_t a1, int64_t a2);
int64_t function_41f8bc(void);
int64_t function_41f8e8(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41f8fc(int64_t a1);
int64_t function_41f901(int64_t a1);
int64_t function_41f933(void);
int64_t function_41f937(int64_t a1);
int64_t function_41f968(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41f985(int64_t a1);
int64_t function_41f9a4(void);
int64_t function_41f9ab(int64_t a1, int64_t a2);
int64_t function_41f9cd(int64_t a1);
int64_t function_41f9e5(int64_t a1, int64_t a2);
int64_t function_41fa6f(void);
int64_t function_41fa85(void);
int64_t function_41fa8a(void);
int64_t function_41fac0(void);
int64_t function_41fada(int64_t a1, uint64_t a2);
int64_t function_41fafb(int64_t a1);
int64_t function_41fb28(void);
int64_t function_41fb2c(int64_t a1);
int64_t function_41fb50(void);
int64_t function_41fb64(void);
int64_t function_41fb66(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41fb8c(int64_t a1);
int64_t function_41fb9f(void);
int64_t function_41fba4(int64_t a1);
int64_t function_41fbaa(int64_t a1);
int64_t function_41fc02(void);
int64_t function_41fc0c(void);
int64_t function_41fc8c(void);
int64_t function_41fd20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_41fe7e(void);
int64_t function_41fed5(int64_t a1, int64_t a2);
int64_t function_41ff2e(void);
int64_t function_41ff34(int64_t a1, int64_t a2);
int64_t function_41ff54(int64_t a1);
int64_t function_41ff5d(int64_t a1, int64_t a2);
int64_t function_41ff97(void);
int64_t function_41ff9b(int64_t a1);
int64_t function_41ffb4(int64_t a1, int64_t a2, int64_t a3);
int64_t function_41fff0(void);
int64_t function_42000d(void);
int64_t function_420011(void);
int64_t function_420014(void);
int64_t function_42001e(int64_t a1, int64_t a2);
int64_t function_42007c(void);
int64_t function_42009d(int64_t a1, int64_t a2);
int64_t function_420133(int64_t a1, int64_t a2, int64_t a3);
int64_t function_420157(int64_t a1);
int64_t function_42015d(void);
int64_t function_42018b(void);
int64_t function_4201a4(int64_t a1);
int64_t function_4201b5(void);
int64_t function_4201ba(void);
int64_t function_4201be(int64_t a1);
int64_t function_4201d7(int64_t a1, int64_t a2);
int64_t function_4201f5(void);
int64_t function_420214(void);
int64_t function_420244(int64_t a1, int64_t a2, int64_t a3);
int64_t function_420297(int64_t a1, int64_t a2);
int64_t function_4202ca(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42034c(void);
int64_t function_42037a(void);
int64_t function_42038d(void);
int64_t function_4203d6(void);
int64_t function_4203ea(void);
int64_t function_420401(int64_t a1);
int64_t function_420413(int64_t a1);
int64_t function_42041c(void);
int64_t function_420452(int64_t a1, int64_t a2);
int64_t function_42046b(void);
int64_t function_420473(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_42053b(uint64_t a1);
int64_t function_420552(int64_t a1, uint64_t a2);
int64_t function_42056d(int64_t a1, int64_t a2);
int64_t function_420584(int64_t a1);
int64_t function_420585(int64_t a1, int64_t a2);
int64_t function_420592(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4205c3(void);
int64_t function_420619(void);
int64_t function_42063e(void);
int64_t function_42066f(void);
int64_t function_4206ed(int64_t a1);
int64_t function_4206f8(int64_t a1);
int64_t function_42071b(int64_t a1, int64_t a2);
int64_t function_420744(int64_t a1, int64_t a2);
int64_t function_42080f(int64_t a1);
int64_t function_420810(void);
int64_t function_420888(int64_t a1);
int64_t function_4208be(void);
int64_t function_4208d0(void);
int64_t function_4208d2(void);
int64_t function_4208de(int64_t a1);
int64_t function_4208f7(void);
int64_t function_420904(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_420978(int64_t a1, int64_t a2);
int64_t function_420991(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4209c1(int64_t a1);
int64_t function_420a4e(void);
int64_t function_420a64(void);
int64_t function_420a8a(void);
int64_t function_420aa3(int64_t a1, int64_t a2);
int64_t function_420ac2(int64_t a1, int64_t a2, int64_t a3);
int64_t function_420afb(void);
int64_t function_420b25(uint64_t a1, int64_t a2);
int64_t function_420b5a(int64_t a1, int64_t a2);
int64_t function_420b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_420bca(int64_t a1);
int64_t function_420be1(int64_t a1, int64_t a2);
int64_t function_420c00(void);
int64_t function_420c0e(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_420dc6(int64_t a1);
int64_t function_420e15(int64_t a1);
int64_t function_420e3d(int64_t a1, int64_t a2, int64_t a3);
int64_t function_420e64(void);
int64_t function_420e8a(void);
int64_t function_420e8d(int64_t a1);
int64_t function_420e8f(int64_t a1);
int64_t function_420ea3(int64_t a1);
int64_t function_420eb3(void);
int64_t function_420ec9(void);
int64_t function_420ecf(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_420f41(int64_t a1, int64_t a2);
int64_t function_420f56(void);
int64_t function_420f5c(void);
int64_t function_420f88(int64_t a1, int64_t a2);
int64_t function_420fba(int64_t a1);
int64_t function_420fe0(int64_t a1, int64_t a2);
int64_t function_42101e(void);
int64_t function_421039(void);
int64_t function_421056(void);
int64_t function_42105d(void);
int64_t function_42106b(void);
int64_t function_42108f(int64_t a1);
int64_t function_42110c(int64_t a1);
int64_t function_421173(void);
int64_t function_421187(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_421215(uint64_t result);
int64_t function_42123c(int64_t a1);
int64_t function_42128b(int64_t a1);
int64_t function_4212c4(void);
int64_t function_4212d4(void);
int64_t function_4212e1(void);
int64_t function_4212f8(int64_t a1);
int64_t function_421307(void);
int64_t function_42130f(void);
int64_t function_421317(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_421391(void);
int64_t function_42139d(int64_t a1, int64_t a2);
int64_t function_4213bd(int64_t a1);
int64_t function_4213d5(void);
int64_t function_4213ea(int64_t a1);
int64_t function_42141d(void);
int64_t function_42143f(void);
int64_t function_421461(void);
int64_t function_42149b(void);
int64_t function_4214ab(void);
int64_t function_4214cc(int64_t a1, int64_t a2);
int64_t function_421501(void);
int64_t function_421562(void);
int64_t function_42158a(void);
int64_t function_42159c(int64_t a1, int64_t a2);
int64_t function_421695(void);
int64_t function_4216a3(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4216b4(int64_t a1);
int64_t function_4216c0(void);
int64_t function_4216e5(void);
int64_t function_421702(void);
int64_t function_421731(void);
int64_t function_42176a(void);
int64_t function_42176c(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4217a9(int64_t a1, int64_t a2);
int64_t function_4217f7(void);
int64_t function_42180d(int64_t a1);
int64_t function_421814(int64_t a1, uint64_t a2);
int64_t function_42183f(void);
int64_t function_421869(int64_t a1);
int64_t function_4218af(int64_t a1);
int64_t function_4218b9(void);
int64_t function_4218cd(void);
int64_t function_4218da(void);
int64_t function_421939(int64_t a1, int64_t a2);
int64_t function_421956(void);
int64_t function_421975(void);
int64_t function_4219ac(void);
int64_t function_4219bd(void);
int64_t function_4219e1(void);
int64_t function_4219fe(int64_t a1);
int64_t function_421a0c(int64_t a1, int64_t a2);
int64_t function_421a2f(void);
int64_t function_421a56(int64_t a1);
int64_t function_421a66(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_421b04(int64_t a1);
int64_t function_421b32(int64_t a1);
int64_t function_421b8e(void);
int64_t function_421bac(int64_t a1, int64_t a2, int64_t a3);
int64_t function_421bbb(void);
int64_t function_421bc9(void);
int64_t function_421be8(int64_t a1);
int64_t function_421bf6(int64_t a1);
int64_t function_421c0a(void);
int64_t function_421c47(void);
int64_t function_421c48(int64_t a1);
int64_t function_421c62(void);
int64_t function_421cb4(void);
int64_t function_421cbb(void);
int64_t function_421ccb(int64_t a1, int64_t a2);
int64_t function_421d3b(int64_t a1);
int64_t function_421d46(void);
int64_t function_421d61(int64_t a1, int64_t a2);
int64_t function_421dab(int64_t a1, uint64_t a2);
int64_t function_421e26(void);
int64_t function_421e34(void);
int64_t function_421e3c(int64_t a1, int64_t a2);
int64_t function_421e46(void);
int64_t function_421e4b(int64_t a1, int64_t a2);
int64_t function_421e74(int64_t a1, int64_t a2);
int64_t function_421ea0(int64_t a1, int64_t a2);
int64_t function_421eac(int64_t a1);
int64_t function_421eb9(void);
int64_t function_421ed0(void);
int64_t function_421f41(void);
int64_t function_421f4d(int64_t a1);
int64_t function_421f50(void);
int64_t function_421f5f(int64_t a1);
int64_t function_421f64(void);
int64_t function_421f81(int64_t a1, uint64_t a2);
int64_t function_421fb3(int64_t a1, int64_t a2);
int64_t function_421fcb(int64_t a1);
int64_t function_421ffa(void);
int64_t function_422012(int64_t a1, int64_t a2);
int64_t function_422039(int64_t a1);
int64_t function_42203d(void);
int64_t function_422050(void);
int64_t function_42205f(void);
int64_t function_422070(void);
int64_t function_422075(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4220ad(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_422258(void);
int64_t function_42227c(void);
int64_t function_422293(void);
int64_t function_422298(int64_t a1);
int64_t function_4222af(void);
int64_t function_4222c3(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_422396(void);
int64_t function_4223f4(void);
int64_t function_4223f9(void);
int64_t function_4223ff(int64_t a1);
int64_t function_422405(void);
int64_t function_422424(int64_t a1);
int64_t function_422448(int64_t a1);
int64_t function_42244b(uint64_t a1, uint64_t a2);
int64_t function_42245e(int64_t a1);
int64_t function_42248c(void);
int64_t function_422495(void);
int64_t function_4224a6(int64_t a1);
int64_t function_4224be(int64_t a1, int64_t a2);
int64_t function_422535(int64_t a1, int64_t a2);
int64_t function_422558(void);
int64_t function_422560(void);
int64_t function_42257f(int64_t a1, int64_t a2);
int64_t function_422591(int64_t a1);
int64_t function_42259c(void);
int64_t function_4225aa(int64_t a1, int64_t a2);
int64_t function_4225c6(int64_t a1, int64_t a2);
int64_t function_4226e9(int64_t a1, int64_t a2);
int64_t function_4226f2(int64_t a1, int64_t a2);
int64_t function_422703(int64_t a1);
int64_t function_422709(int64_t a1, int64_t a2);
int64_t function_42273a(int64_t result);
int64_t function_42275a(void);
int64_t function_42278f(int64_t a1);
int64_t function_4227aa(int64_t a1, int64_t a2);
int64_t function_4227ec(int64_t a1, int64_t a2);
int64_t function_42284a(int64_t a1, int64_t a2, int64_t a3);
int64_t function_422876(void);
int64_t function_422884(void);
int64_t function_42288f(int64_t a1);
int64_t function_422896(void);
int64_t function_4228ae(int64_t a1, int64_t a2);
int64_t function_4228f8(void);
int64_t function_422913(void);
int64_t function_42291f(void);
int64_t function_422932(int64_t a1, int64_t a2);
int64_t function_42293e(int64_t a1);
int64_t function_422988(void);
int64_t function_422991(void);
int64_t function_4229ae(void);
int64_t function_4229be(int64_t a1);
int64_t function_4229ce(void);
int64_t function_4229de(int64_t a1);
int64_t function_4229ea(int64_t a1);
int64_t function_4229ee(int64_t a1, int64_t a2);
int64_t function_4229f8(void);
int64_t function_422a76(void);
int64_t function_422a7f(void);
int64_t function_422a97(void);
int64_t function_422aa8(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_422b52(void);
int64_t function_422ba1(int64_t a1);
int64_t function_422bc0(void);
int64_t function_422bc7(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_422bfd(int64_t a1);
int64_t function_422c53(void);
int64_t function_422c5c(void);
int64_t function_422c69(void);
int64_t function_422ca4(void);
int64_t function_422caa(void);
int64_t function_422cef(int64_t a1);
int64_t function_422d86(int64_t a1);
int64_t function_422e08(int64_t a1, int64_t a2, int64_t a3);
int64_t function_422e1e(void);
int64_t function_422e65(void);
int64_t function_422e6b(int64_t a1, int64_t a2);
int64_t function_422e92(int64_t a1);
int64_t function_422ea7(int64_t a1);
int64_t function_422eb7(int64_t a1, int64_t a2);
int64_t function_422f3d(void);
int64_t function_422fa3(int64_t a1, int64_t a2);
int64_t function_422fc5(uint64_t a1);
int64_t function_422ff9(void);
int64_t function_423026(void);
int64_t function_42303a(void);
int64_t function_423047(void);
int64_t function_42305c(void);
int64_t function_423060(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4230a5(void);
int64_t function_4230a8(int64_t a1, int64_t a2);
int64_t function_4230db(void);
int64_t function_4230e8(int64_t a1);
int64_t function_423114(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42320e(int64_t a1);
int64_t function_423244(int64_t a1, int64_t a2);
int64_t function_423290(void);
int64_t function_423295(int64_t a1, int64_t a2);
int64_t function_4232b1(void);
int64_t function_4232df(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4232fc(void);
int64_t function_423305(void);
int64_t function_423321(void);
int64_t function_423360(void);
int64_t function_42336c(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4233f5(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_42349b(int64_t a1);
int64_t function_4234b0(int64_t a1);
int64_t function_4234ec(void);
int64_t function_42350b(void);
int64_t function_423554(void);
int64_t function_42357a(void);
int64_t function_4235e2(void);
int64_t function_423619(void);
int64_t function_42369a(int64_t a1, int64_t a2);
int64_t function_4236b8(uint64_t a1);
int64_t function_4236ca(int64_t a1, int64_t a2);
int64_t function_4236cd(int64_t a1);
int64_t function_4236d9(int64_t a1, int64_t a2);
int64_t function_423736(void);
int64_t function_42376b(int64_t a1);
int64_t function_423778(int64_t a1);
int64_t function_423787(int64_t a1, int64_t a2);
int64_t function_4237c5(void);
int64_t function_4237e7(void);
int64_t function_4237e8(int64_t a1, int64_t a2);
int64_t function_42386f(void);
int64_t function_4238ae(void);
int64_t function_4238b1(void);
int64_t function_4238cf(int64_t a1);
int64_t function_42392b(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_423a21(void);
int64_t function_423a2a(void);
int64_t function_423a54(int64_t a1, int64_t a2);
int64_t function_423a64(int64_t a1, int64_t a2);
int64_t function_423a95(void);
int64_t function_423aa9(void);
int64_t function_423ac6(int64_t a1);
int64_t function_423b21(void);
int64_t function_423b36(void);
int64_t function_423b3c(void);
int64_t function_423b42(int64_t a1, int64_t a2);
int64_t function_423b51(void);
int64_t function_423b52(uint64_t a1, int64_t a2, int64_t result);
int64_t function_423b74(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_423c29(int64_t a1, int64_t a2);
int64_t function_423c8c(int64_t a1, int64_t a2);
int64_t function_423ca1(void);
int64_t function_423cbe(int64_t a1, int64_t a2);
int64_t function_423cf6(void);
int64_t function_423cfc(int64_t a1, int64_t a2);
int64_t function_423d13(int64_t a1);
int64_t function_423d4e(void);
int64_t function_423d62(void);
int64_t function_423d91(void);
int64_t function_423da2(void);
int64_t function_423db5(void);
int64_t function_423dba(void);
int64_t function_423e0c(void);
int64_t function_423e13(void);
int64_t function_423e1a(int64_t a1, int64_t a2);
int64_t function_423e8f(int64_t a1);
int64_t function_423eb7(void);
int64_t function_423edd(int64_t a1, int64_t a2);
int64_t function_423f0b(void);
int64_t function_423f15(void);
int64_t function_423f1a(uint64_t a1);
int64_t function_423f30(void);
int64_t function_423f4d(void);
int64_t function_423f54(int64_t a1);
int64_t function_423f93(int64_t a1);
int64_t function_423f9f(int64_t a1);
int64_t function_423fea(int64_t a1);
int64_t function_424002(void);
int64_t function_424005(int64_t a1);
int64_t function_42401a(int64_t a1, int64_t a2);
int64_t function_42408a(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42414c(int64_t a1);
int64_t function_424173(void);
int64_t function_42419c(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42420a(int64_t a1);
int64_t function_424230(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
int64_t function_4242d3(int64_t a1);
int64_t function_4242f9(void);
int64_t function_424325(int64_t a1);
int64_t function_42436a(void);
int64_t function_424370(int64_t a1, int64_t a2);
int64_t function_4243ae(int64_t a1, int64_t a2);
int64_t function_4243c9(void);
int64_t function_4243cd(int64_t a1, int64_t a2);
int64_t function_4243d4(int64_t a1, int64_t a2);
int64_t function_424428(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_424476(void);
int64_t function_42448c(int64_t a1, uint64_t a2);
int64_t function_4245af(int64_t a1);
int64_t function_424620(int64_t a1);
int64_t function_42464e(void);
int64_t function_424650(int64_t a1);
int64_t function_42465b(void);
int64_t function_42467c(int64_t a1, int64_t a2);
int64_t function_424686(int64_t a1);
int64_t function_42469f(void);
int64_t function_4246b4(void);
int64_t function_4246bb(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42470f(int64_t a1);
int64_t function_42471e(int64_t a1);
int64_t function_42472e(int64_t a1, int64_t a2, int64_t a3);
int64_t function_424784(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_42486c(int64_t a1, int64_t a2);
int64_t function_42488c(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_4248d5(int64_t a1, int64_t a2, int64_t a3);
int64_t function_424903(int64_t a1, uint64_t a2);
int64_t function_42497a(int64_t a1, int64_t a2);
int64_t function_424988(int64_t a1);
int64_t function_42499d(int64_t a1);
int64_t function_4249b0(void);
int64_t function_4249c1(int64_t a1);
int64_t function_4249ca(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_424a86(void);
int64_t function_424aa7(void);
int64_t function_424ad9(int64_t a1);
int64_t function_424af5(void);
int64_t function_424b0b(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_424b32(int64_t a1);
int64_t function_424b55(void);
int64_t function_424b5a(int64_t a1, int64_t a2, int64_t a3);
int64_t function_424bff(int64_t a1);
int64_t function_424c4a(void);
int64_t function_424c5a(void);
int64_t function_424ca4(void);
int64_t function_424cb8(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_424db2(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_424fa6(void);
int64_t function_424fac(void);
int64_t function_424fbf(void);
int64_t function_424fd1(int64_t a1);
int64_t function_424fe0(void);
int64_t function_424ffa(int64_t a1);
int64_t function_425068(void);
int64_t function_425084(int64_t a1);
int64_t function_4250b1(void);
int64_t function_4250c6(int64_t a1, int64_t a2);
int64_t function_425123(void);
int64_t function_425166(void);
int64_t function_42518c(int64_t a1);
int64_t function_4251b0(void);
int64_t function_4251bf(void);
int64_t function_4251ca(int64_t a1, int64_t a2);
int64_t function_4251d9(void);
int64_t function_4251de(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6);
int64_t function_42531b(void);
int64_t function_425337(void);
int64_t function_425346(void);
int64_t function_42536d(void);
int64_t function_425374(int64_t a1);
int64_t function_42537e(int64_t a1, int64_t a2, int64_t a3);
int64_t function_425393(int64_t a1);
int64_t function_4253f4(int64_t a1, int64_t a2);
int64_t function_42547c(void);
int64_t function_42548b(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_4254c5(int64_t a1);
int64_t function_4254c9(int64_t a1);
int64_t function_4254dd(uint64_t a1, int64_t a2, int64_t a3);
int64_t function_4254ee(void);
int64_t function_425519(void);
int64_t function_42551d(int64_t a1);
int64_t function_42552d(void);
int64_t function_425543(int64_t a1, int64_t a2, int64_t a3);
int64_t function_42555b(int64_t a1, int64_t a2);
int64_t function_4255db(int64_t a1, int64_t a2);
int64_t function_425613(void);
int64_t function_42565b(void);
int64_t function_425662(int64_t a1, int64_t a2, int64_t a3);
int64_t function_425728(void);
int64_t function_425731(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_4257c4(int64_t a1);
int64_t function_4257d2(int64_t a1);
int64_t function_4257f5(void);
int64_t function_42580f(void);
int64_t function_425823(void);
int64_t function_425830(int64_t a1, int64_t a2);
int64_t function_4258a0(void);
int64_t function_4258a1(int64_t a1, int64_t a2);
int64_t function_4258aa(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4258c0(int64_t a1);
int64_t function_4258e7(void);
int64_t function_4258e8(void);
int64_t function_4258ee(void);
int64_t function_425900(void);
int64_t function_425925(int64_t a1);
int64_t function_42592e(void);
int64_t function_425945(void);
int64_t function_425950(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_425ae2(void);
int64_t function_425b00(void);
int64_t function_425b06(int64_t a1);
int64_t function_425b08(int64_t a1, int64_t a2, int64_t a3);
int64_t function_425b4e(int64_t a1);
int64_t function_425ba8(void);
int64_t function_425bc0(void);
int64_t function_425c4c(void);
int64_t function_425ca5(void);
int64_t function_425cbf(void);
int64_t function_425cd8(void);
int64_t function_425d0c(int64_t a1, int64_t a2, int64_t a3);
int64_t function_425da2(int64_t a1);
int64_t function_425dae(void);
int64_t function_425deb(void);
int64_t function_425e1b(int64_t a1);
int64_t function_425e47(void);
int64_t function_425e4e(void);
int64_t function_425e51(int64_t a1);
int64_t function_425e70(void);
int64_t function_425e7d(void);
int64_t function_425e8d(void);
int64_t function_425e9b(int64_t a1, int64_t a2);
int64_t function_425ef3(int64_t a1, uint64_t a2);
int64_t function_425f09(void);
int64_t function_425f3d(int64_t a1, int64_t a2);
int64_t function_425f79(int64_t a1);
int64_t function_425f7e(int64_t a1);
int64_t function_425f84(int64_t a1, int64_t a2, int64_t a3);
int64_t function_425fca(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4260ae(int64_t a1);
int64_t function_4260e3(int64_t a1, int64_t a2);
int64_t function_4260f9(void);
int64_t function_426118(void);
int64_t function_426123(int64_t a1, int64_t a2);
int64_t function_426133(void);
int64_t function_42614c(int64_t a1);
int64_t function_426152(void);
int64_t function_426165(void);
int64_t function_42617b(void);
int64_t function_426181(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_426266(int64_t a1);
int64_t function_426268(void);
int64_t function_4262a7(void);
int64_t function_426314(int64_t a1);
int64_t function_426316(int64_t a1, int64_t a2);
int64_t function_4263c8(void);
int64_t function_4263d9(void);
int64_t function_426427(void);
int64_t function_426495(void);
int64_t function_4264a4(void);
int64_t function_426562(void);
int64_t function_42656b(void);
int64_t function_426579(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_4266ad(int64_t a1);
int64_t function_426746(void);
int64_t function_42674b(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_426771(int64_t a1, int64_t a2);
int64_t function_4267a3(void);
int64_t function_4267be(void);
int64_t function_4267c1(void);
int64_t function_4267c6(void);
int64_t function_426809(void);
int64_t function_42680e(int64_t a1, int64_t a2);
int64_t function_42684b(int32_t a1);
int64_t function_426868(void);
int64_t function_42687f(int64_t a1);
int64_t function_426896(void);
int64_t function_4268a4(int64_t a1, int64_t a2);
int64_t function_4268bb(int64_t a1, int64_t a2, int64_t a3);
int64_t function_426949(int64_t a1);
int64_t function_426960(int64_t a1);
int64_t function_426963(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4269f5(void);
int64_t function_4269ff(int64_t a1);
int64_t function_426a04(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_426a7e(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_426b24(void);
int64_t function_426b62(int64_t a1);
int64_t function_426b69(void);
int64_t function_426bc3(int64_t a1, int64_t a2);
int64_t function_426bff(int64_t a1);
int64_t function_426c20(void);
int64_t function_426c2d(int64_t a1, int64_t a2);
int64_t function_426c79(int64_t a1);
int64_t function_426c8a(void);
int64_t function_426cb9(int64_t a1, int64_t a2, int64_t a3);
int64_t function_426cef(int64_t a1, int64_t a2, int64_t a3);
int64_t function_426d8c(void);
int64_t function_426da6(void);
int64_t function_426dac(void);
int64_t function_426dd6(void);
int64_t function_426e0d(int64_t a1, int64_t a2);
int64_t function_426e98(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5);
int64_t function_426f51(int64_t a1, int64_t a2, int64_t a3);
int64_t function_426f8c(int64_t a1, int64_t a2, int64_t a3);
int64_t function_426fbf(void);
int64_t function_426fdb(int64_t a1);
int64_t function_426fe0(int64_t result);
int64_t function_42705c(int64_t a1, int64_t a2, int64_t a3, int64_t a4);
int64_t function_4271a8(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4271ac(int64_t a1, uint64_t a2);
int64_t function_4271c7(int64_t a1);
int64_t function_4271fa(void);
int64_t function_42724e(int64_t a1, uint64_t a2, int64_t a3);
int64_t function_42725d(int64_t a1);
int64_t function_4272b6(void);
int64_t function_4272c6(int64_t a1, int64_t a2, int64_t a3);
int64_t function_4275f5(void);
int64_t function_42784d(int64_t a1, int64_t a2);
int64_t function_428749(int64_t a1, int64_t a2);
int64_t function_4289ca(void);
int64_t function_4388ae39(void);
int64_t function_4510bde9(void);
int64_t function_45b64d37(void);
int64_t function_48e26420(void);
int64_t function_4948500a(void);
int64_t function_4b6f6ccb(void);
int64_t function_4c49785b(void);
int64_t function_4f766307(void);
int64_t function_508aa8a5(void);
int64_t function_540f02d(void);
int64_t function_54a14c85(void);
int64_t function_565fbaf3(void);
int64_t function_57459686(void);
int64_t function_5749f4eb(void);
int64_t function_574c4227(void);
int64_t function_585985f2(void);
int64_t function_59484f7a(void);
int64_t function_59db732f(void);
int64_t function_5a5ca4e5(void);
int64_t function_5bcd9153(void);
int64_t function_5c819705(void);
int64_t function_5ce858bd(void);
int64_t function_5e971fe0(void);
int64_t function_5ea97a08(void);
int64_t function_5ead1356(void);
int64_t function_6015db9f(void);
int64_t function_608c0f34(void);
int64_t function_642aa37(void);
int64_t function_647c30b(void);
int64_t function_64d0f283(void);
int64_t function_660142fc(void);
int64_t function_6687983c(void);
int64_t function_6755d1f8(void);
int64_t function_67a23335(void);
int64_t function_6940ee7f(void);
int64_t function_6b40b873(void);
int64_t function_6c4298e8(void);
int64_t function_6f53cb30(void);
int64_t function_6fe866dd(void);
int64_t function_7041ea34(void);
int64_t function_70d7cf7b(void);
int64_t function_71d553e9(void);
int64_t function_744314a3(void);
int64_t function_7446834a(void);
int64_t function_7539ece0(void);
int64_t function_755597ec(void);
int64_t function_76480a03(void);
int64_t function_7b3e6d65(void);
int64_t function_7be2628a(void);
int64_t function_7c425596(void);
int64_t function_7d4cbec1(void);
int64_t function_7e61c962(void);
int64_t function_8751c66(void);
int64_t function_8877eee(void);
int64_t function_9433239(void);
int64_t function_94bb48b(void);
int64_t function_951495e(void);
int64_t function_aeae6bd(void);
int64_t function_b502d54(void);
int64_t function_b5bb721(void);
int64_t function_cac49f4(void);
int64_t function_d3e30de(void);
int64_t function_d3fc927(void);
int64_t function_d3fc9f0(void);
int64_t function_d3fca11(void);
int64_t function_dd4adf8(void);
int64_t function_eed5eaa(void);
int64_t function_fcb1bcd(void);
int64_t function_ffffffff8041ec50(void);
int64_t function_ffffffff814c8ff7(void);
int64_t function_ffffffff81968385(void);
int64_t function_ffffffff81a848bb(void);
int64_t function_ffffffff82f15c93(void);
int64_t function_ffffffff83748822(void);
int64_t function_ffffffff84431479(void);
int64_t function_ffffffff84431876(void);
int64_t function_ffffffff87de042c(void);
int64_t function_ffffffff8841ed5e(void);
int64_t function_ffffffff887db3ce(void);
int64_t function_ffffffff8be9fdb9(void);
int64_t function_ffffffff8c41cb20(void);
int64_t function_ffffffff8c4256a4(void);
int64_t function_ffffffff8c431425(void);
int64_t function_ffffffff8c697402(void);
int64_t function_ffffffff8c949638(void);
int64_t function_ffffffff8d8c793a(void);
int64_t function_ffffffff8de8849d(void);
int64_t function_ffffffff8df1daf8(void);
int64_t function_ffffffff8f6721ed(void);
int64_t function_ffffffff8fe374e6(void);
int64_t function_ffffffff91e64768(void);
int64_t function_ffffffff925f0cfc(void);
int64_t function_ffffffff93a5c3de(void);
int64_t function_ffffffff947a23e6(void);
int64_t function_ffffffff948556b9(void);
int64_t function_ffffffff95dd6171(void);
int64_t function_ffffffff9661c9d2(void);
int64_t function_ffffffff97826008(void);
int64_t function_ffffffff9797429f(void);
int64_t function_ffffffff98bc19b7(void);
int64_t function_ffffffff9979c9bc(void);
int64_t function_ffffffff99bf1d81(void);
int64_t function_ffffffff9bc8a1a0(void);
int64_t function_ffffffff9f6973f8(void);
int64_t function_ffffffffa00b4d45(void);
int64_t function_ffffffffa00fc753(void);
int64_t function_ffffffffa040626c(void);
int64_t function_ffffffffa0ed9294(void);
int64_t function_ffffffffa0f30717(void);
int64_t function_ffffffffa2808a48(void);
int64_t function_ffffffffa6515d3c(void);
int64_t function_ffffffffa6cd84f1(void);
int64_t function_ffffffffa892fa7b(void);
int64_t function_ffffffffa9b06007(void);
int64_t function_ffffffffab0c28ce(void);
int64_t function_ffffffffab356965(void);
int64_t function_ffffffffab99456e(void);
int64_t function_ffffffffad2495c5(void);
int64_t function_ffffffffadae6cc8(void);
int64_t function_ffffffffaffcd522(void);
int64_t function_ffffffffb074801b(void);
int64_t function_ffffffffb174f917(void);
int64_t function_ffffffffb55e5b59(void);
int64_t function_ffffffffb6e4480e(void);
int64_t function_ffffffffb7323045(void);
int64_t function_ffffffffb781cae8(void);
int64_t function_ffffffffb9d810f4(void);
int64_t function_ffffffffba4a8b2f(void);
int64_t function_ffffffffbafcb4e9(void);
int64_t function_ffffffffbb795cc4(void);
int64_t function_ffffffffbb9fbb1d(void);
int64_t function_ffffffffbd40db32(void);
int64_t function_ffffffffbd8522ab(void);
int64_t function_ffffffffbe6e4d68(void);
int64_t function_ffffffffbf58068c(void);
int64_t function_ffffffffbf5ab58d(void);
int64_t function_ffffffffc1c242a5(void);
int64_t function_ffffffffcb48b961(void);
int64_t function_ffffffffccc0ce4f(void);
int64_t function_ffffffffcd2e8e8b(void);
int64_t function_ffffffffcdb879ea(void);
int64_t function_ffffffffce00bf50(void);
int64_t function_ffffffffd0392167(void);
int64_t function_ffffffffd406a4a5(void);
int64_t function_ffffffffd42f724a(void);
int64_t function_ffffffffd4431487(void);
int64_t function_ffffffffd443154a(void);
int64_t function_ffffffffd56243ba(void);
int64_t function_ffffffffd58861b2(void);
int64_t function_ffffffffd6beccf0(void);
int64_t function_ffffffffd938b8c5(void);
int64_t function_ffffffffda2ec930(void);
int64_t function_ffffffffdbd127e5(void);
int64_t function_ffffffffdc431433(void);
int64_t function_ffffffffdcf21017(void);
int64_t function_ffffffffde2fb419(void);
int64_t function_ffffffffde446d1f(void);
int64_t function_ffffffffe425f671(void);
int64_t function_ffffffffe46f905a(void);
int64_t function_ffffffffe4966e46(void);
int64_t function_ffffffffe6115e1a(void);
int64_t function_ffffffffe61a258c(void);
int64_t function_ffffffffe641a55c(void);
int64_t function_ffffffffe6420c57(void);
int64_t function_ffffffffe673642d(void);
int64_t function_ffffffffe6bb61c9(void);
int64_t function_ffffffffe72caca4(void);
int64_t function_ffffffffe769b80c(void);
int64_t function_ffffffffeb6b5b8e(void);
int64_t function_ffffffffecf0bc75(void);
int64_t function_ffffffffed206649(void);
int64_t function_ffffffffee5db4f5(void);
int64_t function_ffffffffef746321(void);
int64_t function_ffffffffef77988f(void);
int64_t function_ffffffffef8dbd1a(void);
int64_t function_ffffffffefd063f5(void);
int64_t function_fffffffff040b620(void);
int64_t function_fffffffff086169e(void);
int64_t function_fffffffff3c1d621(void);
int64_t function_fffffffff441cbd6(void);
int64_t function_fffffffff441e67d(void);
int64_t function_fffffffff5271057(void);
int64_t function_fffffffff6f2517d(void);
int64_t function_fffffffff7296421(void);
int64_t function_fffffffff7c5e66f(void);
int64_t function_fffffffff8431441(void);
int64_t function_fffffffff89abb09(void);
int64_t function_fffffffff9594a1f(void);
int64_t function_fffffffffa7e35ba(void);
int64_t function_fffffffffa8c656d(void);
int64_t function_fffffffffa8ed5c6(void);
int64_t function_fffffffffc4b824e(void);
int64_t function_fffffffffc9073be(void);
int64_t function_fffffffffe408895(void);
int64_t function_fffffffffe408e81(void);
int64_t function_fffffffffe409154(void);
int64_t unknown_1c535e7a(int64_t a1);
int64_t unknown_28468345(int64_t a1);
int64_t unknown_2a4ae163(void);
int64_t unknown_3090d676(void);
int64_t unknown_34d7fa5e(void);
int64_t unknown_36c7fbff(void);
int64_t unknown_40c66028(void);
int64_t unknown_415c67e9(void);
int64_t unknown_4e38f4f(void);
int64_t unknown_52bd337b(void);
int64_t unknown_637be4db(void);
int64_t unknown_aaf2f77(void);
int64_t unknown_ffffffff874586d0(void);
int64_t unknown_ffffffff93ca3296(void);
int64_t unknown_ffffffff9a468fe0(void);
int64_t unknown_ffffffffb23680c7(void);
int64_t unknown_ffffffffbb83b555(void);
int64_t unknown_ffffffffcafd7d6b(void);
int64_t unknown_ffffffffcf897639(void);
int64_t unknown_ffffffffd6578bf6(void);
int64_t unknown_ffffffffdb2de981(int64_t a1);
int64_t unknown_fffffffffc42c6db(void);
int64_t unknown_fffffffffffffff8(int64_t a1);

// --------------------- Global Variables ---------------------

int64_t g1 = 0; // r12
int32_t g2;

// ------------------------ Functions -------------------------

// Address range: 0x402000 - 0x402016
int64_t function_402000(int64_t a1, int64_t a2, int64_t a3) {
    // 0x402000
    int64_t v1; // 0x402000
    int64_t v2 = v1 & -256; // 0x402000
    unsigned char v3 = *(char *)(v2 | 137) - 119; // 0x402002
    int64_t result = v2 | (int64_t)v3; // 0x402002
    char * v4 = (char *)result; // 0x402004
    *v4 = 3 * v3 + *v4;
    int64_t v5; // 0x402000
    *(char *)a2 = *(char *)&v5 + v3;
    *(char *)0x1271413 = *(char *)0x1271413 + v3;
    return result;
}

// Address range: 0x40338b - 0x403392
int64_t function_40338b(void) {
    // 0x40338b
    int64_t v1; // 0x40338b
    return function_403b93(v1, v1, (int64_t)&g2);
}

// Address range: 0x403701 - 0x403703
int64_t function_403701(void) {
    // 0x403701
    int64_t result; // 0x403701
    return result;
}

// Address range: 0x403720 - 0x403723
int64_t function_403720(void) {
    // 0x403720
    int64_t result; // 0x403720
    return result;
}

// Address range: 0x403723 - 0x403729
int64_t function_403723(void) {
    // 0x403723
    int64_t result; // 0x403723
    return result;
}

// Address range: 0x403744 - 0x40374f
int64_t function_403744(void) {
    // 0x403744
    int64_t v1; // 0x403744
    int64_t v2 = v1;
    *(char *)v2 = (char)(v1 & v2);
    int64_t result; // 0x403744
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    *(char *)result = *(char *)&result + (char)(v1 / 256);
    return result;
}

// Address range: 0x403761 - 0x403763
int64_t function_403761(void) {
    // 0x403761
    int64_t result; // 0x403761
    return result;
}

// Address range: 0x40376d - 0x40376f
int64_t function_40376d(void) {
    // 0x40376d
    int64_t result; // 0x40376d
    return result;
}

// Address range: 0x403b93 - 0x403ba4
int64_t function_403b93(int64_t a1, int64_t a2, int64_t a3) {
    int64_t v1 = a1;
    char * v2 = (char *)(a1 + 0x13591708 + a2); // 0x403b94
    unsigned char v3 = *v2; // 0x403b94
    char v4 = a1;
    unsigned char v5 = v4 % 32; // 0x403b94
    v1 = a1;
    char v6 = v4; // 0x403b94
    if (v5 != 0) {
        bool v7; // 0x403b93
        *v2 = v3 >> v5 | (char)v7 << 8 - v5 | (char)((int16_t)v3 << (int16_t)(9 - v5));
        v6 = *(char *)&v1;
    }
    char v8 = a2; // 0x403b9b
    *(char *)v1 = v6 | v8;
    int64_t v9; // 0x403b93
    *(char *)v9 = *(char *)&v9 | v8;
    int64_t result; // 0x403b93
    return result;
}

// Address range: 0x4047bd - 0x4047c0
int64_t function_4047bd(void) {
    // 0x4047bd
    int64_t v1; // 0x4047bd
    uint64_t result = v1;
    *(char *)result = (char)(result / 256) + (char)result;
    return result;
}

// Address range: 0x4048a2 - 0x4048a5
int64_t function_4048a2(void) {
    // 0x4048a2
    int64_t result; // 0x4048a2
    return result;
}

// Address range: 0x4048ae - 0x4048c1
int64_t function_4048ae(int64_t result) {
    // 0x4048ae
    int64_t v1; // 0x4048ae
    uint64_t v2 = v1;
    int64_t v3 = v1;
    *(char *)v3 = 2 * (char)v3;
    int64_t v4; // 0x4048ae
    *(char *)v4 = *(char *)&v4 & (char)v2;
    int64_t v5; // 0x4048ae
    unsigned char v6 = *(char *)&v5; // 0x4048b3
    unsigned char v7 = v6 + (char)v5; // 0x4048b3
    *(char *)v5 = v7;
    int64_t v8; // 0x4048ae
    *(char *)v8 = *(char *)&v8 - 1;
    char * v9 = (char *)result; // 0x4048b8
    char v10 = *v9; // 0x4048b8
    *v9 = 2 * (char)result + (char)(v2 / 256) + (char)(v7 < v6) + v10;
    return result;
}

// Address range: 0x4049d2 - 0x4049d9
int64_t function_4049d2(void) {
    // 0x4049d2
    int64_t v1; // 0x4049d2
    uint64_t result = v1;
    *(char *)result = (char)(result / 256) + (char)result;
    return result;
}

// Address range: 0x404aa4 - 0x404ab8
int64_t function_404aa4(int64_t a1, int64_t a2, int64_t a3) {
    // 0x404aa4
    int64_t v1; // 0x404aa4
    unsigned char v2 = (char)v1;
    unsigned char v3 = 2 * v2; // 0x404aa4
    *(char *)v1 = v3;
    int64_t v4; // 0x404aa4
    *(char *)v4 = *(char *)&v4 - 1;
    unsigned char v5 = (char)(v3 < v2);
    int64_t v6 = v1 & -256; // 0x404aa8
    char * v7 = (char *)(v6 | (int64_t)v5); // 0x404aac
    *v7 = *v7 - v5;
    char v8 = v1 / 256; // 0x404aae
    int64_t v9; // 0x404aa4
    *(char *)a2 = *(char *)&v9 + v8;
    *(int32_t *)v1 = __asm_insd((int16_t)a2);
    int64_t result = v6 | (int64_t)(*v7 + v5); // 0x404ab1
    char * v10 = (char *)result; // 0x404ab3
    *v10 = *v10 + v8;
    return result;
}

// Address range: 0x404d30 - 0x404d33
int64_t function_404d30(int64_t a1) {
    // 0x404d30
    int64_t result; // 0x404d30
    return result;
}

// Address range: 0x404eba - 0x404ebd
int64_t function_404eba(void) {
    // 0x404eba
    int64_t v1; // 0x404eba
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40505e - 0x405061
int64_t function_40505e(int64_t a1) {
    // 0x40505e
    int64_t v1; // 0x40505e
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40516c - 0x405175
int64_t function_40516c(int64_t a1, int64_t a2) {
    // 0x40516c
    int64_t v1; // 0x40516c
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x40516c
    uint32_t v3 = *(int32_t *)&result; // 0x40516e
    int64_t v4 = result;
    *(char *)v4 = (char)(v3 < (int32_t)a2) + (char)v3 + (char)v4;
    uint64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)(v5 / 256);
    return result;
}

// Address range: 0x4051bd - 0x4051c0
int64_t function_4051bd(void) {
    // 0x4051bd
    int64_t result; // 0x4051bd
    return result;
}

// Address range: 0x405291 - 0x405296
int64_t function_405291(int64_t a1) {
    // 0x405291
    int64_t v1; // 0x405291
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x4053a9 - 0x4053bd
int64_t function_4053a9(int64_t a1, int64_t a2) {
    // 0x4053a9
    int64_t v1; // 0x4053a9
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)a2;
    int64_t result = v1 & 0xf301ffff | 0xcfe0000; // 0x4053ad
    int32_t * v3 = (int32_t *)result; // 0x4053b2
    *v3 = *v3 + (int32_t)result;
    *(char *)0x204053ba = *(char *)0x204053ba & (char)a1;
    return result;
}

// Address range: 0x405504 - 0x40550e
int64_t function_405504(void) {
    // 0x405504
    int64_t v1; // 0x405504
    uint64_t v2 = v1;
    *(char *)v2 = (char)(v2 / 256) + (char)v2;
    int64_t v3; // 0x405504
    unsigned char v4 = *(char *)&v3; // 0x405508
    unsigned char v5 = v4 + (char)v3; // 0x405508
    *(char *)v3 = v5;
    int64_t v6; // 0x405504
    *(char *)v6 = *(char *)&v6 - 1;
    return v3 & -256 | (v5 < v4 ? 255 : 0);
}

// Address range: 0x405794 - 0x40579b
int64_t function_405794(void) {
    // 0x405794
    int64_t v1; // 0x405794
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40586a - 0x405874
int64_t function_40586a(int64_t a1, int64_t a2) {
    // 0x40586a
    int64_t v1; // 0x40586a
    unsigned char v2 = (char)v1;
    char v3 = (uint64_t)v1 / 256; // 0x40586a
    unsigned char v4 = v2 + v3; // 0x40586a
    *(char *)v1 = v4;
    int64_t v5; // 0x40586a
    int32_t v6 = *(int32_t *)&v5; // 0x40586c
    int64_t v7; // 0x40586a
    *(char *)a2 = *(char *)&v7 + v3;
    return (int32_t)v1 - v6 + (int32_t)(v4 < v2);
}

// Address range: 0x4059b4 - 0x4059b5
int64_t function_4059b4(int64_t a1) {
    // 0x4059b4
    int64_t result; // 0x4059b4
    return result;
}

// Address range: 0x405a7b - 0x405a7d
int64_t function_405a7b(void) {
    // 0x405a7b
    int64_t result; // 0x405a7b
    return result;
}

// Address range: 0x405c2d - 0x405c30
int64_t function_405c2d(int64_t a1) {
    // 0x405c2d
    int64_t v1; // 0x405c2d
    uint64_t result = v1;
    *(char *)result = (char)(result / 256) + (char)result;
    return result;
}

// Address range: 0x405cbc - 0x405cc5
int64_t function_405cbc(void) {
    // 0x405cbc
    int64_t v1; // 0x405cbc
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_ffffffffbb795cc4();
}

// Address range: 0x405f30 - 0x405f37
int64_t function_405f30(void) {
    // 0x405f30
    int64_t v1; // 0x405f30
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)((uint64_t)v1 / 256);
    return function_3a405f4b();
}

// Address range: 0x40618f - 0x406191
int64_t function_40618f(void) {
    // 0x40618f
    int64_t result; // 0x40618f
    return result;
}

// Address range: 0x4061ba - 0x4061ca
int64_t function_4061ba(void) {
    // 0x4061ba
    int64_t v1; // 0x4061ba
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    __asm_out(-1, (int32_t)v2);
    return function_ffffffffe6bb61c9();
}

// Address range: 0x4061cb - 0x4061d9
int64_t function_4061cb(int64_t a1, int64_t a2) {
    // 0x4061cb
    int64_t v1; // 0x4061cb
    int64_t v2 = v1;
    return (v2 & 0xffffff00 | 0x100000000 * a2 | (v2 + a2) % 256) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x4061dd - 0x4061e6
int64_t function_4061dd(int64_t a1) {
    // 0x4061dd
    __asm_in((char)a1);
    return __asm_in(-1);
}

// Address range: 0x4061eb - 0x4061f1
int64_t function_4061eb(void) {
    // 0x4061eb
    int64_t result; // 0x4061eb
    return result;
}

// Address range: 0x406203 - 0x40620d
int64_t function_406203(int64_t a1) {
    // 0x406203
    int64_t result; // 0x406203
    return result;
}

// Address range: 0x40623f - 0x40624b
int64_t function_40623f(void) {
    // 0x40623f
    int64_t v1; // 0x40623f
    int64_t v2 = v1;
    uint32_t result = 2 * (int32_t)v1; // 0x406241
    *(char *)v2 = (char)result + (char)v2;
    return result;
}

// Address range: 0x406253 - 0x406265
int64_t function_406253(void) {
    // 0x406253
    int64_t result; // 0x406253
    int32_t * v1 = (int32_t *)(result - 0x2affffff); // 0x406253
    *v1 = *v1 - 1;
    __asm_out_1(-1, (char)result);
    __asm_out(-1, (int32_t)result);
    return result;
}

// Address range: 0x406265 - 0x40626a
int64_t function_406265(int64_t a1) {
    // 0x406265
    int64_t result; // 0x406265
    return result;
}

// Address range: 0x40627c - 0x406281
int64_t function_40627c(void) {
    // 0x40627c
    return function_ffffffffa040626c();
}

// Address range: 0x406287 - 0x40628d
int64_t function_406287(void) {
    // 0x406287
    int64_t result; // 0x406287
    return result;
}

// Address range: 0x406293 - 0x406295
int64_t function_406293(void) {
    // 0x406293
    int64_t result; // 0x406293
    return result;
}

// Address range: 0x406295 - 0x40629a
int64_t function_406295(int64_t a1) {
    // 0x406295
    int64_t result; // 0x406295
    return result;
}

// Address range: 0x4062a1 - 0x4062a5
int64_t function_4062a1(int64_t a1) {
    // 0x4062a1
    int64_t result; // 0x4062a1
    return result;
}

// Address range: 0x4062a7 - 0x4062a9
int64_t function_4062a7(void) {
    // 0x4062a7
    int64_t result; // 0x4062a7
    return result;
}

// Address range: 0x4062c4 - 0x4062c7
int64_t function_4062c4(int64_t a1) {
    // 0x4062c4
    int64_t result; // 0x4062c4
    return result;
}

// Address range: 0x4062ce - 0x4062d5
int64_t function_4062ce(void) {
    // 0x4062ce
    int64_t v1; // 0x4062ce
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return v2 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x4062d9 - 0x4062dd
int64_t function_4062d9(int64_t a1, int64_t a2) {
    // 0x4062d9
    int64_t v1; // 0x4062d9
    return (v1 & 0xffffffff | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x406308 - 0x40631b
int64_t function_406308(int64_t a1, int64_t a2) {
    // 0x406308
    int64_t result; // 0x406308
    char v1 = result;
    *(char *)result = 2 * v1;
    *(char *)-0x4700001b9b000012 = v1;
    __asm_out_1(-1, v1);
    return result;
}

// Address range: 0x40631d - 0x406322
int64_t function_40631d(void) {
    // 0x40631d
    return function_ffffffffef746321();
}

// Address range: 0x406334 - 0x40633a
int64_t function_406334(void) {
    // 0x406334
    int64_t v1; // 0x406334
    int16_t v2 = v1; // 0x406334
    int16_t v3 = (int16_t)v1 % 256; // 0x406334
    return v1 & -0x10000 | (int64_t)(v2 / v3 % 256) | (int64_t)(256 * (v2 % v3));
}

// Address range: 0x40633d - 0x406341
int64_t function_40633d(int64_t a1) {
    // 0x40633d
    int64_t result; // 0x40633d
    return result;
}

// Address range: 0x406359 - 0x406365
int64_t function_406359(int64_t a1) {
    // 0x406359
    int64_t v1; // 0x406359
    int16_t v2 = v1; // 0x40635d
    int16_t v3 = (int16_t)((uint64_t)v1 / 256) % 256; // 0x40635d
    return v1 & -0x10000 | (int64_t)(v2 / v3 % 256) | (int64_t)(256 * (v2 % v3));
}

// Address range: 0x406367 - 0x40636a
int64_t function_406367(void) {
    // 0x406367
    int64_t result; // 0x406367
    return result;
}

// Address range: 0x406379 - 0x40637e
int64_t function_406379(int64_t a1) {
    // 0x406379
    int64_t result; // 0x406379
    return result;
}

// Address range: 0x406389 - 0x406399
int64_t function_406389(int64_t a1) {
    // 0x406389
    int64_t v1; // 0x406389
    int32_t * v2 = (int32_t *)(v1 - 0x900000e); // 0x40638b
    *v2 = *v2 - 1;
    return __asm_in((char)a1);
}

// Address range: 0x40639b - 0x40639d
int64_t function_40639b(void) {
    // 0x40639b
    int64_t result; // 0x40639b
    return result;
}

// Address range: 0x4063a3 - 0x4063aa
int64_t function_4063a3(void) {
    // 0x4063a3
    int64_t result; // 0x4063a3
    return result;
}

// Address range: 0x4063af - 0x4063ba
int64_t function_4063af(void) {
    // 0x4063af
    int64_t result; // 0x4063af
    return result;
}

// Address range: 0x4063eb - 0x4063f6
int64_t function_4063eb(void) {
    // 0x4063eb
    int64_t v1; // 0x4063eb
    int32_t * v2 = (int32_t *)(v1 + 0x5dffffea); // 0x4063eb
    *v2 = *v2 + 1;
    return function_ffffffffefd063f5();
}

// Address range: 0x40641d - 0x406422
int64_t function_40641d(void) {
    // 0x40641d
    return function_fffffffff7296421();
}

// Address range: 0x406424 - 0x40642e
int64_t function_406424(int64_t a1, int64_t a2) {
    // 0x406424
    int64_t v1; // 0x406424
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    __asm_in_3((int16_t)a2);
    return function_ffffffffe673642d();
}

// Address range: 0x406447 - 0x406452
int64_t function_406447(void) {
    // 0x406447
    int64_t result; // 0x406447
    return result;
}

// Address range: 0x406453 - 0x40645a
int64_t function_406453(void) {
    // 0x406453
    int64_t result; // 0x406453
    return result;
}

// Address range: 0x40645f - 0x406465
int64_t function_40645f(void) {
    // 0x40645f
    int64_t result; // 0x40645f
    return result;
}

// Address range: 0x406467 - 0x40646e
int64_t function_406467(void) {
    // 0x406467
    int64_t result; // 0x406467
    return result;
}

// Address range: 0x406475 - 0x406479
int64_t function_406475(int64_t a1) {
    // 0x406475
    int64_t result; // 0x406475
    return result;
}

// Address range: 0x406483 - 0x406487
int64_t function_406483(void) {
    // 0x406483
    int64_t result; // 0x406483
    return result;
}

// Address range: 0x4064a3 - 0x4064a6
int64_t function_4064a3(void) {
    // 0x4064a3
    int64_t result; // 0x4064a3
    return result;
}

// Address range: 0x4064b7 - 0x4064b9
int64_t function_4064b7(void) {
    // 0x4064b7
    int64_t result; // 0x4064b7
    return result;
}

// Address range: 0x4064e3 - 0x4064e5
int64_t function_4064e3(void) {
    // 0x4064e3
    int64_t result; // 0x4064e3
    return result;
}

// Address range: 0x40650f - 0x406513
int64_t function_40650f(void) {
    // 0x40650f
    int64_t result; // 0x40650f
    return result;
}

// Address range: 0x406517 - 0x40651d
int64_t function_406517(void) {
    // 0x406517
    int64_t result; // 0x406517
    return result;
}

// Address range: 0x406550 - 0x406556
int64_t function_406550(void) {
    // 0x406550
    int64_t v1; // 0x406550
    return v1 & 0xffffffff;
}

// Address range: 0x406557 - 0x40655a
int64_t function_406557(void) {
    // 0x406557
    int64_t result; // 0x406557
    return result;
}

// Address range: 0x406568 - 0x40656e
int64_t function_406568(void) {
    // 0x406568
    return function_fffffffffa8c656d();
}

// Address range: 0x406571 - 0x406576
int64_t function_406571(void) {
    // 0x406571
    int64_t result; // 0x406571
    return result;
}

// Address range: 0x406595 - 0x406599
int64_t function_406595(void) {
    // 0x406595
    int64_t v1; // 0x406595
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40659b - 0x40659d
int64_t function_40659b(void) {
    // 0x40659b
    int64_t result; // 0x40659b
    return result;
}

// Address range: 0x4065b3 - 0x4065b5
int64_t function_4065b3(void) {
    // 0x4065b3
    int64_t result; // 0x4065b3
    return result;
}

// Address range: 0x4065d3 - 0x4065d6
int64_t function_4065d3(void) {
    // 0x4065d3
    int64_t result; // 0x4065d3
    return result;
}

// Address range: 0x4065d9 - 0x4065da
int64_t function_4065d9(void) {
    // 0x4065d9
    int64_t result; // 0x4065d9
    return result;
}

// Address range: 0x4065df - 0x4065e2
int64_t function_4065df(void) {
    // 0x4065df
    int64_t result; // 0x4065df
    return result;
}

// Address range: 0x4065e3 - 0x4065e6
int64_t function_4065e3(void) {
    // 0x4065e3
    int64_t result; // 0x4065e3
    return result;
}

// Address range: 0x4065e7 - 0x4065ed
int64_t function_4065e7(void) {
    // 0x4065e7
    int64_t result; // 0x4065e7
    return result;
}

// Address range: 0x4065ee - 0x4065f2
int64_t function_4065ee(void) {
    // 0x4065ee
    int64_t v1; // 0x4065ee
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_4065d9();
}

// Address range: 0x4065f3 - 0x4065fa
int64_t function_4065f3(void) {
    // 0x4065f3
    int64_t result; // 0x4065f3
    __asm_out(-1, (int32_t)result);
    return result;
}

// Address range: 0x4065fb - 0x406605
int64_t function_4065fb(int64_t a1) {
    // 0x4065fb
    int64_t result; // 0x4065fb
    char * v1 = (char *)(result + 0x17fffff9); // 0x4065fb
    *v1 = *v1 + (char)a1;
    return result;
}

// Address range: 0x406605 - 0x40660a
int64_t function_406605(void) {
    // 0x406605
    int64_t result; // 0x406605
    return result;
}

// Address range: 0x406627 - 0x406628
int64_t function_406627(void) {
    // 0x406627
    int64_t result; // 0x406627
    return result;
}

// Address range: 0x406634 - 0x406635
int64_t function_406634(int64_t a1) {
    // 0x406634
    int64_t result; // 0x406634
    return result;
}

// Address range: 0x406636 - 0x40663a
int64_t function_406636(void) {
    // 0x406636
    int64_t v1; // 0x406636
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_406627();
}

// Address range: 0x40663c - 0x40664a
int64_t function_40663c(void) {
    // 0x40663c
    unknown_fffffffffffffff8(0xfffffed);
    return function_ffffffffed206649();
}

// Address range: 0x40664b - 0x406651
int64_t function_40664b(void) {
    // 0x40664b
    int64_t result; // 0x40664b
    return result;
}

// Address range: 0x40666c - 0x406676
int64_t function_40666c(void) {
    // 0x40666c
    int64_t result; // 0x40666c
    return result;
}

// Address range: 0x406683 - 0x406689
int64_t function_406683(int64_t a1) {
    // 0x406683
    int64_t result; // 0x406683
    return result;
}

// Address range: 0x4066ac - 0x4066b5
int64_t function_4066ac(void) {
    // 0x4066ac
    int64_t v1; // 0x4066ac
    uint32_t result = 0x10000 * (int32_t)v1 >> 16; // 0x4066ac
    __asm_out(-1, result);
    return result;
}

// Address range: 0x4066d3 - 0x4066d6
int64_t function_4066d3(void) {
    // 0x4066d3
    int64_t result; // 0x4066d3
    return result;
}

// Address range: 0x4066ea - 0x4066f6
int64_t function_4066ea(int64_t a1) {
    // 0x4066ea
    int64_t v1; // 0x4066ea
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return v2 + 0x67000016 & 0xffffffff;
}

// Address range: 0x4066fb - 0x4066fe
int64_t function_4066fb(void) {
    // 0x4066fb
    int64_t result; // 0x4066fb
    return result;
}

// Address range: 0x406734 - 0x406736
int64_t function_406734(void) {
    // 0x406734
    int64_t result; // 0x406734
    return result;
}

// Address range: 0x40678d - 0x40678f
int64_t function_40678d(void) {
    // 0x40678d
    int64_t result; // 0x40678d
    return result;
}

// Address range: 0x4067a6 - 0x4067a8
int64_t function_4067a6(void) {
    // 0x4067a6
    int64_t result; // 0x4067a6
    return result;
}

// Address range: 0x4067c4 - 0x4067c6
int64_t function_4067c4(void) {
    // 0x4067c4
    int64_t result; // 0x4067c4
    return result;
}

// Address range: 0x4067d3 - 0x4067d6
int64_t function_4067d3(int64_t a1) {
    // 0x4067d3
    int64_t v1; // 0x4067d3
    uint64_t result = v1;
    *(char *)result = (char)(result / 256) + (char)result;
    return result;
}

// Address range: 0x4067f9 - 0x4067fb
int64_t function_4067f9(void) {
    // 0x4067f9
    int64_t result; // 0x4067f9
    return result;
}

// Address range: 0x406876 - 0x406878
int64_t function_406876(void) {
    // 0x406876
    int64_t result; // 0x406876
    return result;
}

// Address range: 0x4068b2 - 0x4068b4
int64_t function_4068b2(void) {
    // 0x4068b2
    int64_t result; // 0x4068b2
    return result;
}

// Address range: 0x4068cb - 0x4068cd
int64_t function_4068cb(void) {
    // 0x4068cb
    int64_t result; // 0x4068cb
    return result;
}

// Address range: 0x40695e - 0x406960
int64_t function_40695e(void) {
    // 0x40695e
    int64_t result; // 0x40695e
    return result;
}

// Address range: 0x4069a0 - 0x4069b9
int64_t function_4069a0(int64_t a1, int64_t a2) {
    // 0x4069a0
    int64_t v1; // 0x4069a0
    char * v2 = (char *)(v1 + a2); // 0x4069a0
    *v2 = *v2 - 1;
    int64_t v3; // 0x4069a0
    uint64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)(v4 / 256);
    int64_t v5 = __asm_sldt(); // 0x4069a5
    *(int16_t *)v5 = (int16_t)v5;
    int64_t v6 = v5 | 16; // 0x4069aa
    char * v7 = (char *)(v1 + 270 + v6); // 0x4069ac
    *v7 = *v7 + (char)v1;
    return (v6 & 0xffffffff | 0x100000000 * (v1 + (a2 & 0xff00) & 0xff00 | a2 & 0xffff00ff)) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x406a2d - 0x406a3b
int64_t function_406a2d(int64_t a1, int64_t a2) {
    // 0x406a2d
    int64_t v1; // 0x406a2d
    unsigned char v2 = 2 * (char)v1; // 0x406a2d
    int64_t v3 = v1 & -256 | (int64_t)v2; // 0x406a2d
    char * v4 = (char *)v3; // 0x406a32
    *v4 = v2 + (char)((v1 & 256 * a2) / 256) + *v4;
    return (v3 & 0xfffffffe | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x406b3d - 0x406b45
int64_t function_406b3d(void) {
    // 0x406b3d
    int64_t v1; // 0x406b3d
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int16_t v3 = v2; // 0x406b41
    int16_t v4 = (int16_t)((uint64_t)v1 / 256) % 256; // 0x406b41
    return v2 & -0x10000 | (int64_t)(v3 / v4 % 256) | (int64_t)(256 * (v3 % v4));
}

// Address range: 0x406b5d - 0x406b81
int64_t function_406b5d(int64_t a1, uint64_t a2) {
    // 0x406b5d
    int64_t v1; // 0x406b5d
    uint64_t v2 = v1;
    char * v3 = (char *)(v2 + a2); // 0x406b5d
    *v3 = *v3 - 1;
    int64_t v4; // 0x406b5d
    unsigned char v5 = *(char *)&v4; // 0x406b60
    unsigned char v6 = v5 + (char)(v4 / 256); // 0x406b60
    *(char *)v4 = v6;
    unsigned char v7 = (char)(v6 < v5);
    int64_t v8 = v4 & -256; // 0x406b62
    int64_t v9 = v8 | (int64_t)v7; // 0x406b62
    char * v10 = (char *)v9; // 0x406b64
    *v10 = *v10 + v7;
    char * v11 = (char *)a1; // 0x406b66
    int64_t v12; // 0x406b5d
    *v11 = *(char *)&v12 & (char)a2;
    *v10 = *v10 + v7;
    char * v13 = (char *)(2 * v9); // 0x406b6b
    *v13 = *v13 & (char)a1;
    char * v14 = (char *)(v9 - 100); // 0x406b6f
    *v14 = *v14 + (char)v2;
    *v11 = *(char *)&v12 & (char)(a2 / 256);
    unsigned char v15 = *v10; // 0x406b75
    unsigned char v16 = v15 + v7; // 0x406b75
    *v10 = v16;
    int64_t v17; // 0x406b5d
    *(char *)v17 = *(char *)&v17 - 1;
    int16_t v18 = v8 | (int64_t)((char)(v16 < v15) + v7 - *v10); // 0x406b7d
    int16_t v19 = (int16_t)(v2 / 256) % 256; // 0x406b7d
    return (v8 | (int64_t)(v18 / v19)) & -0xff01 | (int64_t)(256 * (v18 % v19));
}

// Address range: 0x406bb9 - 0x406bbb
int64_t function_406bb9(void) {
    // 0x406bb9
    int64_t result; // 0x406bb9
    return result;
}

// Address range: 0x406bee - 0x406bf0
int64_t function_406bee(void) {
    // 0x406bee
    int64_t result; // 0x406bee
    return result;
}

// Address range: 0x406c0c - 0x406c0e
int64_t function_406c0c(void) {
    // 0x406c0c
    int64_t result; // 0x406c0c
    return result;
}

// Address range: 0x406c75 - 0x406c77
int64_t function_406c75(void) {
    // 0x406c75
    int64_t result; // 0x406c75
    return result;
}

// Address range: 0x406cb3 - 0x406cb9
int64_t function_406cb3(int64_t a1, int64_t a2, int64_t a3) {
    // 0x406cb3
    int64_t v1; // 0x406cb3
    *(char *)a3 = (char)v1 + (char)a3;
    int64_t result; // 0x406cb3
    *(char *)result = *(char *)&result + (char)(v1 / 256);
    return result;
}

// Address range: 0x406ce3 - 0x406d20
int64_t function_406ce3(int64_t a1, int64_t a2, int64_t a3) {
    // 0x406ce3
    int64_t v1; // 0x406ce3
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)a2;
    int64_t v3 = v1 & 236 | 19; // 0x406ceb
    int64_t v4 = v3 | v1 & -256; // 0x406ceb
    char * v5 = (char *)v4; // 0x406ced
    char v6 = v1 / 256; // 0x406ced
    char v7 = v3; // 0x406cef
    *v5 = (*v5 + v6 | v7) + v7;
    char * v8 = (char *)(v4 + a2); // 0x406cf3
    *v8 = *v8 - 1;
    char * v9 = (char *)(v1 + 97 + v4); // 0x406cf6
    *v9 = *v9 + (char)v1;
    *v5 = v7 + v6;
    int64_t v10; // 0x406ce3
    *(char *)v10 = *(char *)&v10 - 1;
    unsigned char v11 = *(char *)a3 + (char)a3; // 0x406d0f
    int64_t v12 = a3 & -256; // 0x406d0f
    int64_t v13; // 0x406ce3
    *(char *)v13 = *(char *)&v13 & v11;
    char * v14 = (char *)(v12 | (int64_t)v11); // 0x406d14
    unsigned char v15 = *v14; // 0x406d14
    unsigned char v16 = v15 + v11; // 0x406d14
    *v14 = v16;
    *(char *)v10 = *(char *)&v10 - 1;
    return v12 | (int64_t)(v11 + (char)(v16 < v15) - *v14);
}

// Address range: 0x406d3c - 0x406d3e
int64_t function_406d3c(void) {
    // 0x406d3c
    int64_t result; // 0x406d3c
    return result;
}

// Address range: 0x406d59 - 0x406d5b
int64_t function_406d59(void) {
    // 0x406d59
    int64_t result; // 0x406d59
    return result;
}

// Address range: 0x406dc3 - 0x406dc5
int64_t function_406dc3(void) {
    // 0x406dc3
    int64_t result; // 0x406dc3
    return result;
}

// Address range: 0x406e00 - 0x406e02
int64_t function_406e00(void) {
    // 0x406e00
    int64_t result; // 0x406e00
    return result;
}

// Address range: 0x406ea6 - 0x406ea8
int64_t function_406ea6(void) {
    // 0x406ea6
    int64_t result; // 0x406ea6
    return result;
}

// Address range: 0x406f0d - 0x406f22
int64_t function_406f0d(int64_t a1) {
    // 0x406f0d
    int64_t v1; // 0x406f0d
    char * v2 = (char *)(v1 + a1); // 0x406f0d
    *v2 = *v2 - 1;
    int64_t v3; // 0x406f0d
    uint64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)(v4 / 256);
    char * v5 = (char *)v3; // 0x406f14
    *v5 = *v5 + (char)v3;
    char * v6 = (char *)(a1 + 0x2d389c00); // 0x406f16
    *v6 = *v6 - 1;
    return function_20676f21();
}

// Address range: 0x406fdf - 0x406fea
int64_t function_406fdf(int64_t a1, int64_t a2, int64_t a3) {
    // 0x406fdf
    int64_t v1; // 0x406fdf
    uint32_t v2 = (int32_t)v1;
    bool v3; // 0x406fdf
    uint32_t v4 = 2 * v2 | (int32_t)v3; // 0x406fdf
    int64_t result = v4; // 0x406fdf
    char * v5 = (char *)result; // 0x406fe1
    *v5 = (*v5 & (char)a2) + (char)(v2 / 128) + (char)v4;
    return result;
}

// Address range: 0x407012 - 0x40701c
int64_t function_407012(int64_t a1) {
    // 0x407012
    int64_t v1; // 0x407012
    bool v2; // 0x407012
    *(int32_t *)a1 = 2 * (int32_t)v1 + (int32_t)v2;
    int64_t result; // 0x407012
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    return result;
}

// Address range: 0x407057 - 0x407059
int64_t function_407057(void) {
    // 0x407057
    int64_t result; // 0x407057
    return result;
}

// Address range: 0x4070d4 - 0x4070d6
int64_t function_4070d4(void) {
    // 0x4070d4
    int64_t result; // 0x4070d4
    return result;
}

// Address range: 0x4070d7 - 0x4070e2
int64_t function_4070d7(void) {
    // 0x4070d7
    int64_t v1; // 0x4070d7
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40714e - 0x407150
int64_t function_40714e(void) {
    // 0x40714e
    int64_t result; // 0x40714e
    return result;
}

// Address range: 0x407158 - 0x40715a
int64_t function_407158(void) {
    // 0x407158
    int64_t result; // 0x407158
    return result;
}

// Address range: 0x40715a - 0x40716e
int64_t function_40715a(void) {
    // 0x40715a
    int64_t v1; // 0x40715a
    uint64_t v2 = v1;
    int64_t result = v2 & -256 | (int64_t)*(char *)-0xd9c7f9fffe; // 0x40715a
    char * v3 = (char *)(result + 0x38060002); // 0x407163
    *v3 = *v3 - (char)(v2 / 256);
    return result;
}

// Address range: 0x407176 - 0x407178
int64_t function_407176(void) {
    // 0x407176
    int64_t result; // 0x407176
    return result;
}

// Address range: 0x40720b - 0x40720d
int64_t function_40720b(void) {
    // 0x40720b
    int64_t result; // 0x40720b
    return result;
}

// Address range: 0x407215 - 0x407217
int64_t function_407215(void) {
    // 0x407215
    int64_t result; // 0x407215
    return result;
}

// Address range: 0x407223 - 0x407240
int64_t function_407223(int64_t a1, int64_t a2) {
    // 0x407223
    int64_t v1; // 0x407223
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x407223
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x407223
    *(char *)v4 = *(char *)&v4 + (char)(result / 256);
    int64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)v5;
    char v6 = a2; // 0x40722f
    *(char *)v4 = *(char *)&v4 + v6;
    int64_t v7; // 0x407223
    int32_t * v8 = (int32_t *)(a2 & -256 | (int64_t)(v6 - *(char *)&v7)); // 0x407233
    *v8 = *v8 | (int32_t)v1;
    char * v9 = (char *)(v1 + 0x38060002); // 0x407235
    *v9 = *v9 - (char)v1;
    return result;
}

// Address range: 0x407240 - 0x407254
int64_t function_407240(int64_t a1) {
    unsigned char v1 = *(char *)-0x2e10c7f9fffe; // 0x407240
    int64_t v2; // 0x407240
    char * v3 = (char *)((v2 & -256 | (int64_t)v1) + 0x38060002); // 0x407249
    *v3 = *v3 - (char)(v2 / 256);
    return v2 & 0xffffffff;
}

// Address range: 0x407256 - 0x40725e
int64_t function_407256(int64_t a1) {
    // 0x407256
    int64_t result; // 0x407256
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x407260 - 0x407268
int64_t function_407260(int64_t a1, int64_t a2) {
    // 0x407260
    int64_t result; // 0x407260
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40726d - 0x407272
int64_t function_40726d(int64_t a1, int64_t a2) {
    // 0x40726d
    int64_t result; // 0x40726d
    return result;
}

// Address range: 0x407272 - 0x407290
int64_t function_407272(int64_t a1) {
    // 0x407272
    int64_t v1; // 0x407272
    uint64_t v2 = v1;
    int64_t v3 = v2 & -256; // 0x407272
    char * v4 = (char *)((v3 | (int64_t)*(char *)-0x2c7dc7f9fffe) + 0x38060002); // 0x40727b
    *v4 = *v4 - (char)(v2 / 256);
    return v3 | (int64_t)*(char *)0x600029a28ffffd3;
}

// Address range: 0x407298 - 0x40729a
int64_t function_407298(void) {
    // 0x407298
    int64_t result; // 0x407298
    return result;
}

// Address range: 0x4072a2 - 0x4072a4
int64_t function_4072a2(void) {
    // 0x4072a2
    int64_t result; // 0x4072a2
    return result;
}

// Address range: 0x4072ac - 0x4072ae
int64_t function_4072ac(void) {
    // 0x4072ac
    int64_t result; // 0x4072ac
    return result;
}

// Address range: 0x4072b6 - 0x4072b8
int64_t function_4072b6(void) {
    // 0x4072b6
    int64_t result; // 0x4072b6
    return result;
}

// Address range: 0x4072c0 - 0x4072c2
int64_t function_4072c0(void) {
    // 0x4072c0
    int64_t result; // 0x4072c0
    return result;
}

// Address range: 0x4072ca - 0x4072cc
int64_t function_4072ca(void) {
    // 0x4072ca
    int64_t result; // 0x4072ca
    return result;
}

// Address range: 0x4072d4 - 0x4072d6
int64_t function_4072d4(void) {
    // 0x4072d4
    int64_t result; // 0x4072d4
    return result;
}

// Address range: 0x4072de - 0x4072e0
int64_t function_4072de(void) {
    // 0x4072de
    int64_t result; // 0x4072de
    return result;
}

// Address range: 0x4072e8 - 0x4072ea
int64_t function_4072e8(void) {
    // 0x4072e8
    int64_t result; // 0x4072e8
    return result;
}

// Address range: 0x4072fa - 0x4072fe
int64_t function_4072fa(void) {
    // 0x4072fa
    int64_t result; // 0x4072fa
    return result;
}

// Address range: 0x407306 - 0x407308
int64_t function_407306(void) {
    // 0x407306
    int64_t result; // 0x407306
    return result;
}

// Address range: 0x40730a - 0x407312
int64_t function_40730a(void) {
    // 0x40730a
    int64_t result; // 0x40730a
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x407317 - 0x40731c
int64_t function_407317(void) {
    // 0x407317
    int64_t result; // 0x407317
    return result;
}

// Address range: 0x40731e - 0x407326
int64_t function_40731e(void) {
    // 0x40731e
    int64_t result; // 0x40731e
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40732e - 0x407330
int64_t function_40732e(void) {
    // 0x40732e
    int64_t result; // 0x40732e
    return result;
}

// Address range: 0x407338 - 0x40733a
int64_t function_407338(void) {
    // 0x407338
    int64_t result; // 0x407338
    return result;
}

// Address range: 0x407342 - 0x407344
int64_t function_407342(void) {
    // 0x407342
    int64_t result; // 0x407342
    return result;
}

// Address range: 0x407344 - 0x407362
int64_t function_407344(int64_t a1) {
    // 0x407344
    int64_t v1; // 0x407344
    int64_t result = v1 & -256 | (int64_t)*(char *)-0x21dec7f9fffe; // 0x407344
    char * v2 = (char *)(v1 + 0x38060002); // 0x40734d
    *v2 = *v2 - (char)v1;
    *(int32_t *)0x600029f28ffffde = (int32_t)result;
    return result;
}

// Address range: 0x407362 - 0x407376
int64_t function_407362(void) {
    // 0x407362
    int64_t v1; // 0x407362
    uint64_t v2 = v1;
    int64_t result = v2 & -256 | (int64_t)*(char *)-0x20d3c7f9fffe; // 0x407362
    char * v3 = (char *)(result + 0x38060002); // 0x40736b
    *v3 = *v3 - (char)(v2 / 256);
    return result;
}

// Address range: 0x40737c - 0x407380
int64_t function_40737c(int64_t a1) {
    // 0x40737c
    int64_t result; // 0x40737c
    return result;
}

// Address range: 0x407385 - 0x40738a
int64_t function_407385(int64_t a1) {
    // 0x407385
    int64_t result; // 0x407385
    return result;
}

// Address range: 0x40738c - 0x4073a8
int64_t function_40738c(int64_t a1, int64_t a2) {
    // 0x40738c
    int64_t v1; // 0x40738c
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    char * v3 = (char *)(v1 + 0x38060002); // 0x40739d
    *v3 = *v3 - (char)v1;
    return __asm_wait(a1, a2);
}

// Address range: 0x4073aa - 0x4073b2
int64_t function_4073aa(void) {
    // 0x4073aa
    int64_t v1; // 0x4073aa
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x4073b2 - 0x4073c6
int64_t function_4073b2(void) {
    // 0x4073b2
    int64_t v1; // 0x4073b2
    char * v2 = (char *)(v1 + 0x38060002); // 0x4073bb
    *v2 = *v2 - (char)v1;
    return __asm_in(-1);
}

// Address range: 0x4073cb - 0x4073d0
int64_t function_4073cb(void) {
    // 0x4073cb
    int64_t result; // 0x4073cb
    __asm_out_1(-1, (char)result);
    return result;
}

// Address range: 0x4073d0 - 0x4073e4
int64_t function_4073d0(int64_t a1, int64_t a2) {
    // 0x4073d0
    int64_t v1; // 0x4073d0
    int64_t result = v1 & -256 | (int64_t)*(char *)-0x18fac7f9fffe; // 0x4073d0
    char * v2 = (char *)(a2 - 0x39c7fa00 + result); // 0x4073d9
    *v2 = *v2 - (char)a2;
    __asm_out((char)a1, (int32_t)result);
    return result;
}

// Address range: 0x4073ec - 0x4073ee
int64_t function_4073ec(void) {
    // 0x4073ec
    int64_t result; // 0x4073ec
    return result;
}

// Address range: 0x4073f0 - 0x4073f9
int64_t function_4073f0(int64_t a1, int64_t a2) {
    // 0x4073f0
    int64_t v1; // 0x4073f0
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return function_ffffffff9f6973f8();
}

// Address range: 0x4073fe - 0x407403
int64_t function_4073fe(void) {
    // 0x4073fe
    return function_ffffffff8c697402();
}

// Address range: 0x407414 - 0x407416
int64_t function_407414(void) {
    // 0x407414
    int64_t result; // 0x407414
    return result;
}

// Address range: 0x40741e - 0x407420
int64_t function_40741e(void) {
    // 0x40741e
    int64_t result; // 0x40741e
    return result;
}

// Address range: 0x407426 - 0x40742a
int64_t function_407426(void) {
    // 0x407426
    int64_t result; // 0x407426
    return result;
}

// Address range: 0x407432 - 0x407434
int64_t function_407432(void) {
    // 0x407432
    int64_t result; // 0x407432
    return result;
}

// Address range: 0x40743c - 0x40743e
int64_t function_40743c(void) {
    // 0x40743c
    int64_t result; // 0x40743c
    return result;
}

// Address range: 0x407446 - 0x407448
int64_t function_407446(void) {
    // 0x407446
    int64_t result; // 0x407446
    return result;
}

// Address range: 0x407450 - 0x407452
int64_t function_407450(void) {
    // 0x407450
    int64_t result; // 0x407450
    return result;
}

// Address range: 0x40745a - 0x40745c
int64_t function_40745a(void) {
    // 0x40745a
    int64_t result; // 0x40745a
    return result;
}

// Address range: 0x407464 - 0x407466
int64_t function_407464(void) {
    // 0x407464
    int64_t result; // 0x407464
    return result;
}

// Address range: 0x40746e - 0x407470
int64_t function_40746e(void) {
    // 0x40746e
    int64_t result; // 0x40746e
    return result;
}

// Address range: 0x407472 - 0x40747a
int64_t function_407472(int64_t a1, int64_t a2) {
    // 0x407472
    int64_t v1; // 0x407472
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    int16_t v3 = v1; // 0x407476
    int16_t v4 = (int16_t)(v1 / 256) % 256; // 0x407476
    return v1 & -0x10000 | (int64_t)(v3 / v4 % 256) | (int64_t)(256 * (v3 % v4));
}

// Address range: 0x40747c - 0x407484
int64_t function_40747c(int64_t a1, int64_t a2) {
    // 0x40747c
    int64_t v1; // 0x40747c
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    int16_t v3 = v1; // 0x407480
    int16_t v4 = (int16_t)(v1 / 256) % 256; // 0x407480
    return v1 & -0x10000 | (int64_t)(v3 / v4 % 256) | (int64_t)(256 * (v3 % v4));
}

// Address range: 0x40748a - 0x40748e
int64_t function_40748a(void) {
    // 0x40748a
    int64_t v1; // 0x40748a
    int16_t v2 = v1; // 0x40748a
    int16_t v3 = (int16_t)((uint64_t)v1 / 256) % 256; // 0x40748a
    return v1 & -0x10000 | (int64_t)(v2 / v3 % 256) | (int64_t)(256 * (v2 % v3));
}

// Address range: 0x407490 - 0x407498
int64_t function_407490(int64_t a1, int64_t a2) {
    // 0x407490
    int64_t v1; // 0x407490
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return (v1 & 0xffffffff | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x40749e - 0x4074a2
int64_t function_40749e(int64_t a1, int64_t a2) {
    // 0x40749e
    int64_t v1; // 0x40749e
    return (v1 & 0xffffffff | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x4074a4 - 0x4074ac
int64_t function_4074a4(int64_t a1, int64_t a2) {
    // 0x4074a4
    int64_t v1; // 0x4074a4
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return (v1 & 0xffffffff | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x4074b4 - 0x4074b6
int64_t function_4074b4(void) {
    // 0x4074b4
    int64_t result; // 0x4074b4
    return result;
}

// Address range: 0x4074be - 0x4074c0
int64_t function_4074be(void) {
    // 0x4074be
    int64_t result; // 0x4074be
    return result;
}

// Address range: 0x4074d2 - 0x4074d4
int64_t function_4074d2(void) {
    // 0x4074d2
    int64_t result; // 0x4074d2
    return result;
}

// Address range: 0x4074dc - 0x4074df
int64_t function_4074dc(void) {
    // 0x4074dc
    int64_t result; // 0x4074dc
    return result;
}

// Address range: 0x4074e6 - 0x4074e8
int64_t function_4074e6(void) {
    // 0x4074e6
    int64_t result; // 0x4074e6
    return result;
}

// Address range: 0x4074f0 - 0x4074f2
int64_t function_4074f0(void) {
    // 0x4074f0
    int64_t result; // 0x4074f0
    return result;
}

// Address range: 0x4074fa - 0x4074fc
int64_t function_4074fa(void) {
    // 0x4074fa
    int64_t result; // 0x4074fa
    return result;
}

// Address range: 0x407504 - 0x407506
int64_t function_407504(void) {
    // 0x407504
    int64_t result; // 0x407504
    return result;
}

// Address range: 0x407508 - 0x407510
int64_t function_407508(void) {
    // 0x407508
    int64_t result; // 0x407508
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40757b - 0x40757c
int64_t function_40757b(int64_t a1) {
    // 0x40757b
    int64_t result; // 0x40757b
    return result;
}

// Address range: 0x4078e6 - 0x4078e9
int64_t function_4078e6(int64_t a1) {
    // 0x4078e6
    int64_t result; // 0x4078e6
    return result;
}

// Address range: 0x407a77 - 0x407a79
int64_t function_407a77(void) {
    // 0x407a77
    int64_t result; // 0x407a77
    return result;
}

// Address range: 0x407d26 - 0x407d31
int64_t function_407d26(int64_t a1) {
    // 0x407d26
    return function_20407d31();
}

// Address range: 0x407e29 - 0x407e2e
int64_t function_407e29(int64_t a1, int64_t a2) {
    // 0x407e29
    int64_t result; // 0x407e29
    return result;
}

// Address range: 0x407e43 - 0x407e50
int64_t function_407e43(int64_t a1, int64_t a2) {
    // 0x407e43
    int64_t result; // 0x407e43
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    *(char *)0x38407e4e = *(char *)0x38407e4e & (char)a2;
    return result;
}

// Address range: 0x407f01 - 0x407f04
int64_t function_407f01(int64_t a1) {
    // 0x407f01
    int64_t result; // 0x407f01
    return result;
}

// Address range: 0x407f6a - 0x407f71
int64_t function_407f6a(int64_t a1) {
    // 0x407f6a
    int64_t v1; // 0x407f6a
    int64_t v2 = v1;
    *(char *)v2 = (char)(v1 & v2);
    int64_t result; // 0x407f6a
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    uint64_t v4 = result;
    *(char *)v4 = *(char *)&result + (char)(v4 / 256);
    return result;
}

// Address range: 0x40802a - 0x408035
int64_t function_40802a(int64_t a1, int64_t a2) {
    // 0x40802a
    int64_t v1; // 0x40802a
    uint64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result = v2 & -256; // 0x40802e
    char * v3 = (char *)result; // 0x408030
    *v3 = *v3 + (char)(v2 / 256);
    return result;
}

// Address range: 0x408143 - 0x408150
int64_t function_408143(int64_t a1) {
    // 0x408143
    int64_t v1; // 0x408143
    int64_t v2 = v1;
    unsigned char v3 = (char)v1;
    unsigned char v4 = (char)v2 + v3; // 0x408143
    *(char *)a1 = v4;
    int32_t v5 = *(int32_t *)(v1 + 120 + v2); // 0x408145
    int64_t result = 2 * v2 & 254 | v2 & -256; // 0x408149
    char * v6 = (char *)result; // 0x40814b
    char v7 = *v6; // 0x40814b
    *v6 = v7 + (char)((v5 + (int32_t)v1 + (int32_t)(v4 < v3)) / 256);
    return result;
}

// Address range: 0x40833c - 0x408348
int64_t function_40833c(uint64_t a1) {
    // 0x40833c
    int64_t v1; // 0x40833c
    int64_t v2 = v1;
    *(char *)v2 = (char)(v2 | a1 / 256);
    unknown_28468345(a1);
    return function_7446834a();
}

// Address range: 0x408411 - 0x4084ac
int64_t function_408411(uint64_t a1, uint64_t a2, int64_t a3) {
    // 0x408411
    int64_t v1; // 0x408411
    int64_t v2 = v1;
    int64_t v3 = a3;
    *(char *)v2 = (char)v2 + (char)(v1 / 256);
    int64_t v4; // 0x408411
    *(char *)v4 = *(char *)&v4 + (char)(a1 / 256);
    int64_t v5; // 0x408411
    int64_t v6 = v5;
    *(char *)v6 = *(char *)&v5 + (char)v6;
    char * v7 = (char *)(v4 + 0x20000000); // 0x408417
    char v8 = a2 / 256; // 0x408417
    *v7 = *v7 & v8;
    int64_t v9; // 0x408411
    *(char *)v9 = *(char *)&v9 - 1;
    int64_t v10 = a2; // bp-8, 0x408424
    int64_t v11 = &v10; // 0x408424
    uint64_t v12 = v5;
    *(char *)v12 = *(char *)&v5 + (char)(v12 / 256);
    int64_t v13 = __asm_int1(a1, a2); // 0x408427
    v5 = v13;
    char * v14 = (char *)v13; // 0x408428
    *v14 = 2 * (char)v13;
    int64_t v15; // 0x408411
    *v14 = *(char *)&v5 + (char)(v15 / 256);
    int64_t v16 = v5;
    *(char *)v16 = *(char *)&v5 + (char)v16;
    char * v17 = (char *)(2 * v5 + v11); // 0x40845e
    *v17 = *v17 - 1;
    uint64_t v18 = v5;
    *(char *)v18 = *(char *)&v5 + (char)(v18 / 256);
    int64_t v19 = v5;
    *(int32_t *)v19 = *(int32_t *)&v5 | (int32_t)v19;
    int64_t v20 = v5;
    *(char *)v20 = *(char *)&v5 + (char)v20;
    *(char *)0x65209c00 = *(char *)0x65209c00 - 1;
    unsigned char v21 = 2 * (char)v5; // 0x40846e
    int64_t v22 = v5 & -256 | (int64_t)v21; // 0x40846e
    char * v23 = (char *)v22; // 0x408470
    *v23 = v21 + *v23 + (char)(v15 / 256);
    int64_t v24 = 2 * v1; // 0x408476
    int64_t v25; // 0x408411
    char * v26 = (char *)(v24 + (int64_t)&v25); // 0x408476
    *v26 = *v26 - 1;
    *v23 = *v23 + (char)(v5 / 256);
    int64_t v27 = v22 + 0x38000000; // 0x40847b
    int64_t v28 = v27 & 0xfffffffe; // 0x40847b
    v10 = a1;
    char v29 = v27; // 0x408481
    *(char *)v3 = *(char *)&v3 + v29;
    char * v30 = (char *)v28; // 0x408484
    char v31 = a2; // 0x408484
    *v30 = (*v30 & v31) + v29;
    char * v32 = (char *)(v28 - 100); // 0x408488
    *v32 = *v32 + (char)v15;
    char * v33 = (char *)(a1 + 0x38000001); // 0x40848b
    *v33 = *v33 & v8;
    unsigned char v34 = *(char *)&v3; // 0x408491
    unsigned char v35 = v34 + v29; // 0x408491
    *(char *)v3 = v35;
    int32_t v36 = *(int32_t *)-0x63565c4b; // 0x408495
    *(int32_t *)-0x63565c4b = v36 + (int32_t)v27 + (int32_t)(v35 < v34);
    *(char *)v4 = *(char *)&v4 & v29;
    *v30 = *v30 + 2 * v29;
    char * v37 = (char *)(v24 + v11); // 0x4084a5
    *v37 = *v37 - 1;
    unsigned char v38 = *(char *)&v15; // 0x4084a8
    unsigned char v39 = v38 + v31; // 0x4084a8
    *(char *)v15 = v39;
    return (v27 - (v39 < v38 ? 33 : 32)) % 256 | v27 & 0xffffff00;
}

// Address range: 0x408714 - 0x40872b
int64_t function_408714(int64_t a1, int64_t a2, int64_t a3) {
    // 0x408714
    int64_t v1; // 0x408714
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x408714
    uint64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 & (char)(v4 / 256);
    int64_t v5 = v3;
    *(char *)v5 = *(char *)&v3 + (char)v5;
    int64_t v6; // 0x408714
    *(char *)v6 = *(char *)&v6 - 1;
    uint64_t v7 = v3;
    *(char *)v7 = *(char *)&v3 + (char)(v7 / 256);
    int64_t v8 = v3;
    char * v9 = (char *)(2 * v8 & 254 | v8 & -256); // 0x408724
    *v9 = *v9 + (char)((uint64_t)v1 / 256);
    return function_12408756();
}

// Address range: 0x4087d0 - 0x4087d1
int64_t function_4087d0(void) {
    // 0x4087d0
    int64_t result; // 0x4087d0
    return result;
}

// Address range: 0x4087d3 - 0x4087d5
int64_t function_4087d3(void) {
    // 0x4087d3
    return function_4087d0();
}

// Address range: 0x40883f - 0x40884e
int64_t function_40883f(int64_t a1, int64_t a2) {
    // 0x40883f
    int64_t v1; // 0x40883f
    int64_t v2 = v1;
    *(char *)v2 = (char)(v1 & v2);
    int64_t v3; // 0x40883f
    char v4 = *(char *)&v3; // 0x408845
    char * v5 = (char *)(a1 & 0xffffff00 | (int64_t)(v4 + (char)a1)); // 0x408847
    *v5 = *v5 + (char)(v1 / 256);
    return function_fffffffffe408895();
}

// Address range: 0x408854 - 0x40886e
int64_t function_408854(int64_t a1, int64_t a2, int64_t a3) {
    // 0x408854
    int64_t v1; // 0x408854
    int64_t v2 = v1;
    char v3 = v2;
    *(char *)v2 = 2 * v3;
    uint64_t v4 = 256 * v2 & v2;
    int64_t result = v4 & 0xff00 | v2 & -0xff01; // 0x408856
    char * v5 = (char *)result; // 0x408858
    char v6 = v4 / 256; // 0x40885a
    *v5 = *v5 + v3 + v6;
    int64_t v7; // 0x408854
    *(char *)a3 = *(char *)&v7 + v3;
    char * v8 = (char *)(a1 - 100); // 0x40885f
    *v8 = *v8 + (char)v1;
    char * v9 = (char *)(result + 1); // 0x408862
    *v9 = *v9 & v6;
    *v5 = *v5 + v3;
    return result;
}

// Address range: 0x408909 - 0x408912
int64_t function_408909(int64_t a1) {
    // 0x408909
    int64_t v1; // 0x408909
    char * v2 = (char *)(2 * v1); // 0x40890a
    *v2 = *v2 & (char)a1;
    int64_t result; // 0x408909
    *(char *)result = *(char *)&result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x408c96 - 0x408c97
int64_t function_408c96(void) {
    // 0x408c96
    int64_t result; // 0x408c96
    return result;
}

// Address range: 0x408cc7 - 0x408cff
int64_t function_408cc7(uint64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x408cc7
    int64_t v1; // 0x408cc7
    int64_t v2 = v1;
    int64_t v3 = v1;
    *(int32_t *)v3 = (int32_t)v3;
    int64_t v4; // 0x408cc7
    unsigned char v5 = *(char *)&v4; // 0x408cc9
    unsigned char v6 = v5 + (char)v4; // 0x408cc9
    *(char *)v4 = v6;
    int64_t v7; // 0x408cc7
    char v8 = *(char *)&v7; // 0x408ccb
    char * v9 = (char *)(v2 + 118); // 0x408ccd
    *v9 = *v9 & (char)(a1 / 256);
    int64_t v10 = v4;
    *(char *)v10 = *(char *)&v4 + (char)v10;
    int64_t v11; // 0x408cc7
    *(char *)a1 = *(char *)&v11 & (char)v4;
    unsigned char v12 = *(char *)&v4; // 0x408cd4
    unsigned char v13 = v12 + (char)a3; // 0x408cd4
    *(char *)v4 = v13;
    char v14; // 0x408cc7
    int64_t v15; // 0x408cc7
    char v16; // 0x408cc7
    if (v13 >= v12) {
        int64_t v17 = function_408c96(); // 0x408cd7
        v4 = v17;
        char v18 = v17;
        v14 = v18;
        v15 = v17;
        v16 = v18;
    } else {
        // 0x408cc7
        v14 = v4;
        v15 = v4;
        v16 = *(char *)&v4;
    }
    // 0x408cd9
    *(char *)v15 = v16 + v14;
    int64_t v19; // 0x408cc7
    char v20 = *(char *)&v19; // 0x408cdb
    int64_t v21 = v4;
    *(char *)v21 = *(char *)&v4 + (char)v21;
    uint64_t v22 = v4;
    *(char *)v22 = *(char *)&v4 + (char)(v22 / 256);
    int64_t v23 = v4;
    *(char *)v23 = *(char *)&v4 | (char)v23;
    int64_t v24 = v4;
    *(char *)v24 = *(char *)&v4 + (char)v24;
    *(char *)v7 = *(char *)&v7 - 1;
    int64_t v25 = v4 & 168 | 87; // 0x408ced
    int64_t result = v25 | v4 & -256; // 0x408ced
    char * v26 = (char *)(v1 + 10); // 0x408cef
    char v27 = v25; // 0x408cef
    *v26 = *v26 + v27;
    char * v28 = (char *)result; // 0x408cf2
    *v28 = *v28 + v27;
    char * v29 = (char *)(v2 - 1 + 8 * v2); // 0x408cf4
    *v29 = *v29 + (v20 | (char)a2 - v8 + (char)(v6 < v5));
    return result;
}

// Address range: 0x408d54 - 0x408d57
int64_t function_408d54(int64_t a1) {
    // 0x408d54
    int64_t result; // 0x408d54
    return result;
}

// Address range: 0x408d57 - 0x408d59
int64_t function_408d57(void) {
    // 0x408d57
    int64_t result; // 0x408d57
    return result;
}

// Address range: 0x408e45 - 0x408e47
int64_t function_408e45(void) {
    // 0x408e45
    int64_t result; // 0x408e45
    return result;
}

// Address range: 0x408e4e - 0x408e51
int64_t function_408e4e(void) {
    // 0x408e4e
    int64_t v1; // 0x408e4e
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x408e77 - 0x408e80
int64_t function_408e77(void) {
    // 0x408e77
    int64_t v1; // 0x408e77
    int64_t v2 = v1;
    *(char *)v2 = (char)v2;
    int64_t v3; // 0x408e77
    uint64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)(v4 / 256);
    return function_fffffffffe408e81();
}

// Address range: 0x409105 - 0x409133
int64_t function_409105(uint64_t a1, int64_t a2, uint64_t a3) {
    int64_t v1 = a2;
    *(char *)a1 = (char)a2 + (char)a1;
    int64_t v2; // 0x409105
    int64_t v3; // 0x409105
    *(int32_t *)v2 = *(int32_t *)&v2 | (int32_t)v3;
    int64_t v4; // 0x409105
    if (a1 != 0) {
        // 0x40910b
        *(char *)v4 = *(char *)&v4 + (char)v2;
    }
    char * v5 = (char *)(v1 + 2); // 0x40910f
    *v5 = *v5 & (char)(a1 / 256);
    int64_t v6 = v2;
    *(char *)v6 = *(char *)&v2 + (char)v6;
    int64_t v7 = v2;
    *(int32_t *)v7 = *(int32_t *)&v2 & (int32_t)v7;
    uint64_t v8 = v2;
    *(char *)v8 = *(char *)&v2 + (char)(v8 / 256);
    int64_t v9 = v2;
    *(char *)v9 = *(char *)&v2 + (char)v9;
    uint64_t v10 = v1;
    *(char *)v10 = *(char *)&v1 & (char)(v10 / 256);
    int64_t v11 = v2;
    *(char *)v11 = *(char *)&v2 + (char)v11;
    *(char *)v4 = *(char *)&v4 - 1;
    char * v12 = (char *)a3; // 0x409127
    *v12 = *v12 + (char)(a3 / 256);
    unsigned char v13 = *(char *)&v4; // 0x409129
    char * v14 = (char *)(a3 & -256 | (int64_t)v13); // 0x40912a
    *v14 = v13 + (char)(v3 / 256) + *v14;
    return function_fffffffffe409154();
}

// Address range: 0x40914f - 0x409154
int64_t function_40914f(void) {
    // 0x40914f
    int64_t v1; // 0x40914f
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x409514 - 0x409519
int64_t function_409514(void) {
    // 0x409514
    int64_t result; // 0x409514
    return result;
}

// Address range: 0x4095db - 0x4095dd
int64_t function_4095db(void) {
    // 0x4095db
    int64_t result; // 0x4095db
    return result;
}

// Address range: 0x40961d - 0x409622
int64_t function_40961d(void) {
    // 0x40961d
    int64_t v1; // 0x40961d
    uint64_t result = v1;
    *(char *)result = (char)(result / 256) + (char)result;
    return result;
}

// Address range: 0x409622 - 0x409626
int64_t function_409622(void) {
    // 0x409622
    int64_t v1; // 0x409622
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)((uint64_t)v1 / 256);
    return function_409642();
}

// Address range: 0x40963e - 0x409642
int64_t function_40963e(void) {
    // 0x40963e
    int64_t v1; // 0x40963e
    uint64_t v2 = v1;
    int64_t result = v2 % 256 ^ v1; // 0x40963e
    char * v3 = (char *)result; // 0x409640
    *v3 = *v3 + (char)(v1 ^ v2);
    return result;
}

// Address range: 0x409642 - 0x409646
int64_t function_409642(void) {
    // 0x409642
    int64_t result; // 0x409642
    int64_t v1 = result;
    *(char *)v1 = (char)v1 - 1;
    return result;
}

// Address range: 0x409648 - 0x409649
int64_t function_409648(int64_t a1) {
    // 0x409648
    int64_t result; // 0x409648
    return result;
}

// Address range: 0x409674 - 0x409677
int64_t function_409674(void) {
    // 0x409674
    int64_t result; // 0x409674
    return result;
}

// Address range: 0x4096fe - 0x40970c
int64_t function_4096fe(void) {
    // 0x4096fe
    int64_t v1; // 0x4096fe
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    int64_t v3 = v1 & -256; // 0x409700
    int64_t v4; // 0x4096fe
    *(char *)v4 = *(char *)&v4 + 2;
    int16_t v5 = (int16_t)v3 | 2; // 0x409708
    int16_t v6 = (int16_t)(v1 / 256) % 256; // 0x409708
    return (v3 | (int64_t)(v5 / v6)) & -0xff01 | (int64_t)(256 * (v5 % v6));
}

// Address range: 0x409734 - 0x409735
int64_t function_409734(void) {
    // 0x409734
    int64_t result; // 0x409734
    return result;
}

// Address range: 0x4098a3 - 0x4098a4
int64_t function_4098a3(int64_t a1) {
    // 0x4098a3
    int64_t result; // 0x4098a3
    return result;
}

// Address range: 0x4098b2 - 0x4098b6
int64_t function_4098b2(int64_t a1) {
    // 0x4098b2
    int64_t result; // 0x4098b2
    return result;
}

// Address range: 0x409911 - 0x409916
int64_t function_409911(void) {
    // 0x409911
    int64_t result; // 0x409911
    return result;
}

// Address range: 0x40992b - 0x40992f
int64_t function_40992b(void) {
    // 0x40992b
    int64_t result; // 0x40992b
    __asm_out_1(-1, (char)result);
    return result;
}

// Address range: 0x40994e - 0x409951
int64_t function_40994e(void) {
    // 0x40994e
    int64_t v1; // 0x40994e
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x409b47 - 0x409b4c
int64_t function_409b47(int64_t a1) {
    // 0x409b47
    int64_t v1; // 0x409b47
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x409b4c - 0x409b6f
int64_t function_409b4c(int64_t a1, int64_t a2) {
    // 0x409b4c
    int64_t v1; // 0x409b4c
    int64_t v2 = v1 | 100; // 0x409b4e
    char * v3 = (char *)v2; // 0x409b50
    *v3 = *v3 + (char)(v1 / 256);
    char * v4 = (char *)(v1 + 458 + (v2 + 0xfe000000 & 0xffffff9d | 98)); // 0x409b59
    *v4 = *v4 + (char)v1;
    int64_t v5; // 0x409b4c
    *(char *)v5 = *(char *)&v5 - 1;
    return function_1f409b7a();
}

// Address range: 0x409c75 - 0x409c8f
int64_t function_409c75(uint64_t a1, int64_t a2) {
    // 0x409c75
    int64_t v1; // 0x409c75
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)a2;
    int64_t v3; // 0x409c75
    *(char *)a1 = *(char *)&v3 >> 1;
    int64_t v4; // 0x409c75
    int64_t v5 = v4;
    *(char *)v5 = *(char *)&v4 + (char)v5;
    char v6 = *(char *)&v4; // 0x409c81
    int64_t v7; // 0x409c75
    *(char *)v7 = *(char *)&v7 + (char)v4;
    __asm_outsd((int16_t)a2, *(int32_t *)&v7);
    int64_t v8 = v4;
    *(char *)v8 = *(char *)&v4 + (char)v8;
    char v9 = *(char *)&v4; // 0x409c8b
    return function_409c91(256 * (int64_t)(v9 | v6 + (char)(a1 / 256)) | a1 & -0xff01);
}

// Address range: 0x409c8f - 0x409c91
int64_t function_409c8f(void) {
    // 0x409c8f
    int64_t result; // 0x409c8f
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x409c91 - 0x409c95
int64_t function_409c91(int64_t a1) {
    // 0x409c91
    int64_t v1; // 0x409c91
    int64_t v2 = v1;
    int64_t v3 = v2 - (a1 & 0xff00) & 0xff00 | v2 & -0xff01; // 0x409c91
    return v3 & -256 | (int64_t)(*(char *)v3 + (char)v2);
}

// Address range: 0x409caa - 0x409cbe
int64_t function_409caa(uint64_t a1, int64_t a2) {
    // 0x409caa
    int64_t v1; // 0x409caa
    *(char *)a2 = (char)v1 + (char)a1;
    int64_t v2; // 0x409caa
    *(char *)a1 = *(char *)&v2 >> 1;
    int64_t v3; // 0x409caa
    int64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)v4;
    char v5 = *(char *)&v3; // 0x409cb0
    int64_t v6; // 0x409caa
    *(char *)v6 = *(char *)&v6 + (char)v3;
    __asm_outsd((int16_t)a2, *(int32_t *)&v6);
    int64_t v7 = v3;
    *(char *)v7 = *(char *)&v3 + (char)v7;
    char v8 = *(char *)&v3; // 0x409cba
    return function_409cc0(256 * (int64_t)(v8 | v5 + (char)(a1 / 256)) | a1 & -0xff01);
}

// Address range: 0x409cbe - 0x409cc0
int64_t function_409cbe(void) {
    // 0x409cbe
    int64_t result; // 0x409cbe
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x409cc0 - 0x409cc4
int64_t function_409cc0(int64_t a1) {
    // 0x409cc0
    int64_t v1; // 0x409cc0
    int64_t v2 = v1;
    int64_t v3 = v2 - (a1 & 0xff00) & 0xff00 | v2 & -0xff01; // 0x409cc0
    return v3 & -256 | (int64_t)(*(char *)v3 + (char)v2);
}

// Address range: 0x409d9e - 0x409dbc
int64_t function_409d9e(uint64_t a1, int64_t a2) {
    // 0x409d9e
    int64_t v1; // 0x409d9e
    char * v2 = (char *)(v1 - 0x72f9fffe); // 0x409d9e
    *v2 = *v2 - (char)v1;
    int64_t result; // 0x409d9e
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x409d9e
    *(int32_t *)v4 = *(int32_t *)&v4 + (int32_t)a2;
    char * v5 = (char *)(v4 + 0x28060002); // 0x409daa
    *v5 = *v5 - (char)(a1 / 256);
    int64_t v6; // 0x409d9e
    int32_t v7 = *(int32_t *)&v6; // 0x409db0
    *(int32_t *)a2 = 2 * v7 | (int32_t)(v7 < 0);
    unsigned char v8 = *(char *)&v4; // 0x409db2
    unsigned char v9 = v8 + (char)result; // 0x409db2
    *(char *)v4 = v9;
    int32_t * v10 = (int32_t *)(a2 + 22); // 0x409db4
    *v10 = *v10 + (int32_t)a1 + (int32_t)(v9 < v8);
    return result;
}

// Address range: 0x409e31 - 0x409e34
int64_t function_409e31(int64_t a1) {
    // 0x409e31
    int64_t v1; // 0x409e31
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x409f30 - 0x409f4d
int64_t function_409f30(int64_t a1, int64_t a2, int64_t a3) {
    // 0x409f30
    int64_t v1; // 0x409f30
    uint64_t v2 = v1;
    int32_t v3 = v2; // 0x409f30
    __asm_out(0, v3);
    *(char *)v2 = 2 * (char)v2;
    unsigned char v4 = (char)a2; // 0x409f34
    uint32_t v5 = 2 * v3 | (int32_t)(v4 < (char)(v2 / 256)); // 0x409f36
    int64_t v6 = v5; // 0x409f36
    int64_t v7; // 0x409f30
    *(char *)v7 = *(char *)&v7 + v4;
    unsigned char v8 = *(char *)v6 + (char)v5; // 0x409f3e
    int64_t v9 = v6 & 0xffffff00; // 0x409f3e
    char * v10 = (char *)(v9 | (int64_t)v8); // 0x409f40
    *v10 = *v10 + (char)((uint64_t)v1 / 256);
    __asm_int(19);
    unsigned char v11 = *v10 + v8; // 0x409f44
    *v10 = v11;
    while (v11 < 1) {
        // 0x409f42
        __asm_int(19);
        v11 = *v10 + v8;
        *v10 = v11;
    }
    // 0x409f48
    *v10 = v11 + v8;
    return v9 | (int64_t)(v8 + 40);
}

// Address range: 0x40a050 - 0x40a078
int64_t function_40a050(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40a050
    int64_t v1; // 0x40a050
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40a050
    *(char *)v3 = *(char *)&v3 - 1;
    int64_t v4; // 0x40a050
    int64_t v5 = v4;
    *(char *)v5 = *(char *)&v4 + (char)v5;
    char * v6 = (char *)(2 * v4 + v1); // 0x40a05d
    *v6 = *v6 - 1;
    uint64_t v7 = v4;
    *(char *)v7 = *(char *)&v4 + (char)(v7 / 256);
    uint64_t v8 = __asm_sldt(); // 0x40a062
    *(int16_t *)v8 = (int16_t)v8;
    *(char *)v8 = *(char *)&v4 + (char)(v8 / 256);
    uint64_t v9 = __asm_wait(a1, a2); // 0x40a067
    char * v10 = (char *)v9; // 0x40a068
    *v10 = *(char *)&v4 + (char)v9;
    *v10 = *(char *)&v4 + (char)(v9 / 256);
    uint32_t v11 = *(int32_t *)&v4 ^ (int32_t)v9; // 0x40a06c
    int64_t v12 = v11; // 0x40a06c
    char * v13 = (char *)v12; // 0x40a06e
    char v14 = v11; // 0x40a06e
    char v15 = *v13 + v14; // 0x40a06e
    *v13 = v15;
    return v12 & 0xffffff00 | (int64_t)(v15 ^ v14);
}

// Address range: 0x40a1a3 - 0x40a1bb
int64_t function_40a1a3(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40a1a3
    int64_t v1; // 0x40a1a3
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    int64_t result; // 0x40a1a3
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x40a1a3
    *(char *)a1 = *(char *)&v4 >> 1;
    int64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)v5;
    int64_t v6; // 0x40a1a3
    *(char *)v6 = *(char *)&v6 + (char)result;
    __asm_outsd((int16_t)a2, *(int32_t *)&v6);
    int64_t v7 = result;
    *(char *)v7 = *(char *)&result + (char)v7;
    return result;
}

// Address range: 0x40a1c8 - 0x40a1ca
int64_t function_40a1c8(void) {
    // 0x40a1c8
    int64_t result; // 0x40a1c8
    return result;
}

// Address range: 0x40a298 - 0x40a29a
int64_t function_40a298(void) {
    // 0x40a298
    int64_t result; // 0x40a298
    return result;
}

// Address range: 0x40a2f6 - 0x40a2fe
int64_t function_40a2f6(void) {
    // 0x40a2f6
    int64_t v1; // 0x40a2f6
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return __asm_in(-1);
}

// Address range: 0x40a34f - 0x40a351
int64_t function_40a34f(void) {
    // 0x40a34f
    int64_t v1; // 0x40a34f
    return function_40a36b(v1, v1, (int64_t)&g2);
}

// Address range: 0x40a35c - 0x40a36b
int64_t function_40a35c(int64_t a1) {
    // 0x40a35c
    int64_t v1; // 0x40a35c
    int64_t v2 = v1;
    *(char *)v2 = (char)v2;
    int64_t v3; // 0x40a35c
    int64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)v4;
    uint64_t v5 = v3;
    *(char *)v5 = *(char *)&v3 + (char)(v5 / 256);
    int64_t v6 = v3;
    *(char *)v6 = *(char *)&v3 + (char)v6;
    uint64_t v7 = v3;
    *(char *)v7 = *(char *)&v3 + (char)(v7 / 256);
    int64_t result = v3 & 0xffffffff; // 0x40a367
    char * v8 = (char *)result; // 0x40a369
    *v8 = *v8 + (char)v3;
    return result;
}

// Address range: 0x40a36b - 0x40a37e
int64_t function_40a36b(int64_t a1, int64_t a2, int64_t result) {
    // 0x40a36b
    int64_t v1; // 0x40a36b
    char * v2 = (char *)(v1 + 1); // 0x40a36d
    *v2 = *v2 & (char)a2;
    char * v3 = (char *)result; // 0x40a370
    *v3 = 2 * (char)result + (char)(v1 / 256) + *v3;
    return result;
}

// Address range: 0x40a508 - 0x40a51a
int64_t function_40a508(int64_t a1) {
    // 0x40a508
    int64_t v1; // 0x40a508
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x40a508
    unsigned char v3 = *(char *)&result; // 0x40a50e
    unsigned char v4 = v3 + (char)result; // 0x40a50e
    *(char *)result = v4;
    int32_t v5 = *(int32_t *)0x6ecc4f; // 0x40a511
    *(int32_t *)0x6ecc4f = v5 + (int32_t)v1 + (int32_t)(v4 < v3);
    char v6 = *(char *)&result; // 0x40a517
    *(char *)result = v6 + (char)((int32_t)(v1 | a1) / 256);
    return result;
}

// Address range: 0x40a556 - 0x40a55c
int64_t function_40a556(void) {
    // 0x40a556
    int64_t v1; // 0x40a556
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return function_40a589();
}

// Address range: 0x40a55c - 0x40a589
int64_t function_40a55c(int64_t a1, uint64_t a2, uint64_t a3) {
    // 0x40a55c
    int64_t v1; // 0x40a55c
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    char * v3 = (char *)(a1 - 0x54c80000 + v2); // 0x40a55e
    char v4 = (uint64_t)v1 / 256; // 0x40a55e
    *v3 = *v3 & v4;
    int64_t v5 = (v2 | 0x1d110000) + 0xdeed0000; // 0x40a56c
    char * v6 = (char *)(v5 & 0xfffeffff); // 0x40a571
    char v7 = *v6 & (char)(a2 / 256); // 0x40a571
    *v6 = v7;
    int64_t v8 = v5 & 0xfffeff00 | (int64_t)(v7 + (char)v5); // 0x40a573
    char * v9 = (char *)v8; // 0x40a575
    *v9 = *v9 + v4;
    uint32_t v10 = 0x10000 * (int32_t)v8 >> 16 | 0x75110000; // 0x40a578
    int64_t result = v10; // 0x40a578
    int32_t * v11 = (int32_t *)result; // 0x40a585
    *v11 = v10 + *v11;
    char * v12 = (char *)result; // 0x40a587
    *v12 = *v12 + (char)(a3 / 256);
    return result;
}

// Address range: 0x40a589 - 0x40a5a4
int64_t function_40a589(void) {
    // 0x40a589
    int64_t v1; // 0x40a589
    uint64_t v2 = v1;
    __writefsbyte(v2, __readfsbyte(v2) + (char)(v2 / 256));
    int64_t result = v2 & 0x1ffff9d | 0xfe000062; // 0x40a597
    char * v3 = (char *)(v1 + 407 + result); // 0x40a599
    *v3 = *v3 + (char)v1;
    int64_t v4; // 0x40a589
    *(char *)v4 = *(char *)&v4 - 1;
    return result;
}

// Address range: 0x40a5a5 - 0x40a5bb
int64_t function_40a5a5(int64_t a1, int64_t a2, uint64_t result, int64_t a4) {
    // 0x40a5a5
    int64_t v1; // 0x40a5a5
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40a5a5
    *(char *)v3 = *(char *)&v3 & (char)a1;
    int64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)v4;
    uint64_t v5 = v3;
    *(char *)v5 = *(char *)&v3 + (char)(v5 / 256);
    int64_t v6 = v3;
    *(char *)v6 = *(char *)&v3 - (char)v6;
    int64_t v7 = v3;
    *(char *)v7 = *(char *)&v3 + (char)v7;
    int64_t v8; // 0x40a5a5
    *(char *)v8 = *(char *)&v8 - 1;
    char * v9 = (char *)result; // 0x40a5b8
    *v9 = *v9 + (char)(result / 256);
    return result;
}

// Address range: 0x40a658 - 0x40a65d
int64_t function_40a658(void) {
    // 0x40a658
    int64_t v1; // 0x40a658
    int64_t result = v1;
    *(char *)result = (char)result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40a7fc - 0x40a83b
int64_t function_40a7fc(int64_t a1, int64_t a2) {
    // 0x40a7fc
    int64_t v1; // 0x40a7fc
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    char * v3 = (char *)(v1 + 2 * v1); // 0x40a824
    *v3 = *v3 - 1;
    int64_t result; // 0x40a7fc
    unsigned char v4 = *(char *)&result; // 0x40a827
    unsigned char v5 = v4 + (char)(result / 256); // 0x40a827
    *(char *)result = v5;
    uint64_t v6 = result + (int64_t)(v5 < v4); // 0x40a829
    int64_t v7 = v6 % 256 | result & -256; // 0x40a829
    result = v7;
    char * v8 = (char *)v7; // 0x40a82b
    *v8 = *v8 + (char)v6;
    char * v9 = (char *)(3 * a2); // 0x40a82d
    *v9 = *v9 - 1;
    char * v10 = (char *)(v1 + 394 + v7); // 0x40a830
    *v10 = *v10 + (char)v1;
    int64_t v11; // 0x40a7fc
    *(char *)v11 = *(char *)&v11 - 1;
    return result;
}

// Address range: 0x40a8db - 0x40a908
int64_t function_40a8db(uint64_t a1, int64_t a2, int64_t a3) {
    int16_t v1 = a2; // 0x40a8db
    int64_t v2; // 0x40a8db
    *(char *)v2 = __asm_insb(v1);
    char * v3 = (char *)(a2 + 0x38000001); // 0x40a8dd
    int64_t v4; // 0x40a8db
    *v3 = *v3 & (char)(v4 / 256);
    int64_t result = v2 ^ 10; // 0x40a8e3
    char * v5 = (char *)result; // 0x40a8e5
    unsigned char v6 = *v5; // 0x40a8e5
    char v7 = result; // 0x40a8e5
    unsigned char v8 = v6 + v7; // 0x40a8e5
    *v5 = v8;
    int32_t v9 = *(int32_t *)-0x635c37fd; // 0x40a8e7
    *(int32_t *)-0x635c37fd = v9 + (int32_t)result + (int32_t)(v8 < v6);
    char v10 = *v5 + v7; // 0x40a8ef
    *v5 = v10;
    char v11 = v10 + (char)(v4 / 256); // 0x40a8f1
    *v5 = v11;
    char v12 = *(char *)&v4; // 0x40a8f3
    *v5 = v11 + v7;
    char * v13 = (char *)(256 * (int64_t)(v12 | (char)(a1 / 256)) | a1 & -0xff01); // 0x40a8f7
    *v13 = *v13 >> 1;
    *v5 = *v5 + 2 * v7;
    int64_t v14; // 0x40a8db
    __asm_outsd(v1, *(int32_t *)&v14);
    *v5 = *v5 + v7;
    return result;
}

// Address range: 0x40a90f - 0x40a911
int64_t function_40a90f(void) {
    // 0x40a90f
    int64_t result; // 0x40a90f
    return result;
}

// Address range: 0x40a923 - 0x40a972
int64_t function_40a923(int64_t a1, uint64_t a2) {
    // 0x40a923
    int64_t v1; // 0x40a923
    int64_t v2 = v1;
    int64_t v3 = a2;
    int64_t v4 = a1;
    *(int32_t *)v2 = (int32_t)v2;
    *(char *)a1 = *(char *)&v4 + (char)a2;
    uint64_t v5 = v2 + 0x9c741f1d; // 0x40a929
    int64_t result = v5 & 0xffffffff; // 0x40a929
    char * v6 = (char *)(a2 + 0x38000001); // 0x40a92e
    *v6 = *v6 & (char)(a2 / 256);
    int64_t v7; // 0x40a923
    if (a1 != 0) {
        char * v8 = (char *)result; // 0x40a936
        unsigned char v9 = *v8; // 0x40a936
        unsigned char v10 = v9 + (char)v5; // 0x40a936
        *v8 = v10;
        int32_t v11 = *(int32_t *)0x35540b5c; // 0x40a938
        *(int32_t *)0x35540b5c = v11 + (int32_t)(v10 < v9) + (int32_t)v7;
        return result;
    }
    unsigned char v12 = (char)v4 % 32; // 0x40a93f
    if (v12 != 0) {
        *(char *)v3 = *(char *)&v3 >> v12;
    }
    char * v13 = (char *)result; // 0x40a941
    char v14 = v5; // 0x40a941
    *v13 = *v13 + v14;
    int32_t * v15 = (int32_t *)result; // 0x40a945
    int32_t v16 = v5; // 0x40a945
    *v15 = *v15 | v16;
    *(char *)v7 = *(char *)&v7 + (char)v3;
    *(char *)0x9c638000000 = v14;
    char * v17 = (char *)(v1 + 2 * v1); // 0x40a955
    *v17 = *v17 - 1;
    unsigned char v18 = *v13; // 0x40a958
    char v19 = v5 / 256; // 0x40a958
    unsigned char v20 = v18 + v19; // 0x40a958
    *v13 = v20;
    *v15 = *v15 + v16 + (int32_t)(v20 < v18);
    *v13 = *v13 + v14;
    char * v21 = (char *)(3 * v3); // 0x40a95e
    *v21 = *v21 - 1;
    char * v22 = (char *)(v1 + 85 + result); // 0x40a961
    *v22 = *v22 + (char)v1;
    int64_t result2 = result | 100; // 0x40a96e
    char * v23 = (char *)result2; // 0x40a970
    *v23 = *v23 + v19;
    return result2;
}

// Address range: 0x40a9be - 0x40a9c1
int64_t function_40a9be(int64_t a1) {
    // 0x40a9be
    int64_t result; // 0x40a9be
    return result;
}

// Address range: 0x40aa6d - 0x40aac0
int64_t function_40aa6d(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40aa6d
    int64_t v1; // 0x40aa6d
    uint64_t v2 = v1;
    int64_t v3 = a1;
    int64_t v4 = a3;
    unsigned char v5 = 2 * (char)v1; // 0x40aa6d
    *(char *)v1 = v5;
    char v6 = v2; // 0x40aa6f
    int64_t v7; // 0x40aa6d
    *(char *)v7 = *(char *)&v7 & v6;
    int64_t v8 = v1 & -256 | (int64_t)v5; // 0x40aa71
    char * v9 = (char *)v8; // 0x40aa73
    *v9 = *v9 + (char)(v2 / 256);
    *(char *)0x2000640cfe000008 = v5;
    int32_t * v10 = (int32_t *)v8; // 0x40aa7e
    *v10 = *v10 | (int32_t)v8;
    *v9 = *v9 + v5;
    int64_t v11; // 0x40aa6d
    *(char *)v11 = *(char *)&v11 & v6;
    unsigned char v12 = v5 + (char)(v1 / 256) + *v9; // 0x40aa86
    char v13 = v12 + v5; // 0x40aa8a
    unsigned char v14 = llvm_ctpop_i8(v13); // 0x40aa8a
    *v9 = v13;
    uint64_t result = v4;
    bool v15; // 0x40aa6d
    v4 = 0x4000 * (int64_t)v15 | 1024 * (int64_t)v15 | 512 * (int64_t)v15 | 256 * (int64_t)v15 | (int64_t)(v13 < v12) | 64 * (int64_t)(v13 == 0) | 128 * (int64_t)(v13 < 0) | 16 * (int64_t)(v12 % 16 + (v5 & 14) > 15) | 4 * (int64_t)(v14 % 2 == 0) | 2048 * (int64_t)(((v13 ^ v12) & (v13 ^ v5)) < 0) | 2;
    char v16 = result / 256;
    char v17 = *(char *)0x3840aa94 & v16; // 0x40aa8e
    unsigned char v18 = llvm_ctpop_i8(v17); // 0x40aa8e
    *(char *)0x3840aa94 = v17;
    if (v18 % 2 == 0) {
        char * v19 = (char *)result; // 0x40aa96
        *v19 = *v19 + (char)result;
        return result;
    }
    uint32_t v20 = *(int32_t *)&v3; // 0x40aaa0
    uint32_t v21 = (int32_t)a2; // 0x40aaa0
    *(int32_t *)v3 = v20 - v21;
    uint64_t v22 = result - 17 + (v20 < v21 ? -18 : -17); // 0x40aaa2
    int64_t result2 = v22 % 256 | result & -256; // 0x40aaa2
    int32_t * v23 = (int32_t *)(v3 - 0x68c7dcef); // 0x40aaa4
    *v23 = *v23 - v21;
    int32_t * v24 = (int32_t *)result2; // 0x40aaaa
    *v24 = *v24 - (int32_t)result2;
    char * v25 = (char *)(v3 + 0x209cd261); // 0x40aaac
    *v25 = *v25 + (char)a2;
    char * v26 = (char *)result2; // 0x40aab4
    *v26 = *v26 + 2 * (char)v22;
    char * v27 = (char *)(2 * result2 + (int64_t)&v4); // 0x40aabb
    *v27 = *v27 - 1;
    *v26 = *v26 + v16;
    return result2;
}

// Address range: 0x40abc2 - 0x40abc5
int64_t function_40abc2(int64_t a1) {
    // 0x40abc2
    int64_t result; // 0x40abc2
    return result;
}

// Address range: 0x40ad00 - 0x40ad01
int64_t function_40ad00(void) {
    // 0x40ad00
    int64_t result; // 0x40ad00
    return result;
}

// Address range: 0x40aef1 - 0x40aef2
int64_t function_40aef1(void) {
    // 0x40aef1
    int64_t result; // 0x40aef1
    return result;
}

// Address range: 0x40b119 - 0x40b120
int64_t function_40b119(void) {
    // 0x40b119
    int64_t v1; // 0x40b119
    uint64_t v2 = v1;
    *(char *)v2 = (char)(v2 / 256) + (char)v2;
    return function_3840b120();
}

// Address range: 0x40b248 - 0x40b24b
int64_t function_40b248(int64_t a1) {
    // 0x40b248
    int64_t result; // 0x40b248
    return result;
}

// Address range: 0x40b24c - 0x40b255
int64_t function_40b24c(void) {
    // 0x40b24c
    int64_t result; // 0x40b24c
    char * v1 = (char *)(result + 0x38000001); // 0x40b24e
    *v1 = *v1 & (char)result;
    return result;
}

// Address range: 0x40b333 - 0x40b338
int64_t function_40b333(int64_t a1) {
    // 0x40b333
    int64_t v1; // 0x40b333
    int64_t v2 = v1;
    return 257 * v2 & 0xff00 | v2 & -0xff01;
}

// Address range: 0x40b33b - 0x40b341
int64_t function_40b33b(void) {
    // 0x40b33b
    int64_t result; // 0x40b33b
    return result;
}

// Address range: 0x40b351 - 0x40b356
int64_t function_40b351(void) {
    // 0x40b351
    int64_t result; // 0x40b351
    return result;
}

// Address range: 0x40b35b - 0x40b35d
int64_t function_40b35b(void) {
    // 0x40b35b
    int64_t result; // 0x40b35b
    return result;
}

// Address range: 0x40b37d - 0x40b382
int64_t function_40b37d(void) {
    // 0x40b37d
    int64_t result; // 0x40b37d
    return result;
}

// Address range: 0x40b39b - 0x40b39d
int64_t function_40b39b(void) {
    // 0x40b39b
    int64_t result; // 0x40b39b
    return result;
}

// Address range: 0x40b3a6 - 0x40b3b1
int64_t function_40b3a6(int64_t a1, int64_t a2) {
    // 0x40b3a6
    int64_t v1; // 0x40b3a6
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40b3b1 - 0x40b3b6
int64_t function_40b3b1(int64_t a1) {
    // 0x40b3b1
    int64_t result; // 0x40b3b1
    return result;
}

// Address range: 0x40b3c7 - 0x40b3cd
int64_t function_40b3c7(int64_t a1, uint64_t a2) {
    // 0x40b3c7
    int64_t result; // 0x40b3c7
    int64_t v1 = result;
    *(char *)v1 = (char)v1 + (char)(a2 / 256);
    __asm_out((char)a1, (int32_t)a2);
    return result;
}

// Address range: 0x40b3cf - 0x40b3d1
int64_t function_40b3cf(void) {
    // 0x40b3cf
    int64_t result; // 0x40b3cf
    return result;
}

// Address range: 0x40b3f3 - 0x40b3f9
int64_t function_40b3f3(void) {
    // 0x40b3f3
    int64_t result; // 0x40b3f3
    return result;
}

// Address range: 0x40b3fc - 0x40b3ff
int64_t function_40b3fc(void) {
    // 0x40b3fc
    int64_t result; // 0x40b3fc
    return result;
}

// Address range: 0x40b411 - 0x40b415
int64_t function_40b411(void) {
    // 0x40b411
    int64_t result; // 0x40b411
    return result;
}

// Address range: 0x40b415 - 0x40b41a
int64_t function_40b415(void) {
    // 0x40b415
    return function_ffffffffde2fb419();
}

// Address range: 0x40b41f - 0x40b421
int64_t function_40b41f(void) {
    // 0x40b41f
    int64_t result; // 0x40b41f
    return result;
}

// Address range: 0x40b425 - 0x40b42d
int64_t function_40b425(void) {
    // 0x40b425
    int64_t result; // 0x40b425
    __asm_out_1(-1, (char)result);
    return result;
}

// Address range: 0x40b43f - 0x40b445
int64_t function_40b43f(void) {
    // 0x40b43f
    int64_t result; // 0x40b43f
    return result;
}

// Address range: 0x40b459 - 0x40b45c
int64_t function_40b459(int64_t a1) {
    // 0x40b459
    int64_t result; // 0x40b459
    return result;
}

// Address range: 0x40b471 - 0x40b472
int64_t function_40b471(void) {
    // 0x40b471
    int64_t result; // 0x40b471
    return result;
}

// Address range: 0x40b488 - 0x40b489
int64_t function_40b488(void) {
    // 0x40b488
    int64_t result; // 0x40b488
    return result;
}

// Address range: 0x40b48b - 0x40b496
int64_t function_40b48b(void) {
    // 0x40b48b
    int64_t result; // 0x40b48b
    char v1 = result;
    *(char *)result = v1 + (char)result;
    __asm_out_1(-1, v1);
    return result;
}

// Address range: 0x40b497 - 0x40b49a
int64_t function_40b497(int64_t a1, int64_t a2) {
    // 0x40b497
    int64_t result; // 0x40b497
    *(int32_t *)a1 = (int32_t)result + 1;
    return result;
}

// Address range: 0x40b49b - 0x40b49e
int64_t function_40b49b(void) {
    // 0x40b49b
    int64_t result; // 0x40b49b
    return result;
}

// Address range: 0x40b4a0 - 0x40b4a1
int64_t function_40b4a0(int64_t a1) {
    // 0x40b4a0
    int64_t result; // 0x40b4a0
    return result;
}

// Address range: 0x40b4a3 - 0x40b4a5
int64_t function_40b4a3(void) {
    // 0x40b4a3
    int64_t result; // 0x40b4a3
    return result;
}

// Address range: 0x40b4a7 - 0x40b4aa
int64_t function_40b4a7(void) {
    // 0x40b4a7
    int64_t result; // 0x40b4a7
    return result;
}

// Address range: 0x40b4ab - 0x40b4ae
int64_t function_40b4ab(void) {
    // 0x40b4ab
    int64_t result; // 0x40b4ab
    return result;
}

// Address range: 0x40b4b4 - 0x40b4b6
int64_t function_40b4b4(int64_t a1) {
    // 0x40b4b4
    int64_t result; // 0x40b4b4
    return result;
}

// Address range: 0x40b4b8 - 0x40b4b9
int64_t function_40b4b8(int64_t a1) {
    // 0x40b4b8
    int64_t result; // 0x40b4b8
    return result;
}

// Address range: 0x40b4bd - 0x40b4be
int64_t function_40b4bd(int64_t a1) {
    // 0x40b4bd
    int64_t result; // 0x40b4bd
    return result;
}

// Address range: 0x40b4c0 - 0x40b4c2
int64_t function_40b4c0(void) {
    // 0x40b4c0
    return function_40b488();
}

// Address range: 0x40b4e3 - 0x40b4ea
int64_t function_40b4e3(void) {
    // 0x40b4e3
    return function_ffffffffbafcb4e9();
}

// Address range: 0x40b4eb - 0x40b4ed
int64_t function_40b4eb(void) {
    // 0x40b4eb
    int64_t result; // 0x40b4eb
    return result;
}

// Address range: 0x40b507 - 0x40b50e
int64_t function_40b507(uint64_t a1) {
    // 0x40b507
    int64_t result; // 0x40b507
    char * v1 = (char *)(result + 0x76000008); // 0x40b507
    *v1 = *v1 + (char)(a1 / 256);
    return result;
}

// Address range: 0x40b517 - 0x40b51d
int64_t function_40b517(void) {
    // 0x40b517
    int64_t result; // 0x40b517
    int32_t * v1 = (int32_t *)(result - 1 + 8 * result); // 0x40b517
    *v1 = *v1 + 1;
    return result;
}

// Address range: 0x40b537 - 0x40b539
int64_t function_40b537(void) {
    // 0x40b537
    int64_t result; // 0x40b537
    return result;
}

// Address range: 0x40b539 - 0x40b556
int64_t function_40b539(int64_t a1) {
    // 0x40b539
    int64_t v1; // 0x40b539
    uint32_t v2 = 2 * (int32_t)v1; // 0x40b545
    char * v3 = (char *)(v1 - 0x3a000011); // 0x40b547
    *v3 = *v3 + (char)a1;
    int32_t * v4 = (int32_t *)(int64_t)v2; // 0x40b54d
    *v4 = *v4 | v2;
    return unknown_ffffffffbb83b555();
}

// Address range: 0x40b583 - 0x40b58e
int64_t function_40b583(void) {
    // 0x40b583
    int64_t v1; // 0x40b583
    int32_t * v2 = (int32_t *)(v1 + 0x60ffffc7); // 0x40b583
    *v2 = *v2 - 1;
    return function_ffffffffbf5ab58d();
}

// Address range: 0x40b59f - 0x40b5a2
int64_t function_40b59f(void) {
    // 0x40b59f
    int64_t result; // 0x40b59f
    return result;
}

// Address range: 0x40b5bf - 0x40b5c2
int64_t function_40b5bf(int64_t a1) {
    // 0x40b5bf
    int64_t result; // 0x40b5bf
    *(char *)a1 = 2 * (char)result;
    return result;
}

// Address range: 0x40b5d3 - 0x40b5de
int64_t function_40b5d3(int64_t a1, int64_t a2) {
    // 0x40b5d3
    int64_t v1; // 0x40b5d3
    return v1 + 1 & 0xffffffff;
}

// Address range: 0x40b5e5 - 0x40b5ef
int64_t function_40b5e5(void) {
    // 0x40b5e5
    int64_t v1; // 0x40b5e5
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40b5ef - 0x40b5f5
int64_t function_40b5ef(void) {
    // 0x40b5ef
    int64_t result; // 0x40b5ef
    return result;
}

// Address range: 0x40b5f5 - 0x40b5f8
int64_t function_40b5f5(int64_t a1) {
    // 0x40b5f5
    int64_t result; // 0x40b5f5
    return result;
}

// Address range: 0x40b615 - 0x40b622
int64_t function_40b615(int64_t a1) {
    // 0x40b615
    int64_t v1; // 0x40b615
    uint32_t v2 = 2 * (int32_t)v1; // 0x40b615
    int64_t result = v2; // 0x40b615
    char * v3 = (char *)(result + 0x63fffff1); // 0x40b617
    *v3 = *v3 + (char)a1;
    __asm_out(-1, v2);
    return result;
}

// Address range: 0x40b62f - 0x40b635
int64_t function_40b62f(void) {
    // 0x40b62f
    int64_t result; // 0x40b62f
    return result;
}

// Address range: 0x40b637 - 0x40b639
int64_t function_40b637(void) {
    // 0x40b637
    int64_t result; // 0x40b637
    return result;
}

// Address range: 0x40b644 - 0x40b64d
int64_t function_40b644(void) {
    // 0x40b644
    int64_t v1; // 0x40b644
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_fffffffff040b620();
}

// Address range: 0x40b64d - 0x40b64e
int64_t function_40b64d(void) {
    // 0x40b64d
    int64_t result; // 0x40b64d
    return result;
}

// Address range: 0x40b657 - 0x40b65a
int64_t function_40b657(void) {
    // 0x40b657
    int64_t result; // 0x40b657
    return result;
}

// Address range: 0x40b683 - 0x40b689
int64_t function_40b683(void) {
    // 0x40b683
    int64_t result; // 0x40b683
    return result;
}

// Address range: 0x40b691 - 0x40b694
int64_t function_40b691(void) {
    // 0x40b691
    int64_t result; // 0x40b691
    return result;
}

// Address range: 0x40b697 - 0x40b69d
int64_t function_40b697(void) {
    // 0x40b697
    int64_t result; // 0x40b697
    return result;
}

// Address range: 0x40b6a0 - 0x40b6a6
int64_t function_40b6a0(int64_t a1, int64_t a2) {
    // 0x40b6a0
    __asm_out_4((int16_t)a2, (char)a2);
    int64_t result; // 0x40b6a0
    return result;
}

// Address range: 0x40b6b7 - 0x40b6b9
int64_t function_40b6b7(void) {
    // 0x40b6b7
    int64_t result; // 0x40b6b7
    return result;
}

// Address range: 0x40b6bf - 0x40b6c2
int64_t function_40b6bf(int64_t a1, int64_t a2) {
    // 0x40b6bf
    int64_t result; // 0x40b6bf
    return result;
}

// Address range: 0x40b6c3 - 0x40b6c5
int64_t function_40b6c3(void) {
    // 0x40b6c3
    int64_t result; // 0x40b6c3
    return result;
}

// Address range: 0x40b6c8 - 0x40b6d2
int64_t function_40b6c8(void) {
    // 0x40b6c8
    int64_t result; // 0x40b6c8
    return result;
}

// Address range: 0x40b6d8 - 0x40b6d9
int64_t function_40b6d8(int64_t a1) {
    // 0x40b6d8
    int64_t result; // 0x40b6d8
    return result;
}

// Address range: 0x40b6df - 0x40b6e9
int64_t function_40b6df(int64_t a1, int64_t a2) {
    // 0x40b6df
    int64_t result; // 0x40b6df
    return result;
}

// Address range: 0x40b6eb - 0x40b6ed
int64_t function_40b6eb(void) {
    // 0x40b6eb
    int64_t result; // 0x40b6eb
    return result;
}

// Address range: 0x40b6fb - 0x40b701
int64_t function_40b6fb(void) {
    // 0x40b6fb
    int64_t result; // 0x40b6fb
    return result;
}

// Address range: 0x40b703 - 0x40b705
int64_t function_40b703(void) {
    // 0x40b703
    int64_t result; // 0x40b703
    return result;
}

// Address range: 0x40b707 - 0x40b70d
int64_t function_40b707(void) {
    // 0x40b707
    int64_t result; // 0x40b707
    return result;
}

// Address range: 0x40b71a - 0x40b722
int64_t function_40b71a(void) {
    // 0x40b71a
    int64_t v1; // 0x40b71a
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_b5bb721();
}

// Address range: 0x40b735 - 0x40b73d
int64_t function_40b735(void) {
    // 0x40b735
    int64_t result; // 0x40b735
    return result;
}

// Address range: 0x40b73d - 0x40b73e
int64_t function_40b73d(int64_t a1) {
    // 0x40b73d
    int64_t result; // 0x40b73d
    return result;
}

// Address range: 0x40b73f - 0x40b745
int64_t function_40b73f(void) {
    // 0x40b73f
    int64_t result; // 0x40b73f
    return result;
}

// Address range: 0x40b74b - 0x40b751
int64_t function_40b74b(void) {
    // 0x40b74b
    int64_t result; // 0x40b74b
    return result;
}

// Address range: 0x40b76b - 0x40b772
int64_t function_40b76b(void) {
    // 0x40b76b
    int64_t result; // 0x40b76b
    return result;
}

// Address range: 0x40b77b - 0x40b77e
int64_t function_40b77b(void) {
    // 0x40b77b
    int64_t result; // 0x40b77b
    return result;
}

// Address range: 0x40b783 - 0x40b785
int64_t function_40b783(void) {
    // 0x40b783
    int64_t result; // 0x40b783
    return result;
}

// Address range: 0x40b789 - 0x40b78c
int64_t function_40b789(void) {
    // 0x40b789
    int64_t result; // 0x40b789
    return result;
}

// Address range: 0x40b78c - 0x40b78e
int64_t function_40b78c(void) {
    // 0x40b78c
    return function_40b74b();
}

// Address range: 0x40b7cb - 0x40b7d1
int64_t function_40b7cb(void) {
    // 0x40b7cb
    int64_t result; // 0x40b7cb
    return result;
}

// Address range: 0x40b7db - 0x40b7e1
int64_t function_40b7db(void) {
    // 0x40b7db
    int64_t result; // 0x40b7db
    return result;
}

// Address range: 0x40b7e4 - 0x40b7e7
int64_t function_40b7e4(void) {
    // 0x40b7e4
    int64_t result; // 0x40b7e4
    return result;
}

// Address range: 0x40b7f7 - 0x40b800
int64_t function_40b7f7(int64_t a1, int64_t a2) {
    int32_t * v1 = (int32_t *)(a1 + 0x66ffffbd); // 0x40b7f7
    *v1 = *v1 + 1;
    int64_t result; // 0x40b7f7
    return result;
}

// Address range: 0x40b835 - 0x40b836
int64_t function_40b835(int64_t a1) {
    // 0x40b835
    int64_t result; // 0x40b835
    return result;
}

// Address range: 0x40b84d - 0x40b854
int64_t function_40b84d(int64_t a1) {
    // 0x40b84d
    int64_t result; // 0x40b84d
    return result;
}

// Address range: 0x40b85b - 0x40b85d
int64_t function_40b85b(void) {
    // 0x40b85b
    int64_t result; // 0x40b85b
    return result;
}

// Address range: 0x40b85d - 0x40b85e
int64_t function_40b85d(int64_t a1) {
    // 0x40b85d
    int64_t result; // 0x40b85d
    return result;
}

// Address range: 0x40b860 - 0x40b865
int64_t function_40b860(void) {
    // 0x40b860
    return function_6b40b873();
}

// Address range: 0x40b867 - 0x40b873
int64_t function_40b867(void) {
    // 0x40b867
    __asm_int(-1);
    int64_t result; // 0x40b867
    return result;
}

// Address range: 0x40b87f - 0x40b885
int64_t function_40b87f(void) {
    // 0x40b87f
    int64_t result; // 0x40b87f
    return result;
}

// Address range: 0x40b885 - 0x40b88a
int64_t function_40b885(int64_t a1) {
    // 0x40b885
    int64_t result; // 0x40b885
    return result;
}

// Address range: 0x40b89f - 0x40b8ad
int64_t function_40b89f(void) {
    // 0x40b89f
    __asm_int(-1);
    int64_t result; // 0x40b89f
    return result;
}

// Address range: 0x40b8b3 - 0x40b8b9
int64_t function_40b8b3(void) {
    // 0x40b8b3
    int64_t result; // 0x40b8b3
    return result;
}

// Address range: 0x40b8b9 - 0x40b8ba
int64_t function_40b8b9(void) {
    // 0x40b8b9
    int64_t result; // 0x40b8b9
    return result;
}

// Address range: 0x40b8bb - 0x40b8c6
int64_t function_40b8bb(void) {
    // 0x40b8bb
    return function_ffffffffd938b8c5();
}

// Address range: 0x40b8c7 - 0x40b8c9
int64_t function_40b8c7(void) {
    // 0x40b8c7
    int64_t result; // 0x40b8c7
    return result;
}

// Address range: 0x40b8e5 - 0x40b8f2
int64_t function_40b8e5(void) {
    // 0x40b8e5
    int64_t v1; // 0x40b8e5
    int64_t v2 = v1;
    *(int32_t *)v2 = (int32_t)v2 - 1;
    __asm_out(-1, (int32_t)v1);
    return __asm_int1(v1, v1);
}

// Address range: 0x40b8f7 - 0x40b905
int64_t function_40b8f7(void) {
    // 0x40b8f7
    int64_t v1; // 0x40b8f7
    int64_t v2 = v1;
    int64_t result = (v2 & 0xff00) + v2 & 0xff00 | v2 & -0xff01; // 0x40b8f7
    char * v3 = (char *)result; // 0x40b8f9
    *v3 = *v3 | (char)v2;
    return result;
}

// Address range: 0x40b907 - 0x40b909
int64_t function_40b907(void) {
    // 0x40b907
    int64_t result; // 0x40b907
    return result;
}

// Address range: 0x40b90b - 0x40b911
int64_t function_40b90b(void) {
    // 0x40b90b
    int64_t result; // 0x40b90b
    return result;
}

// Address range: 0x40b913 - 0x40b915
int64_t function_40b913(void) {
    // 0x40b913
    int64_t result; // 0x40b913
    return result;
}

// Address range: 0x40b931 - 0x40b934
int64_t function_40b931(int64_t a1) {
    // 0x40b931
    int64_t result; // 0x40b931
    return result;
}

// Address range: 0x40b937 - 0x40b93d
int64_t function_40b937(void) {
    // 0x40b937
    int64_t result; // 0x40b937
    return result;
}

// Address range: 0x40b93f - 0x40b94e
int64_t function_40b93f(int64_t a1, int64_t a2) {
    // 0x40b93f
    int64_t v1; // 0x40b93f
    *(int32_t *)a2 = (int32_t)v1 - 1;
    int64_t result; // 0x40b93f
    int64_t v2 = result;
    *(char *)v2 = *(char *)&result + (char)v2;
    char * v3 = (char *)(a2 + 0x11fffff5); // 0x40b943
    *v3 = *v3 + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40b94e - 0x40b962
int64_t function_40b94e(void) {
    // 0x40b94e
    int64_t v1; // 0x40b94e
    unsigned char v2 = (char)v1;
    unsigned char v3 = 2 * v2; // 0x40b94e
    *(char *)v1 = v3;
    *(char *)0x91ffffd8 = *(char *)0x91ffffd8 - 40 + (char)(v3 < v2);
    *(char *)v1 = -40;
    return function_ffffffffcb48b961();
}

// Address range: 0x40b968 - 0x40b96e
int64_t function_40b968(int64_t a1, int64_t a2) {
    // 0x40b968
    int64_t v1; // 0x40b968
    __asm_out_5((int16_t)a2, (int32_t)v1);
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40b9a8 - 0x40b9b1
int64_t function_40b9a8(int64_t a1) {
    // 0x40b9a8
    int64_t result; // 0x40b9a8
    return result;
}

// Address range: 0x40b9d4 - 0x40b9dd
int64_t function_40b9d4(int64_t a1) {
    // 0x40b9d4
    int64_t result; // 0x40b9d4
    return result;
}

// Address range: 0x40b9e2 - 0x40b9f0
int64_t function_40b9e2(int64_t a1) {
    // 0x40b9e2
    int64_t v1; // 0x40b9e2
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    unsigned char v3 = (char)a1 % 32; // 0x40b9e4
    if (v3 != 0) {
        int64_t v4; // 0x40b9e2
        unsigned char v5 = *(char *)&v4; // 0x40b9e4
        *(char *)v4 = v5 >> 8 - v3 | v5 << v3;
    }
    int64_t result; // 0x40b9e2
    int64_t v6 = result;
    *(char *)v6 = *(char *)&result + (char)v6;
    int64_t v7 = result;
    *(char *)v7 = *(char *)&result + (char)v7;
    return result;
}

// Address range: 0x40ba03 - 0x40ba07
int64_t function_40ba03(void) {
    // 0x40ba03
    int64_t result; // 0x40ba03
    return result;
}

// Address range: 0x40ba2b - 0x40ba2e
int64_t function_40ba2b(int64_t a1) {
    // 0x40ba2b
    int64_t result; // 0x40ba2b
    return result;
}

// Address range: 0x40ba37 - 0x40ba3b
int64_t function_40ba37(void) {
    // 0x40ba37
    int64_t result; // 0x40ba37
    return result;
}

// Address range: 0x40ba4b - 0x40ba51
int64_t function_40ba4b(void) {
    // 0x40ba4b
    int64_t result; // 0x40ba4b
    return result;
}

// Address range: 0x40ba5f - 0x40ba61
int64_t function_40ba5f(void) {
    // 0x40ba5f
    int64_t result; // 0x40ba5f
    return result;
}

// Address range: 0x40ba64 - 0x40ba70
int64_t function_40ba64(int64_t a1, int64_t a2) {
    // 0x40ba64
    int64_t v1; // 0x40ba64
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    *(int32_t *)v1 = __asm_insd((int16_t)a2);
    return result;
}

// Address range: 0x40ba73 - 0x40ba79
int64_t function_40ba73(void) {
    // 0x40ba73
    int64_t result; // 0x40ba73
    return result;
}

// Address range: 0x40ba94 - 0x40ba9c
int64_t function_40ba94(void) {
    // 0x40ba94
    int64_t result; // 0x40ba94
    return result;
}

// Address range: 0x40baa7 - 0x40baa9
int64_t function_40baa7(void) {
    // 0x40baa7
    int64_t result; // 0x40baa7
    return result;
}

// Address range: 0x40baad - 0x40bab1
int64_t function_40baad(void) {
    // 0x40baad
    int64_t result; // 0x40baad
    return result;
}

// Address range: 0x40bab5 - 0x40baba
int64_t function_40bab5(void) {
    // 0x40bab5
    int64_t v1; // 0x40bab5
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40babb - 0x40babd
int64_t function_40babb(void) {
    // 0x40babb
    int64_t result; // 0x40babb
    return result;
}

// Address range: 0x40babf - 0x40bac2
int64_t function_40babf(void) {
    // 0x40babf
    int64_t result; // 0x40babf
    return result;
}

// Address range: 0x40bad1 - 0x40bad5
int64_t function_40bad1(void) {
    // 0x40bad1
    int64_t v1; // 0x40bad1
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40bae7 - 0x40baf9
int64_t function_40bae7(void) {
    // 0x40bae7
    int64_t v1; // 0x40bae7
    int64_t result = v1;
    *(int32_t *)result = (int32_t)result;
    int64_t v2; // 0x40bae7
    *(char *)v2 = *(char *)&v2 + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40baff - 0x40bb02
int64_t function_40baff(void) {
    // 0x40baff
    int64_t result; // 0x40baff
    return result;
}

// Address range: 0x40bb13 - 0x40bb1e
int64_t function_40bb13(void) {
    // 0x40bb13
    int64_t v1; // 0x40bb13
    int32_t * v2 = (int32_t *)(v1 + 0x7ffffe6); // 0x40bb13
    *v2 = *v2 + 1;
    return function_ffffffffbb9fbb1d();
}

// Address range: 0x40bb1f - 0x40bb22
int64_t function_40bb1f(void) {
    // 0x40bb1f
    int64_t result; // 0x40bb1f
    return result;
}

// Address range: 0x40bb33 - 0x40bb36
int64_t function_40bb33(void) {
    // 0x40bb33
    int64_t result; // 0x40bb33
    return result;
}

// Address range: 0x40bb3c - 0x40bb4d
int64_t function_40bb3c(int64_t a1, uint64_t a2) {
    int64_t result = __asm_wait(a1, a2); // 0x40bb3c
    int64_t v1; // 0x40bb3c
    *(char *)result = (char)result + (char)v1;
    char * v2 = (char *)(v1 + 0x4cffffce); // 0x40bb3f
    *v2 = *v2 + (char)(a2 / 256);
    return result;
}

// Address range: 0x40bb50 - 0x40bb59
int64_t function_40bb50(void) {
    // 0x40bb50
    int64_t result; // 0x40bb50
    return result;
}

// Address range: 0x40bb77 - 0x40bb81
int64_t function_40bb77(void) {
    // 0x40bb77
    return __asm_in(-1);
}

// Address range: 0x40bb84 - 0x40bb88
int64_t function_40bb84(void) {
    // 0x40bb84
    int64_t result; // 0x40bb84
    return result;
}

// Address range: 0x40bb93 - 0x40bb97
int64_t function_40bb93(void) {
    // 0x40bb93
    int64_t result; // 0x40bb93
    return result;
}

// Address range: 0x40bb97 - 0x40bb99
int64_t function_40bb97(void) {
    // 0x40bb97
    int64_t result; // 0x40bb97
    return result;
}

// Address range: 0x40bb99 - 0x40bb9d
int64_t function_40bb99(void) {
    // 0x40bb99
    int64_t v1; // 0x40bb99
    return v1 + 0xffffffff & 0xffffffff;
}

// Address range: 0x40bba7 - 0x40bbaa
int64_t function_40bba7(void) {
    // 0x40bba7
    int64_t result; // 0x40bba7
    return result;
}

// Address range: 0x40bbab - 0x40bbb9
int64_t function_40bbab(int64_t a1) {
    // 0x40bbab
    int64_t result; // 0x40bbab
    int32_t * v1 = (int32_t *)(result + 0xcffffc2); // 0x40bbab
    *v1 = *v1 + 1;
    return result;
}

// Address range: 0x40bbcb - 0x40bbd2
int64_t function_40bbcb(int64_t a1, int64_t a2) {
    int32_t * v1 = (int32_t *)(a1 - 0x76fffff1); // 0x40bbcb
    *v1 = *v1 - 1;
    int64_t result; // 0x40bbcb
    return result;
}

// Address range: 0x40bbd7 - 0x40bbd9
int64_t function_40bbd7(void) {
    // 0x40bbd7
    int64_t result; // 0x40bbd7
    return result;
}

// Address range: 0x40bbe3 - 0x40bbe6
int64_t function_40bbe3(void) {
    // 0x40bbe3
    int64_t result; // 0x40bbe3
    return result;
}

// Address range: 0x40bbe7 - 0x40bbf2
int64_t function_40bbe7(void) {
    // 0x40bbe7
    int64_t result; // 0x40bbe7
    __asm_out(-1, (int32_t)result);
    return result;
}

// Address range: 0x40bbfc - 0x40bc1a
int64_t function_40bbfc(int64_t a1, uint64_t a2) {
    // 0x40bbfc
    int64_t v1; // 0x40bbfc
    int64_t v2 = v1;
    uint64_t v3 = v1;
    *(char *)v2 = (char)(v3 / 256) + (char)v2;
    uint32_t v4 = *(int32_t *)v3 + (int32_t)v3; // 0x40bc05
    int64_t result = v4; // 0x40bc05
    int64_t v5; // 0x40bbfc
    *(char *)a2 = *(char *)&v5 + (char)v4;
    int32_t * v6 = (int32_t *)result; // 0x40bc09
    *v6 = *v6 + v4;
    char * v7 = (char *)(a2 + 0x48ffffcc); // 0x40bc0b
    *v7 = *v7 + (char)(a2 / 256);
    __asm_int(-1);
    return result;
}

// Address range: 0x40bc27 - 0x40bc2c
int64_t function_40bc27(int64_t a1) {
    // 0x40bc27
    int64_t result; // 0x40bc27
    return result;
}

// Address range: 0x40bc33 - 0x40bc35
int64_t function_40bc33(void) {
    // 0x40bc33
    int64_t result; // 0x40bc33
    return result;
}

// Address range: 0x40bc35 - 0x40bc36
int64_t function_40bc35(int64_t a1) {
    // 0x40bc35
    int64_t result; // 0x40bc35
    return result;
}

// Address range: 0x40bc3f - 0x40bc41
int64_t function_40bc3f(void) {
    // 0x40bc3f
    int64_t result; // 0x40bc3f
    return result;
}

// Address range: 0x40bc4b - 0x40bc4d
int64_t function_40bc4b(void) {
    // 0x40bc4b
    int64_t result; // 0x40bc4b
    return result;
}

// Address range: 0x40bc67 - 0x40bc70
int64_t function_40bc67(int64_t a1) {
    // 0x40bc67
    int64_t result; // 0x40bc67
    return result;
}

// Address range: 0x40bc70 - 0x40bc76
int64_t function_40bc70(void) {
    // 0x40bc70
    return function_ffffffffecf0bc75();
}

// Address range: 0x40bc86 - 0x40bc8b
int64_t function_40bc86(int64_t a1) {
    // 0x40bc86
    int64_t v1; // 0x40bc86
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40bc93 - 0x40bc9a
int64_t function_40bc93(void) {
    // 0x40bc93
    int64_t result; // 0x40bc93
    return result;
}

// Address range: 0x40bc9f - 0x40bca1
int64_t function_40bc9f(void) {
    // 0x40bc9f
    int64_t result; // 0x40bc9f
    return result;
}

// Address range: 0x40bca7 - 0x40bca9
int64_t function_40bca7(void) {
    // 0x40bca7
    int64_t result; // 0x40bca7
    return result;
}

// Address range: 0x40bcab - 0x40bcad
int64_t function_40bcab(void) {
    // 0x40bcab
    int64_t result; // 0x40bcab
    return result;
}

// Address range: 0x40bcbb - 0x40bcbd
int64_t function_40bcbb(void) {
    // 0x40bcbb
    int64_t result; // 0x40bcbb
    return result;
}

// Address range: 0x40bcdf - 0x40bce1
int64_t function_40bcdf(void) {
    // 0x40bcdf
    int64_t result; // 0x40bcdf
    return result;
}

// Address range: 0x40bce3 - 0x40bce5
int64_t function_40bce3(void) {
    // 0x40bce3
    int64_t result; // 0x40bce3
    return result;
}

// Address range: 0x40bcef - 0x40bcf5
int64_t function_40bcef(void) {
    // 0x40bcef
    int64_t result; // 0x40bcef
    return result;
}

// Address range: 0x40bcf7 - 0x40bd0a
int64_t function_40bcf7(int64_t a1, int64_t a2) {
    // 0x40bcf7
    int64_t v1; // 0x40bcf7
    *(int32_t *)a2 = (int32_t)v1 - 1;
    int64_t result; // 0x40bcf7
    int64_t v2 = result;
    *(char *)v2 = *(char *)&result + (char)v2;
    int32_t * v3 = (int32_t *)(v1 + 0x4fffffe5); // 0x40bd03
    *v3 = *v3 - 1;
    return result;
}

// Address range: 0x40bd10 - 0x40bd29
int64_t function_40bd10(int64_t a1) {
    // 0x40bd10
    int64_t v1; // 0x40bd10
    int64_t v2 = v1;
    int64_t result = v1;
    // 0x40bd22
    bool v3; // 0x40bd10
    *(int32_t *)v2 = (int32_t)v2 + (int32_t)a1 + (int32_t)v3;
    return result;
    // 0x40bd12
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40bd3c - 0x40bd3e
int64_t function_40bd3c(void) {
    // 0x40bd3c
    int64_t result; // 0x40bd3c
    return result;
}

// Address range: 0x40bde9 - 0x40bded
int64_t function_40bde9(void) {
    // 0x40bde9
    int64_t result; // 0x40bde9
    return result;
}

// Address range: 0x40be72 - 0x40be7d
int64_t function_40be72(void) {
    // 0x40be72
    int64_t result; // 0x40be72
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40bea7 - 0x40bea9
int64_t function_40bea7(void) {
    // 0x40bea7
    int64_t result; // 0x40bea7
    return result;
}

// Address range: 0x40bef1 - 0x40bef3
int64_t function_40bef1(void) {
    // 0x40bef1
    int64_t result; // 0x40bef1
    return result;
}

// Address range: 0x40bf14 - 0x40bf1b
int64_t function_40bf14(int64_t a1) {
    // 0x40bf14
    int64_t result; // 0x40bf14
    return result;
}

// Address range: 0x40bf48 - 0x40bf49
int64_t function_40bf48(int64_t a1) {
    // 0x40bf48
    int64_t result; // 0x40bf48
    return result;
}

// Address range: 0x40bfad - 0x40bfaf
int64_t function_40bfad(void) {
    // 0x40bfad
    int64_t result; // 0x40bfad
    return result;
}

// Address range: 0x40bfd1 - 0x40bfd2
int64_t function_40bfd1(void) {
    // 0x40bfd1
    int64_t result; // 0x40bfd1
    return result;
}

// Address range: 0x40bfd5 - 0x40bfdc
int64_t function_40bfd5(int64_t a1) {
    // 0x40bfd5
    int64_t v1; // 0x40bfd5
    bool v2; // 0x40bfd5
    if (v2 || false) {
        v1 = function_40bfd1();
    }
    int64_t v3 = v1;
    *(char *)v3 = 2 * (char)v3;
    return (v3 + 40) % 256 | v3 & -256;
}

// Address range: 0x40bff7 - 0x40bffe
int64_t function_40bff7(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40bff7
    int64_t v1; // 0x40bff7
    *(char *)a2 = (char)(v1 & a1);
    int64_t result; // 0x40bff7
    int64_t v2 = result;
    *(char *)v2 = *(char *)&result + (char)v2;
    uint64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)(v3 / 256);
    return result;
}

// Address range: 0x40c009 - 0x40c00a
int64_t function_40c009(void) {
    // 0x40c009
    int64_t result; // 0x40c009
    return result;
}

// Address range: 0x40c024 - 0x40c026
int64_t function_40c024(void) {
    // 0x40c024
    int64_t result; // 0x40c024
    return result;
}

// Address range: 0x40c1a8 - 0x40c1aa
int64_t function_40c1a8(void) {
    // 0x40c1a8
    int64_t result; // 0x40c1a8
    return result;
}

// Address range: 0x40c1b5 - 0x40c1b6
int64_t function_40c1b5(void) {
    // 0x40c1b5
    int64_t result; // 0x40c1b5
    return result;
}

// Address range: 0x40c28b - 0x40c2a1
int64_t function_40c28b(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x40c28b
    int64_t v1; // 0x40c28b
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x40c28b
    char * v3 = (char *)(2 * result); // 0x40c296
    *v3 = *v3 & (char)result;
    int64_t v4 = result;
    *(char *)v4 = *(char *)&result + (char)v4;
    int64_t v5; // 0x40c28b
    *(char *)v5 = *(char *)&v5 - 1;
    int64_t v6; // 0x40c28b
    *(char *)a3 = *(char *)&v6 + (char)v1;
    return result;
}

// Address range: 0x40c310 - 0x40c314
int64_t function_40c310(void) {
    // 0x40c310
    int64_t v1; // 0x40c310
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40c373 - 0x40c375
int64_t function_40c373(void) {
    // 0x40c373
    int64_t result; // 0x40c373
    return result;
}

// Address range: 0x40c3aa - 0x40c3ac
int64_t function_40c3aa(void) {
    // 0x40c3aa
    int64_t result; // 0x40c3aa
    return result;
}

// Address range: 0x40c45d - 0x40c461
int64_t function_40c45d(int64_t a1) {
    // 0x40c45d
    int64_t result; // 0x40c45d
    return result;
}

// Address range: 0x40c5fb - 0x40c5fd
int64_t function_40c5fb(void) {
    // 0x40c5fb
    int64_t result; // 0x40c5fb
    return result;
}

// Address range: 0x40c618 - 0x40c61a
int64_t function_40c618(void) {
    // 0x40c618
    int64_t result; // 0x40c618
    return result;
}

// Address range: 0x40c66f - 0x40c671
int64_t function_40c66f(void) {
    // 0x40c66f
    int64_t result; // 0x40c66f
    return result;
}

// Address range: 0x40c6d4 - 0x40c6d5
int64_t function_40c6d4(void) {
    // 0x40c6d4
    int64_t result; // 0x40c6d4
    return result;
}

// Address range: 0x40c719 - 0x40c729
int64_t function_40c719(int64_t a1) {
    // 0x40c719
    int64_t v1; // 0x40c719
    uint64_t v2 = v1;
    *(char *)v2 = (char)(v2 / 256) + (char)v2;
    int64_t result; // 0x40c719
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x40c719
    *(char *)v4 = *(char *)&v4 - 1;
    return result;
}

// Address range: 0x40c736 - 0x40c744
int64_t function_40c736(int64_t a1, int64_t a2) {
    // 0x40c736
    int64_t v1; // 0x40c736
    uint64_t v2 = v1;
    *(char *)v2 = (char)(v2 / 256) + (char)v2;
    int64_t result; // 0x40c736
    *(int32_t *)result = *(int32_t *)&result + 0xefe0000;
    return result;
}

// Address range: 0x40c777 - 0x40c77f
int64_t function_40c777(void) {
    // 0x40c777
    int64_t v1; // 0x40c777
    return 0x9b380000 * v1 & 0xfff80000;
}

// Address range: 0x40c796 - 0x40c7a7
int64_t function_40c796(int64_t a1, int64_t a2) {
    // 0x40c796
    int64_t v1; // 0x40c796
    int64_t v2 = v1;
    bool v3; // 0x40c796
    int64_t result = (v2 - (v3 ? 143 : 142)) % 256 | v2 & -256; // 0x40c79a
    int32_t * v4 = (int32_t *)result; // 0x40c7a3
    *v4 = *v4 + (int32_t)result;
    return result;
}

// Address range: 0x40c7b1 - 0x40c7bd
int64_t function_40c7b1(int64_t a1, int64_t a2) {
    // 0x40c7b1
    int64_t v1; // 0x40c7b1
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40c7c3 - 0x40c7d2
int64_t function_40c7c3(int64_t a1, int64_t a2) {
    // 0x40c7c3
    int64_t result; // 0x40c7c3
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    int64_t v2; // 0x40c7c3
    int64_t v3 = v2;
    *(int32_t *)v3 = *(int32_t *)&v2 + (int32_t)v3;
    return result;
}

// Address range: 0x40c7dc - 0x40c7e0
int64_t function_40c7dc(void) {
    // 0x40c7dc
    int64_t result; // 0x40c7dc
    return result;
}

// Address range: 0x40c801 - 0x40c812
int64_t function_40c801(int64_t a1, int64_t a2) {
    // 0x40c801
    int64_t v1; // 0x40c801
    unsigned char v2 = (char)v1;
    int32_t v3 = *(int32_t *)(v1 + 32); // 0x40c807
    uint32_t v4 = v3 + (int32_t)v1 + (int32_t)(v2 < (char)a2); // 0x40c807
    int64_t result = v4; // 0x40c807
    *(char *)a1 = v2 / 128 | 2 * v2;
    char * v5 = (char *)result; // 0x40c80c
    *v5 = *v5 + (char)v4;
    return result;
}

// Address range: 0x40c8f9 - 0x40c8fb
int64_t function_40c8f9(void) {
    // 0x40c8f9
    int64_t result; // 0x40c8f9
    return result;
}

// Address range: 0x40c916 - 0x40c928
int64_t function_40c916(int64_t a1, int64_t a2) {
    // 0x40c916
    __asm_int(2);
    int64_t v1; // 0x40c916
    unsigned char v2 = (char)v1;
    char v3 = v1; // 0x40c918
    unsigned char v4 = v3 + v2; // 0x40c918
    *(char *)v1 = v4;
    uint32_t v5 = (int32_t)v1; // 0x40c91a
    uint32_t v6 = *(int32_t *)(v1 + 32) + v5; // 0x40c91a
    bool v7 = v4 < v2 ? v6 + (int32_t)(v4 < v2) <= v5 : v6 < v5; // 0x40c91a
    int64_t v8; // 0x40c916
    unsigned char v9 = v3 - *(char *)&v8 + (char)v7; // 0x40c91d
    char * v10 = (char *)(v1 & -256 | (int64_t)v9); // 0x40c91f
    *v10 = v9 + *v10;
    return function_d3fc927();
}

// Address range: 0x40c93c - 0x40c947
int64_t function_40c93c(int64_t a1, int64_t a2) {
    // 0x40c93c
    *(int32_t *)a1 = 0;
    int64_t v1; // 0x40c93c
    int64_t v2 = v1;
    *(char *)v2 = *(char *)&v1 + (char)v2;
    return function_1052c946();
}

// Address range: 0x40c947 - 0x40c94f
int64_t function_40c947(void) {
    // 0x40c947
    int64_t result; // 0x40c947
    int32_t * v1 = (int32_t *)(2 * result + 38); // 0x40c947
    bool v2; // 0x40c947
    *v1 = *v1 + (int32_t)result + (int32_t)v2;
    return result;
}

// Address range: 0x40c95e - 0x40c963
int64_t function_40c95e(void) {
    // 0x40c95e
    return function_7e61c962();
}

// Address range: 0x40c9ab - 0x40c9b0
int64_t function_40c9ab(void) {
    // 0x40c9ab
    return function_1357c9af();
}

// Address range: 0x40c9b8 - 0x40c9bd
int64_t function_40c9b8(void) {
    // 0x40c9b8
    return function_ffffffff9979c9bc();
}

// Address range: 0x40c9bf - 0x40c9d3
int64_t function_40c9bf(uint64_t a1) {
    // 0x40c9bf
    int64_t v1; // 0x40c9bf
    uint64_t v2 = v1;
    char v3 = v2;
    char v4 = v3 + (char)(a1 / 256); // 0x40c9bf
    *(char *)v2 = v4;
    if (a1 != 1 != (v4 == 0)) {
        // 0x40c9c3
        int64_t v5; // 0x40c9bf
        *(char *)v5 = *(char *)&v5 + v3;
    }
    uint64_t v6 = v2 / 256 & v2;
    char * v7 = (char *)(v6 % 256 | v2 & -256); // 0x40c9c9
    *v7 = (char)v6 + (char)((uint64_t)v1 / 256) + *v7;
    return function_ffffffff9661c9d2();
}

// Address range: 0x40c9e8 - 0x40c9f1
int64_t function_40c9e8(int64_t a1, int64_t a2) {
    // 0x40c9e8
    int64_t v1; // 0x40c9e8
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)a2;
    return function_d3fc9f0();
}

// Address range: 0x40ca09 - 0x40ca12
int64_t function_40ca09(void) {
    // 0x40ca09
    int64_t v1; // 0x40ca09
    int64_t v2 = v1;
    *(char *)v2 = (char)v1 + (char)v2;
    return function_d3fca11();
}

// Address range: 0x40ca3a - 0x40ca3c
int64_t function_40ca3a(void) {
    // 0x40ca3a
    int64_t result; // 0x40ca3a
    return result;
}

// Address range: 0x40caec - 0x40caee
int64_t function_40caec(void) {
    // 0x40caec
    int64_t result; // 0x40caec
    return result;
}

// Address range: 0x40cb68 - 0x40cb6d
int64_t function_40cb68(void) {
    // 0x40cb68
    int64_t result; // 0x40cb68
    int32_t v1 = result; // 0x40cb68
    *(int32_t *)result = v1;
    __asm_out(-1, v1);
    return result;
}

// Address range: 0x40cbb1 - 0x40cbba
int64_t function_40cbb1(int64_t a1) {
    // 0x40cbb1
    int64_t result; // 0x40cbb1
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40cbba - 0x40cbbc
int64_t function_40cbba(void) {
    // 0x40cbba
    int64_t result; // 0x40cbba
    return result;
}

// Address range: 0x40cbe6 - 0x40cbea
int64_t function_40cbe6(void) {
    // 0x40cbe6
    int64_t v1; // 0x40cbe6
    return v1 & -256 | (int64_t)__asm_in_2(-1);
}

// Address range: 0x40cc69 - 0x40cc76
int64_t function_40cc69(int64_t a1, int64_t a2) {
    // 0x40cc69
    int64_t v1; // 0x40cc69
    int64_t v2 = v1;
    char v3 = v1; // 0x40cc69
    *(char *)v2 = v3 + (char)v2;
    int64_t v4; // 0x40cc69
    *(char *)a2 = *(char *)&v4 & v3;
    unsigned char v5 = 2 * v3; // 0x40cc6d
    int64_t result = v1 & -256 | (int64_t)v5; // 0x40cc6d
    char * v6 = (char *)result; // 0x40cc6f
    *v6 = *v6 + (char)(v1 / 256);
    __asm_out_1(-1, v5);
    return result;
}

// Address range: 0x40ccb9 - 0x40ccc2
int64_t function_40ccb9(int64_t a1) {
    // 0x40ccb9
    int64_t v1; // 0x40ccb9
    unsigned char v2 = 2 * (char)v1; // 0x40ccb9
    int64_t result = v1 & -256 | (int64_t)v2; // 0x40ccb9
    char * v3 = (char *)result; // 0x40ccbb
    *v3 = *v3 + (char)((uint64_t)v1 / 256);
    __asm_out_1(-1, v2);
    return result;
}

// Address range: 0x40cdfc - 0x40ce04
int64_t function_40cdfc(void) {
    // 0x40cdfc
    int64_t v1; // 0x40cdfc
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return __asm_in(-1);
}

// Address range: 0x40ce0d - 0x40ce0f
int64_t function_40ce0d(void) {
    // 0x40ce0d
    int64_t result; // 0x40ce0d
    return result;
}

// Address range: 0x40ce2b - 0x40ce2d
int64_t function_40ce2b(void) {
    // 0x40ce2b
    int64_t result; // 0x40ce2b
    return result;
}

// Address range: 0x40ce35 - 0x40ce37
int64_t function_40ce35(void) {
    // 0x40ce35
    int64_t result; // 0x40ce35
    return result;
}

// Address range: 0x40ce49 - 0x40ce4b
int64_t function_40ce49(void) {
    // 0x40ce49
    int64_t result; // 0x40ce49
    return result;
}

// Address range: 0x40ce5d - 0x40ce5f
int64_t function_40ce5d(void) {
    // 0x40ce5d
    int64_t result; // 0x40ce5d
    return result;
}

// Address range: 0x40ce6e - 0x40ce70
int64_t function_40ce6e(void) {
    // 0x40ce6e
    int64_t result; // 0x40ce6e
    return result;
}

// Address range: 0x40ce79 - 0x40ce7e
int64_t function_40ce79(int64_t a1, int64_t a2) {
    // 0x40ce79
    int64_t result; // 0x40ce79
    return result;
}

// Address range: 0x40ce96 - 0x40ce98
int64_t function_40ce96(void) {
    // 0x40ce96
    int64_t result; // 0x40ce96
    return result;
}

// Address range: 0x40ce98 - 0x40cea2
int64_t function_40ce98(int64_t a1, int64_t a2) {
    // 0x40ce98
    int64_t v1; // 0x40ce98
    uint64_t v2 = v1 + 1; // 0x40ce98
    int64_t result = v2 % 256 | v1 & -256; // 0x40ce98
    char * v3 = (char *)result; // 0x40ce9a
    *v3 = *v3 + (char)v2;
    return result;
}

// Address range: 0x40ceb4 - 0x40ceb6
int64_t function_40ceb4(void) {
    // 0x40ceb4
    int64_t result; // 0x40ceb4
    return result;
}

// Address range: 0x40cec8 - 0x40ceca
int64_t function_40cec8(void) {
    // 0x40cec8
    int64_t result; // 0x40cec8
    return result;
}

// Address range: 0x40ced2 - 0x40ced4
int64_t function_40ced2(void) {
    // 0x40ced2
    int64_t result; // 0x40ced2
    return result;
}

// Address range: 0x40cee6 - 0x40cee8
int64_t function_40cee6(void) {
    // 0x40cee6
    int64_t result; // 0x40cee6
    return result;
}

// Address range: 0x40cef0 - 0x40cef2
int64_t function_40cef0(void) {
    // 0x40cef0
    int64_t result; // 0x40cef0
    return result;
}

// Address range: 0x40cefa - 0x40cefc
int64_t function_40cefa(void) {
    // 0x40cefa
    int64_t result; // 0x40cefa
    return result;
}

// Address range: 0x40cf04 - 0x40cf06
int64_t function_40cf04(void) {
    // 0x40cf04
    int64_t result; // 0x40cf04
    return result;
}

// Address range: 0x40cf1f - 0x40cf21
int64_t function_40cf1f(void) {
    // 0x40cf1f
    int64_t result; // 0x40cf1f
    return result;
}

// Address range: 0x40cf21 - 0x40cf2b
int64_t function_40cf21(int64_t a1) {
    // 0x40cf21
    int64_t v1; // 0x40cf21
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40cf63 - 0x40cf6e
int64_t function_40cf63(int64_t a1) {
    // 0x40cf63
    int64_t v1; // 0x40cf63
    return v1 | 255;
}

// Address range: 0x40cf74 - 0x40cf78
int64_t function_40cf74(int64_t a1) {
    // 0x40cf74
    int64_t result; // 0x40cf74
    return result;
}

// Address range: 0x40cf90 - 0x40cf96
int64_t function_40cf90(int64_t a1) {
    // 0x40cf90
    int64_t result; // 0x40cf90
    return result;
}

// Address range: 0x40cf9c - 0x40cfb1
int64_t function_40cf9c(int64_t a1) {
    // 0x40cf9c
    int64_t v1; // 0x40cf9c
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40cf9c
    *(char *)v3 = *(char *)&v3 + (char)(v1 / 256);
    return __asm_sti(a1 | 255, v1, v1);
}

// Address range: 0x40cfb7 - 0x40cfbb
int64_t function_40cfb7(int64_t a1, int64_t a2) {
    // 0x40cfb7
    int64_t result; // 0x40cfb7
    return result;
}

// Address range: 0x40cfc8 - 0x40cfcc
int64_t function_40cfc8(int64_t a1, int64_t a2) {
    // 0x40cfc8
    int64_t result; // 0x40cfc8
    return result;
}

// Address range: 0x40cfcd - 0x40cfd6
int64_t function_40cfcd(void) {
    // 0x40cfcd
    int64_t v1; // 0x40cfcd
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40cfcd
    *(char *)v3 = *(char *)&v3 + (char)(v1 / 256);
    return v1 & 0xffffffff;
}

// Address range: 0x40cfe4 - 0x40cffe
int64_t function_40cfe4(int64_t a1, int64_t a2) {
    // 0x40cfe4
    int64_t v1; // 0x40cfe4
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x40cfe4
    *(char *)result = *(char *)&result + (char)(v1 / 256);
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    *(int32_t *)result = *(int32_t *)&result + (int32_t)v1;
    return result;
}

// Address range: 0x40cfff - 0x40d019
int64_t function_40cfff(int64_t a1, int64_t a2) {
    // 0x40cfff
    int64_t v1; // 0x40cfff
    int64_t v2 = v1;
    *(int32_t *)v2 = 2 * (int32_t)v2;
    int64_t v3; // 0x40cfff
    *(char *)v3 = *(char *)&v3 + (char)((uint64_t)v1 / 256);
    return v3 + 0xffb6b638 & 0xffffffff;
}

// Address range: 0x40d029 - 0x40d02d
int64_t function_40d029(void) {
    // 0x40d029
    int64_t result; // 0x40d029
    return result;
}

// Address range: 0x40d045 - 0x40d04b
int64_t function_40d045(void) {
    // 0x40d045
    int64_t result; // 0x40d045
    return result;
}

// Address range: 0x40d053 - 0x40d055
int64_t function_40d053(void) {
    // 0x40d053
    int64_t result; // 0x40d053
    return result;
}

// Address range: 0x40d071 - 0x40d073
int64_t function_40d071(void) {
    // 0x40d071
    int64_t result; // 0x40d071
    return result;
}

// Address range: 0x40d09d - 0x40d09f
int64_t function_40d09d(void) {
    // 0x40d09d
    int64_t result; // 0x40d09d
    return result;
}

// Address range: 0x40d0b1 - 0x40d0b3
int64_t function_40d0b1(void) {
    // 0x40d0b1
    int64_t result; // 0x40d0b1
    return result;
}

// Address range: 0x40d0cc - 0x40d0ce
int64_t function_40d0cc(void) {
    // 0x40d0cc
    int64_t result; // 0x40d0cc
    return result;
}

// Address range: 0x40d113 - 0x40d115
int64_t function_40d113(void) {
    // 0x40d113
    int64_t result; // 0x40d113
    return result;
}

// Address range: 0x40d11d - 0x40d11f
int64_t function_40d11d(void) {
    // 0x40d11d
    int64_t result; // 0x40d11d
    return result;
}

// Address range: 0x40d127 - 0x40d129
int64_t function_40d127(void) {
    // 0x40d127
    int64_t result; // 0x40d127
    return result;
}

// Address range: 0x40d149 - 0x40d14b
int64_t function_40d149(void) {
    // 0x40d149
    int64_t result; // 0x40d149
    return result;
}

// Address range: 0x40d15a - 0x40d15c
int64_t function_40d15a(void) {
    // 0x40d15a
    int64_t result; // 0x40d15a
    return result;
}

// Address range: 0x40d15e - 0x40d16d
int64_t function_40d15e(int64_t a1) {
    // 0x40d15e
    int64_t v1; // 0x40d15e
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3 = *(char *)(v2 + 0x11ffffc1) < (char)a1 ? 0xffc1e639 : 0xffc1e638; // 0x40d166
    return v2 - v3 & 0xffffffff;
}

// Address range: 0x40d16d - 0x40d180
int64_t function_40d16d(int64_t a1, int64_t a2) {
    // 0x40d16d
    int64_t result; // 0x40d16d
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    char * v2 = (char *)(v1 + 0x38000000); // 0x40d176
    *v2 = *v2 & (char)(result / 256);
    *(int32_t *)(int64_t)((int32_t)result >> 31) = (int32_t)result;
    return result;
}

// Address range: 0x40d180 - 0x40d187
int64_t function_40d180(void) {
    // 0x40d180
    int64_t v1; // 0x40d180
    int64_t v2 = v1;
    uint64_t v3 = (uint64_t)v1 / 256; // 0x40d180
    *(char *)v2 = (char)(v2 & v3);
    int64_t result; // 0x40d180
    int64_t v4 = result;
    *(char *)v4 = *(char *)&result + (char)v4;
    *(char *)result = *(char *)&result + (char)v3;
    return result;
}

// Address range: 0x40d187 - 0x40d18a
int64_t function_40d187(void) {
    // 0x40d187
    int64_t result; // 0x40d187
    return result;
}

// Address range: 0x40d18a - 0x40d194
int64_t function_40d18a(void) {
    // 0x40d18a
    int64_t v1; // 0x40d18a
    char * v2 = (char *)(v1 + 0x380a0000); // 0x40d18a
    *v2 = *v2 - (char)(v1 / 256);
    return __asm_hlt(v1, v1, v1);
}

// Address range: 0x40d195 - 0x40d199
int64_t function_40d195(void) {
    // 0x40d195
    int64_t result; // 0x40d195
    return result;
}

// Address range: 0x40d1a1 - 0x40d1a3
int64_t function_40d1a1(void) {
    // 0x40d1a1
    int64_t result; // 0x40d1a1
    return result;
}

// Address range: 0x40d1a4 - 0x40d1a6
int64_t function_40d1a4(void) {
    // 0x40d1a4
    int64_t result; // 0x40d1a4
    return result;
}

// Address range: 0x40d1ac - 0x40d1ad
int64_t function_40d1ac(void) {
    // 0x40d1ac
    int64_t result; // 0x40d1ac
    return result;
}

// Address range: 0x40d1ae - 0x40d1b0
int64_t function_40d1ae(void) {
    // 0x40d1ae
    int64_t result; // 0x40d1ae
    return result;
}

// Address range: 0x40d1b6 - 0x40d1b7
int64_t function_40d1b6(void) {
    // 0x40d1b6
    int64_t result; // 0x40d1b6
    return result;
}

// Address range: 0x40d1bf - 0x40d1c1
int64_t function_40d1bf(void) {
    // 0x40d1bf
    int64_t result; // 0x40d1bf
    return result;
}

// Address range: 0x40d1d0 - 0x40d1d2
int64_t function_40d1d0(void) {
    // 0x40d1d0
    int64_t result; // 0x40d1d0
    return result;
}

// Address range: 0x40d1d2 - 0x40d1d5
int64_t function_40d1d2(int64_t a1) {
    // 0x40d1d2
    int64_t result; // 0x40d1d2
    return result;
}

// Address range: 0x40d1e4 - 0x40d1e6
int64_t function_40d1e4(void) {
    // 0x40d1e4
    int64_t result; // 0x40d1e4
    return result;
}

// Address range: 0x40d1f8 - 0x40d1fa
int64_t function_40d1f8(void) {
    // 0x40d1f8
    int64_t result; // 0x40d1f8
    return result;
}

// Address range: 0x40d202 - 0x40d204
int64_t function_40d202(void) {
    // 0x40d202
    int64_t result; // 0x40d202
    return result;
}

// Address range: 0x40d20c - 0x40d20e
int64_t function_40d20c(void) {
    // 0x40d20c
    int64_t result; // 0x40d20c
    return result;
}

// Address range: 0x40d216 - 0x40d218
int64_t function_40d216(void) {
    // 0x40d216
    int64_t result; // 0x40d216
    return result;
}

// Address range: 0x40d227 - 0x40d237
int64_t function_40d227(void) {
    // 0x40d227
    return function_1240d1fe();
}

// Address range: 0x40d23c - 0x40d23e
int64_t function_40d23c(void) {
    // 0x40d23c
    int64_t result; // 0x40d23c
    return result;
}

// Address range: 0x40d25a - 0x40d25c
int64_t function_40d25a(void) {
    // 0x40d25a
    int64_t result; // 0x40d25a
    return result;
}

// Address range: 0x40d264 - 0x40d26d
int64_t function_40d264(void) {
    // 0x40d264
    int64_t v1; // 0x40d264
    bool v2; // 0x40d264
    return v1 - (v2 ? 0xffc98739 : 0xffc98738) & 0xffffffff;
}

// Address range: 0x40d275 - 0x40d277
int64_t function_40d275(void) {
    // 0x40d275
    int64_t result; // 0x40d275
    return result;
}

// Address range: 0x40d27f - 0x40d292
int64_t function_40d27f(void) {
    // 0x40d27f
    int64_t v1; // 0x40d27f
    int32_t * v2 = (int32_t *)(v1 + 0x1000026); // 0x40d27f
    *v2 = *v2 - 1;
    __asm_int(-1);
    return v1 + 0xffcd1c38 & 0xffffffff;
}

// Address range: 0x40d2ab - 0x40d2b0
int64_t function_40d2ab(void) {
    // 0x40d2ab
    __asm_int(-1);
    int64_t result; // 0x40d2ab
    return result;
}

// Address range: 0x40d2b6 - 0x40d2ba
int64_t function_40d2b6(void) {
    // 0x40d2b6
    __asm_int(-1);
    int64_t result; // 0x40d2b6
    return result;
}

// Address range: 0x40d2c2 - 0x40d2c4
int64_t function_40d2c2(void) {
    // 0x40d2c2
    int64_t result; // 0x40d2c2
    return result;
}

// Address range: 0x40d2d2 - 0x40d2d8
int64_t function_40d2d2(int64_t a1, int64_t a2) {
    // 0x40d2d2
    int64_t result; // 0x40d2d2
    return result;
}

// Address range: 0x40d2d9 - 0x40d2f6
int64_t function_40d2d9(int64_t a1, int64_t a2) {
    // 0x40d2d9
    int64_t v1; // 0x40d2d9
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40d2d9
    *(char *)v3 = *(char *)&v3 + (char)((uint64_t)v1 / 256);
    unsigned char v4 = *(char *)0x60002f628ffffd0; // 0x40d2dd
    int64_t result = v3 & -256 | (int64_t)v4; // 0x40d2dd
    int64_t v5; // 0x40d2d9
    *(int32_t *)a2 = *(int32_t *)&v5 ^ (int32_t)result;
    char * v6 = (char *)result; // 0x40d2ee
    *v6 = *v6 + v4;
    return result;
}

// Address range: 0x40d2f8 - 0x40d300
int64_t function_40d2f8(void) {
    // 0x40d2f8
    int64_t result; // 0x40d2f8
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40d300 - 0x40d30a
int64_t function_40d300(int64_t a1) {
    // 0x40d300
    int64_t v1; // 0x40d300
    int64_t result = v1 & 0xffffffff; // 0x40d300
    char * v2 = (char *)result; // 0x40d302
    *v2 = *v2 + (char)v1;
    return result;
}

// Address range: 0x40d30b - 0x40d31b
int64_t function_40d30b(int64_t a1, int64_t a2) {
    // 0x40d30b
    int64_t v1; // 0x40d30b
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40d30b
    *(char *)v3 = *(char *)&v3 + (char)((uint64_t)v1 / 256);
    return v3 | 56;
}

// Address range: 0x40d31b - 0x40d325
int64_t function_40d31b(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40d31b
    int64_t v1; // 0x40d31b
    *(char *)a3 = 2 * (char)v1;
    int64_t v2; // 0x40d31b
    *(char *)v2 = *(char *)&v2 + (char)(v1 / 256);
    return v1 & 0xffffffff;
}

// Address range: 0x40d325 - 0x40d340
int64_t function_40d325(int64_t a1, int64_t a2) {
    // 0x40d325
    int64_t v1; // 0x40d325
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t v3; // 0x40d325
    int64_t v4 = v3;
    *(char *)v4 = *(char *)&v3 + (char)v4;
    int64_t v5 = *(char *)(v1 + 0x11ffffd1) < (char)v1 ? 0xffd1d239 : 0xffd1d238; // 0x40d339
    return v3 - v5 & 0xffffffff;
}

// Address range: 0x40d342 - 0x40d354
int64_t function_40d342(int64_t a1) {
    // 0x40d342
    int64_t result; // 0x40d342
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    int32_t * v2 = (int32_t *)(result - 72); // 0x40d348
    *v2 = *v2 + 1;
    return result;
}

// Address range: 0x40d354 - 0x40d35e
int64_t function_40d354(int64_t a1, int64_t a2) {
    // 0x40d354
    int64_t result; // 0x40d354
    int64_t v1 = result;
    __asm_int(2);
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40d360 - 0x40d368
int64_t function_40d360(int64_t a1, int64_t a2) {
    // 0x40d360
    int64_t result; // 0x40d360
    int64_t v1 = result;
    *(char *)v1 = (char)result + (char)v1;
    return result;
}

// Address range: 0x40d36a - 0x40d372
int64_t function_40d36a(int64_t a1, int64_t a2) {
    // 0x40d36a
    int64_t v1; // 0x40d36a
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40d378 - 0x40d37c
int64_t function_40d378(int64_t a1) {
    // 0x40d378
    int64_t result; // 0x40d378
    return result;
}

// Address range: 0x40d390 - 0x40d391
int64_t function_40d390(void) {
    // 0x40d390
    int64_t result; // 0x40d390
    return result;
}

// Address range: 0x40d3d0 - 0x40d3e0
int64_t function_40d3d0(int64_t a1, int64_t a2) {
    // 0x40d3d0
    int64_t result; // 0x40d3d0
    int32_t * v1 = (int32_t *)(result + 0x1000026); // 0x40d3d4
    *v1 = *v1 - 1;
    return result;
}

// Address range: 0x40d3ef - 0x40d3f1
int64_t function_40d3ef(void) {
    // 0x40d3ef
    int64_t result; // 0x40d3ef
    return result;
}

// Address range: 0x40d40a - 0x40d40c
int64_t function_40d40a(void) {
    // 0x40d40a
    int64_t result; // 0x40d40a
    return result;
}

// Address range: 0x40d414 - 0x40d416
int64_t function_40d414(void) {
    // 0x40d414
    int64_t result; // 0x40d414
    return result;
}

// Address range: 0x40d428 - 0x40d42a
int64_t function_40d428(void) {
    // 0x40d428
    int64_t result; // 0x40d428
    return result;
}

// Address range: 0x40d480 - 0x40d482
int64_t function_40d480(void) {
    // 0x40d480
    int64_t result; // 0x40d480
    return result;
}

// Address range: 0x40d48a - 0x40d48e
int64_t function_40d48a(int64_t a1) {
    // 0x40d48a
    int64_t result; // 0x40d48a
    int32_t * v1 = (int32_t *)(result + 17); // 0x40d48a
    *v1 = *v1 + 1;
    return result;
}

// Address range: 0x40d494 - 0x40d496
int64_t function_40d494(void) {
    // 0x40d494
    int64_t result; // 0x40d494
    return result;
}

// Address range: 0x40d4bc - 0x40d4be
int64_t function_40d4bc(void) {
    // 0x40d4bc
    int64_t result; // 0x40d4bc
    return result;
}

// Address range: 0x40d4d7 - 0x40d4dc
int64_t function_40d4d7(int64_t a1) {
    // 0x40d4d7
    int64_t result; // 0x40d4d7
    return result;
}

// Address range: 0x40d4e2 - 0x40d4e6
int64_t function_40d4e2(void) {
    // 0x40d4e2
    int64_t result; // 0x40d4e2
    return result;
}

// Address range: 0x40d4ec - 0x40d4f0
int64_t function_40d4ec(void) {
    // 0x40d4ec
    int64_t result; // 0x40d4ec
    return result;
}

// Address range: 0x40d4f1 - 0x40d4f8
int64_t function_40d4f1(int64_t a1) {
    // 0x40d4f1
    int64_t v1; // 0x40d4f1
    int64_t v2 = v1;
    *(int32_t *)v2 = 2 * (int32_t)v2;
    int64_t result; // 0x40d4f1
    *(char *)result = *(char *)&result + (char)((uint64_t)v1 / 256);
    return result;
}

// Address range: 0x40d506 - 0x40d50b
int64_t function_40d506(int64_t a1) {
    // 0x40d506
    int64_t result; // 0x40d506
    return result;
}

// Address range: 0x40d50b - 0x40d515
int64_t function_40d50b(int64_t a1) {
    // 0x40d50b
    int64_t v1; // 0x40d50b
    bool v2; // 0x40d50b
    return v1 - (v2 ? 0x38000001 : 0x38000000) & 0xffffffff;
}

// Address range: 0x40d524 - 0x40d533
int64_t function_40d524(int64_t a1) {
    // 0x40d524
    int64_t v1; // 0x40d524
    int32_t * v2 = (int32_t *)(v1 - 74); // 0x40d527
    *v2 = *v2 + 1;
    return 0x8f38ffff;
}

// Address range: 0x40d542 - 0x40d547
int64_t function_40d542(void) {
    // 0x40d542
    int64_t v1; // 0x40d542
    return v1 & 0xffffffff;
}

// Address range: 0x40d561 - 0x40d56c
int64_t function_40d561(int64_t a1, int64_t a2) {
    // 0x40d561
    int64_t result; // 0x40d561
    return result;
}

// Address range: 0x40d574 - 0x40d576
int64_t function_40d574(void) {
    // 0x40d574
    int64_t result; // 0x40d574
    return result;
}

// Address range: 0x40d57e - 0x40d580
int64_t function_40d57e(void) {
    // 0x40d57e
    int64_t result; // 0x40d57e
    return result;
}

// Address range: 0x40d588 - 0x40d58a
int64_t function_40d588(void) {
    // 0x40d588
    int64_t result; // 0x40d588
    return result;
}

// Address range: 0x40d598 - 0x40d59e
int64_t function_40d598(int64_t a1, int64_t a2) {
    // 0x40d598
    int64_t result; // 0x40d598
    return result;
}

// Address range: 0x40d5ad - 0x40d5af
int64_t function_40d5ad(void) {
    // 0x40d5ad
    int64_t result; // 0x40d5ad
    return result;
}

// Address range: 0x40d5cb - 0x40d5cd
int64_t function_40d5cb(void) {
    // 0x40d5cb
    int64_t result; // 0x40d5cb
    return result;
}

// Address range: 0x40d5d3 - 0x40d5d7
int64_t function_40d5d3(void) {
    // 0x40d5d3
    int64_t result; // 0x40d5d3
    __asm_out(-1, (int32_t)result);
    return result;
}

// Address range: 0x40d5e0 - 0x40d5e8
int64_t function_40d5e0(int64_t a1, int64_t a2) {
    // 0x40d5e0
    int64_t v1; // 0x40d5e0
    int32_t * v2 = (int32_t *)(v1 + 56); // 0x40d5e0
    bool v3; // 0x40d5e0
    *v2 = *v2 + (int32_t)a2 + (int32_t)v3;
    __asm_out((char)a1, (int32_t)v1);
    return v1 & 0xffffffff;
}

// Address range: 0x40d600 - 0x40d60d
int64_t function_40d600(int64_t a1, int64_t a2) {
    // 0x40d600
    int64_t result; // 0x40d600
    int32_t v1 = result; // 0x40d602
    __asm_out(-1, v1);
    __asm_out(-1, v1);
    return result;
}

// Address range: 0x40d61d - 0x40d622
int64_t function_40d61d(void) {
    // 0x40d61d
    return function_fffffffff3c1d621();
}

// Address range: 0x40d627 - 0x40d62c
int64_t function_40d627(void) {
    // 0x40d627
    return function_1754d62b();
}

// Address range: 0x40d62c - 0x40d633
int64_t function_40d62c(int64_t a1, int64_t a2) {
    // 0x40d62c
    return function_2e61d632();
}

// Address range: 0x40d652 - 0x40d654
int64_t function_40d652(void) {
    // 0x40d652
    int64_t result; // 0x40d652
    return result;
}

// Address range: 0x40d656 - 0x40d665
int64_t function_40d656(int64_t a1, int64_t a2) {
    // 0x40d656
    int64_t v1; // 0x40d656
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return v2 + 0xffee2338 & 0xffffffff;
}

// Address range: 0x40d66d - 0x40d66f
int64_t function_40d66d(void) {
    // 0x40d66d
    int64_t result; // 0x40d66d
    return result;
}

// Address range: 0x40d677 - 0x40d679
int64_t function_40d677(void) {
    // 0x40d677
    int64_t result; // 0x40d677
    return result;
}

// Address range: 0x40d681 - 0x40d683
int64_t function_40d681(void) {
    // 0x40d681
    int64_t result; // 0x40d681
    return result;
}

// Address range: 0x40d68b - 0x40d68d
int64_t function_40d68b(void) {
    // 0x40d68b
    int64_t result; // 0x40d68b
    return result;
}

// Address range: 0x40d69f - 0x40d6a1
int64_t function_40d69f(void) {
    // 0x40d69f
    int64_t result; // 0x40d69f
    return result;
}

// Address range: 0x40d6b0 - 0x40d6b2
int64_t function_40d6b0(void) {
    // 0x40d6b0
    int64_t result; // 0x40d6b0
    return result;
}

// Address range: 0x40d6cb - 0x40d6cd
int64_t function_40d6cb(void) {
    // 0x40d6cb
    int64_t result; // 0x40d6cb
    return result;
}

// Address range: 0x40d6d5 - 0x40d6d7
int64_t function_40d6d5(void) {
    // 0x40d6d5
    int64_t result; // 0x40d6d5
    return result;
}

// Address range: 0x40d6e9 - 0x40d6eb
int64_t function_40d6e9(void) {
    // 0x40d6e9
    int64_t result; // 0x40d6e9
    return result;
}

// Address range: 0x40d704 - 0x40d706
int64_t function_40d704(void) {
    // 0x40d704
    int64_t result; // 0x40d704
    return result;
}

// Address range: 0x40d706 - 0x40d707
int64_t function_40d706(void) {
    // 0x40d706
    int64_t result; // 0x40d706
    return result;
}

// Address range: 0x40d70e - 0x40d710
int64_t function_40d70e(void) {
    // 0x40d70e
    int64_t result; // 0x40d70e
    return result;
}

// Address range: 0x40d718 - 0x40d71a
int64_t function_40d718(void) {
    // 0x40d718
    int64_t result; // 0x40d718
    return result;
}

// Address range: 0x40d722 - 0x40d724
int64_t function_40d722(void) {
    // 0x40d722
    int64_t result; // 0x40d722
    return result;
}

// Address range: 0x40d744 - 0x40d746
int64_t function_40d744(void) {
    // 0x40d744
    int64_t result; // 0x40d744
    return result;
}

// Address range: 0x40d746 - 0x40d751
int64_t function_40d746(int64_t a1, int64_t a2) {
    // 0x40d746
    int64_t result; // 0x40d746
    char * v1 = (char *)result; // 0x40d748
    *v1 = *v1 + (char)result;
    return result;
}

// Address range: 0x40d77a - 0x40d77c
int64_t function_40d77a(void) {
    // 0x40d77a
    int64_t result; // 0x40d77a
    return result;
}

// Address range: 0x40d784 - 0x40d786
int64_t function_40d784(void) {
    // 0x40d784
    int64_t result; // 0x40d784
    return result;
}

// Address range: 0x40d7b7 - 0x40d7b9
int64_t function_40d7b7(void) {
    // 0x40d7b7
    int64_t result; // 0x40d7b7
    return result;
}

// Address range: 0x40d7f7 - 0x40d7f9
int64_t function_40d7f7(void) {
    // 0x40d7f7
    int64_t result; // 0x40d7f7
    return result;
}

// Address range: 0x40d808 - 0x40d80a
int64_t function_40d808(void) {
    // 0x40d808
    int64_t result; // 0x40d808
    return result;
}

// Address range: 0x40d812 - 0x40d814
int64_t function_40d812(void) {
    // 0x40d812
    int64_t result; // 0x40d812
    return result;
}

// Address range: 0x40d81c - 0x40d81e
int64_t function_40d81c(void) {
    // 0x40d81c
    int64_t result; // 0x40d81c
    return result;
}

// Address range: 0x40d914 - 0x40d925
int64_t function_40d914(int64_t a1) {
    // 0x40d914
    int64_t v1; // 0x40d914
    int64_t v2 = v1 + 0xa18bfd07; // 0x40d914
    int64_t result = v2 & 0xffffffff; // 0x40d914
    char * v3 = (char *)result; // 0x40d919
    char v4 = v2; // 0x40d919
    *v3 = *v3 + v4;
    int32_t * v5 = (int32_t *)(v1 - 63); // 0x40d91b
    *v5 = *v5 + (int32_t)v1;
    *v3 = *v3 + v4;
    return result;
}

// Address range: 0x40d943 - 0x40d94f
int64_t function_40d943(int64_t a1, uint64_t a2) {
    // 0x40d943
    int64_t v1; // 0x40d943
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x40d943
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x40d943
    char v5 = *(char *)(v4 + 2 * v1); // 0x40d947
    int64_t v6; // 0x40d943
    *(char *)a1 = *(char *)&v6 + (char)result;
    int32_t v7 = *(int32_t *)&v4; // 0x40d94d
    __asm_outsd((int16_t)(256 * (int64_t)(v5 + (char)(a2 / 256)) | a2 % 256), v7);
    return result;
}

// Address range: 0x40d968 - 0x40d96f
int64_t function_40d968(int64_t a1) {
    // 0x40d968
    int64_t v1; // 0x40d968
    int64_t result = v1;
    *(char *)result = 2 * (char)result;
    return result;
}

// Address range: 0x40d96f - 0x40d97d
int64_t function_40d96f(int64_t a1, uint64_t a2) {
    // 0x40d96f
    int64_t v1; // 0x40d96f
    int64_t v2 = v1;
    char v3 = *(char *)(2 * ((256 * v1 | v2) & 0xff00 | v2 & 0x7fffffffffff00ff) + v1); // 0x40d975
    *(char *)a1 = (char)v1;
    int64_t v4; // 0x40d96f
    int32_t v5 = *(int32_t *)&v4; // 0x40d97b
    __asm_outsd((int16_t)(256 * (int64_t)(v3 + (char)(a2 / 256)) | a2 % 256), v5);
    return v1 & -256;
}

// Address range: 0x40d9b8 - 0x40d9cf
int64_t function_40d9b8(int64_t a1, int64_t a2) {
    // 0x40d9b8
    int64_t v1; // 0x40d9b8
    *(char *)a2 = (char)v1 + (char)a1;
    int64_t result; // 0x40d9b8
    int64_t v2 = result;
    *(char *)v2 = *(char *)&result + (char)v2;
    int32_t * v3 = (int32_t *)(v1 - 58); // 0x40d9c0
    *v3 = *v3 + (int32_t)v1;
    int64_t v4 = result;
    *(char *)v4 = *(char *)&result + (char)v4;
    int64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)v5;
    return result;
}

// Address range: 0x40da78 - 0x40daa6
int64_t function_40da78(int64_t a1, int64_t a2) {
    // 0x40da78
    int64_t v1; // 0x40da78
    *(char *)a1 = (char)(v1 | a2);
    uint64_t v2 = v1 + 111; // 0x40da7a
    int64_t v3 = v2 % 256 | v1 & -256; // 0x40da7a
    char * v4 = (char *)v3; // 0x40da7d
    *v4 = *v4 + (char)v2;
    int64_t v5; // 0x40da78
    char v6 = *(char *)&v5; // 0x40da7f
    int64_t v7 = v3 + 0x58051108; // 0x40da81
    int64_t v8 = v7 | 17; // 0x40da86
    uint64_t v9 = v8 + 128; // 0x40da8f
    int64_t result = (v8 + 17 & 254 | v7 & 0xffffff00) + 0x11041359 & 0xffffff00 | v9 % 256; // 0x40da8f
    float80_t v10; // 0x40da78
    *(int64_t *)0x740da9c = (int64_t)v10;
    char * v11 = (char *)result; // 0x40da9e
    char v12 = v9; // 0x40da9e
    *v11 = *v11 + v12;
    int64_t v13; // 0x40da78
    *(char *)v13 = *(char *)&v13 + v12;
    int64_t v14; // 0x40da78
    int32_t v15 = *(int32_t *)&v14; // 0x40daa2
    __asm_outsd((int16_t)(a2 & 0xff00 | (int64_t)(v6 | (char)a2)), v15);
    return result;
}

// Address range: 0x40daf0 - 0x40daf7
int64_t function_40daf0(int64_t a1) {
    // 0x40daf0
    int64_t v1; // 0x40daf0
    uint64_t result = v1;
    char * v2 = (char *)(result + 0x6f0a0000); // 0x40daf0
    *v2 = *v2 - (char)(result / 256);
    return result;
}

// Address range: 0x40de4e - 0x40de55
int64_t function_40de4e(int64_t a1, int64_t a2) {
    // 0x40de4e
    int64_t v1; // 0x40de4e
    *(char *)a1 = (char)v1 - 1;
    int64_t result; // 0x40de4e
    int64_t v2 = result;
    *(char *)v2 = *(char *)&result + (char)v2;
    int64_t v3; // 0x40de4e
    __asm_outsd((int16_t)a2, *(int32_t *)&v3);
    return result;
}

// Address range: 0x40df5d - 0x40df71
int64_t function_40df5d(uint64_t a1, int64_t a2) {
    // 0x40df5d
    int64_t v1; // 0x40df5d
    uint64_t v2 = v1 + 0xfff60107; // 0x40df5d
    int64_t result = v2 & 0xffffffff; // 0x40df5d
    char * v3 = (char *)(v1 - 41); // 0x40df62
    *v3 = *v3 + (char)(a1 / 256);
    char * v4 = (char *)result; // 0x40df65
    *v4 = 2 * (char)v2 + *v4;
    char * v5 = (char *)(v1 + 43); // 0x40df6b
    *v5 = *v5 + (char)(v2 / 256);
    int32_t * v6 = (int32_t *)result; // 0x40df6e
    *v6 = *v6 | (int32_t)v1;
    return result;
}

// Address range: 0x40dfe5 - 0x40e174
int64_t function_40dfe5(uint64_t a1, int64_t a2) {
    // 0x40dfe5
    int64_t v1; // 0x40dfe5
    uint64_t v2 = v1;
    int64_t v3 = v1 + 0xffd5e907; // 0x40dfe5
    int64_t v4 = v3 & 0xffffffff; // 0x40dfe5
    char * v5 = (char *)v4; // 0x40dfea
    char v6 = v3; // 0x40dfea
    *v5 = *v5 + v6;
    int32_t * v7 = (int32_t *)v4; // 0x40dfef
    int32_t v8 = v3; // 0x40dfef
    *v7 = *v7 | v8;
    int64_t v9 = (v2 + (a2 & -256) & -256) + v2;
    int32_t * v10 = (int32_t *)a1; // 0x40dff3
    int64_t v11; // 0x40dfe5
    *v10 = *(int32_t *)&v11 | v8;
    char v12 = a1 / 256; // 0x40dff5
    *v5 = *v5 + v12;
    char * v13 = (char *)(v9 & 0xff00 | a2 & -0xff01); // 0x40dff9
    *v13 = *v13 + (char)a1;
    int64_t v14; // 0x40dfe5
    unsigned char v15 = (char)(v2 / 256) - *(char *)&v14; // 0x40dffb
    *v7 = *v7 | v8;
    *v10 = *(int32_t *)&v11 | v8;
    *v5 = *v5 + v12;
    int64_t v16 = a1 & -256; // 0x40e007
    int64_t v17 = (int64_t)(v15 - *(char *)&v14); // 0x40e00b
    int64_t v18 = 256 * v17; // 0x40e00b
    *v7 = *v7 | v8;
    uint64_t v19 = 2 * (v18 + 256 * (int64_t)v15) + v9 & 0xff00; // 0x40e011
    int32_t * v20 = (int32_t *)v16; // 0x40e013
    *v20 = *v20 | v8;
    *v5 = *v5 + v12;
    int64_t v21 = a2 & -0x10000;
    char v22 = *(char *)&v14; // 0x40e01b
    unsigned char v23 = -v22; // 0x40e01b
    int64_t v24 = v16 | (int64_t)v23; // 0x40e01b
    char * v25 = (char *)v24; // 0x40e01e
    *v25 = *v25 - 1;
    *v5 = *v5 + v6;
    *v25 = *v25 - 1;
    *v7 = *v7 + v8;
    *v25 = *v25 - 1;
    unsigned char v26 = *v5 + v6; // 0x40e028
    int64_t v27 = v3 & 0xffffff00; // 0x40e028
    int64_t v28 = v27 | (int64_t)v26; // 0x40e028
    char * v29 = (char *)(v1 + 0x2a0a0000); // 0x40e02a
    *v29 = *v29 - (char)(v19 / 256);
    int64_t v30 = v14;
    int64_t v31 = (v30 + v1) % 256 | v30 & -256; // 0x40e030
    v14 = v31;
    int32_t * v32 = (int32_t *)v28; // 0x40e033
    int32_t v33 = v28; // 0x40e033
    *v32 = *v32 | v33;
    int32_t * v34 = (int32_t *)v24; // 0x40e037
    *v34 = *v34 | v33;
    int32_t * v35 = (int32_t *)(v19 + 512 * v17 & 0xff00 | v21); // 0x40e03b
    *v35 = *v35 | v33;
    char * v36 = (char *)v28; // 0x40e03d
    *v36 = *v36 + v12;
    char * v37 = (char *)v21; // 0x40e041
    *v37 = *v37 - v22;
    char * v38 = (char *)v31; // 0x40e043
    unsigned char v39 = v23 - *v38; // 0x40e043
    char * v40 = (char *)(v16 | (int64_t)v39); // 0x40e046
    *v40 = *v40 - 1;
    *v36 = *v36 + v26;
    *v40 = *v40 - 1;
    *v32 = *v32 + v33;
    *v40 = *v40 - 1;
    unsigned char v41 = *v36 + v26; // 0x40e050
    int64_t v42 = v27 | (int64_t)v41; // 0x40e050
    char v43 = v2; // 0x40e052
    unsigned char v44 = v39 - v43; // 0x40e052
    char * v45 = (char *)v42; // 0x40e054
    *v45 = *v45 + v41;
    unsigned char v46 = *v37 | v12; // 0x40e056
    int64_t v47 = a1 & -0x10000 | (int64_t)v44 | 256 * (int64_t)v46; // 0x40e056
    v11 = v47;
    int64_t v48 = v18 | v21; // 0x40e058
    int32_t * v49 = (int32_t *)v42; // 0x40e05b
    *v49 = *v49 | (int32_t)v42;
    *v45 = *v45 + v46;
    int64_t v50 = v42 & 0xffff00ff; // 0x40e05f
    char * v51 = (char *)v48; // 0x40e061
    *v51 = *v51 + v44;
    char * v52 = (char *)v47; // 0x40e066
    *v52 = *v52 - 1;
    char * v53 = (char *)v50; // 0x40e068
    *v53 = *v53 + v41;
    *v52 = *v52 - 1;
    int32_t * v54 = (int32_t *)v50; // 0x40e06c
    *v54 = *v54 + (int32_t)v50;
    char v55 = *v52; // 0x40e06e
    *v52 = v55 - 1;
    int64_t v56 = v3 & 0xffff0000 | (int64_t)(*v53 + v41); // 0x40e070
    *v52 = v55 - 2;
    uint32_t v57 = *(int32_t *)v56 + (int32_t)v56; // 0x40e074
    int64_t v58 = v57; // 0x40e074
    char * v59 = (char *)(2 * v58); // 0x40e076
    *v59 = *v59 - v46;
    *v51 = *v51 + v44;
    char * v60 = (char *)v58; // 0x40e07d
    char v61 = *v60 + v46; // 0x40e07d
    *v60 = v61;
    char v62; // 0x40dfe5
    char v63; // 0x40dfe5
    if (v61 == 0) {
        // 0x40dfe5
        v62 = v57;
        v63 = 0;
    } else {
        char * v64 = (char *)v14; // 0x40e081
        char v65 = v57;
        *v64 = *v64 + v65;
        v62 = v65;
        v63 = *v60;
    }
    unsigned char v66 = v43 - *v38 - *v38; // 0x40e07b
    *v60 = v63 + (char)(v11 / 256);
    char v67 = *v51 + (char)v11; // 0x40e089
    *v51 = v67;
    unsigned char v68 = (char)(v11 / 256) - v67; // 0x40e08b
    int64_t v69 = v11 & -0xff01; // 0x40e08b
    char * v70 = (char *)(256 * (int64_t)v68 | v69); // 0x40e08d
    *v70 = *v70 - 1;
    *v60 = *v60 + v62;
    __asm_outsd((int16_t)v18, *(int32_t *)v14);
    char v71 = v11; // 0x40e094
    *v51 = *v51 + v71;
    unsigned char v72 = v62 - *v60; // 0x40e096
    int64_t v73 = v58 & 0xffffff00; // 0x40e096
    int64_t v74 = v73 | (int64_t)v72; // 0x40e096
    uint64_t v75 = (v18 | (int64_t)v66) - v48;
    int32_t * v76 = (int32_t *)v74; // 0x40e09a
    int32_t v77 = v74; // 0x40e09a
    *v76 = *v76 | v77;
    char * v78 = (char *)(v1 - 36); // 0x40e09c
    *v78 = *v78 + v68;
    char * v79 = (char *)v74; // 0x40e09f
    *v79 = *v79 + v72;
    unsigned char v80 = *v51 | v68; // 0x40e0a1
    int64_t v81 = 256 * (int64_t)v80 | v69; // 0x40e0a1
    v11 = v81;
    char * v82 = (char *)v14; // 0x40e0a3
    char v83 = v75 / 256; // 0x40e0a3
    *v82 = *v82 + v83;
    *v76 = *v76 | v77;
    int64_t v84 = (v75 + v18 & 0xff00) + v75 & 0xff00 | v21; // 0x40e0a9
    int32_t * v85 = (int32_t *)v81; // 0x40e0ab
    *v85 = *v85 | v77;
    *v79 = *v79 + v80;
    char * v86 = (char *)v84; // 0x40e0b1
    *v86 = *v86 + v71;
    int64_t v87 = (int64_t)(v66 - *(char *)v14 - *(char *)v14); // 0x40e0b3
    *v79 = *v79 + v80;
    *v86 = *v86 + (char)v11;
    unsigned char v88 = v83 - *(char *)v14; // 0x40e0bb
    *v76 = *v76 | v77;
    int64_t v89 = 512 * (int64_t)v88 + v84;
    int32_t * v90 = (int32_t *)v11; // 0x40e0c3
    *v90 = *v90 | v77;
    *v79 = *v79 + (char)(v11 / 256);
    char * v91 = (char *)(v89 & 0xff00 | v21); // 0x40e0c9
    *v91 = *v91 + (char)v11;
    int64_t v92 = (int64_t)(v88 - *(char *)v14); // 0x40e0cb
    *v76 = *v76 | v77;
    int64_t v93 = 512 * v92 + v89;
    int64_t v94 = v93 & 0xff00; // 0x40e0d1
    int64_t v95 = v94 | v21; // 0x40e0d1
    int32_t * v96 = (int32_t *)v11; // 0x40e0d3
    *v96 = *v96 | v77;
    *v79 = *v79 + (char)(v11 / 256);
    char * v97 = (char *)v95; // 0x40e0d9
    char v98 = *v97 + (char)v11; // 0x40e0d9
    *v97 = v98;
    uint64_t v99 = v11;
    int64_t v100 = 256 * (int64_t)((char)(v99 / 256) - v98) | v99 & -0xff01; // 0x40e0db
    char * v101 = (char *)v100; // 0x40e0dd
    *v101 = *v101 - 1;
    *v79 = *v79 + v72;
    int16_t v102 = v93; // 0x40e0e1
    __asm_outsd(v102, *(int32_t *)v14);
    int64_t v103 = v100 - 1; // 0x40e0e2
    v11 = v103;
    *v97 = *v97 + (char)v103;
    unsigned char v104 = v72 - *v79; // 0x40e0e6
    int64_t v105 = v73 | (int64_t)v104; // 0x40e0e6
    int32_t * v106 = (int32_t *)v105; // 0x40e0ea
    *v106 = *v106 | (int32_t)v105;
    char * v107 = (char *)(v1 - 31); // 0x40e0ec
    *v107 = *v107 + (char)(v11 / 256);
    char * v108 = (char *)v105; // 0x40e0ef
    *v108 = *v108 + v104;
    char v109 = *v97; // 0x40e0f1
    unsigned char v110 = v109 | (char)(v11 / 256); // 0x40e0f1
    int64_t v111 = 256 * (int64_t)v110 | v11 & -0xff01; // 0x40e0f1
    *v97 = v110 + v109;
    char * v112 = (char *)v111; // 0x40e0f5
    *v112 = *v112 - 1;
    *v108 = *v108 + v104;
    __asm_outsd(v102, *(int32_t *)v14);
    int64_t v113 = v111 - 1; // 0x40e0fa
    v11 = v113;
    *v97 = *v97 + (char)v113;
    unsigned char v114 = v104 - *v108; // 0x40e0fe
    int64_t v115 = v73 | (int64_t)v114; // 0x40e0fe
    uint64_t v116 = ((256 * v92 | v87) - v94 & 0xff00 | v87) - v95;
    int32_t * v117 = (int32_t *)v115; // 0x40e102
    *v117 = *v117 | (int32_t)v115;
    char * v118 = (char *)(v1 - 29); // 0x40e104
    *v118 = *v118 + (char)(v11 / 256);
    char * v119 = (char *)v115; // 0x40e107
    *v119 = *v119 + v114;
    char v120 = *v97; // 0x40e109
    unsigned char v121 = v120 | (char)(v11 / 256); // 0x40e109
    int64_t v122 = v11 & -0xff01; // 0x40e109
    *v97 = v121 + v120;
    char * v123 = (char *)(256 * (int64_t)v121 | v122); // 0x40e10d
    *v123 = *v123 - 1;
    *v119 = *v119 + v114;
    int64_t v124 = v14;
    __asm_outsd(v102, *(int32_t *)v124);
    v14 = v115;
    int64_t v125 = v124 & 0xffffffff; // 0x40e112
    char * v126 = (char *)v125; // 0x40e113
    char v127 = v124; // 0x40e113
    *v126 = *v126 + v127;
    unsigned char v128 = *v97 | v121; // 0x40e115
    int64_t v129 = 256 * (int64_t)v128 | v122; // 0x40e115
    v11 = v129;
    *v119 = *v119 + (char)(v116 / 256);
    int32_t * v130 = (int32_t *)v125; // 0x40e11b
    int32_t v131 = v124; // 0x40e11b
    *v130 = *v130 | v131;
    int64_t v132 = (v116 + v94 & 0xff00) + v116 & 0xff00; // 0x40e11d
    int32_t * v133 = (int32_t *)v129; // 0x40e11f
    *v133 = *v133 | v131;
    *v126 = *v126 + v128;
    char * v134 = (char *)(v132 | v21); // 0x40e125
    char v135 = *v134 + (char)v11; // 0x40e125
    *v134 = v135;
    unsigned char v136 = (char)(v11 / 256) - v135; // 0x40e127
    int64_t v137 = v11 & -0xff01; // 0x40e127
    char * v138 = (char *)(256 * (int64_t)v136 | v137); // 0x40e129
    *v138 = *v138 - 1;
    *v126 = *v126 + v127;
    int16_t v139 = v132; // 0x40e12d
    __asm_outsd(v139, *(int32_t *)v14);
    char v140 = __asm_in_2(0); // 0x40e12e
    int64_t v141 = v124 & 0xffffff00 | (int64_t)v140; // 0x40e12e
    char v142 = v11; // 0x40e130
    *v134 = *v134 + v142;
    unsigned char v143 = v140 - *(char *)v141; // 0x40e132
    int64_t v144 = v141 & -256; // 0x40e132
    int64_t v145 = v144 | (int64_t)v143; // 0x40e132
    int32_t * v146 = (int32_t *)v145; // 0x40e136
    *v146 = *v146 | (int32_t)v145;
    char * v147 = (char *)(v1 - 27); // 0x40e138
    *v147 = *v147 + v136;
    char * v148 = (char *)v145; // 0x40e13b
    *v148 = *v148 + v143;
    char v149 = *v134; // 0x40e13d
    unsigned char v150 = v149 | v136; // 0x40e13d
    *v134 = v150 + v149;
    char * v151 = (char *)(256 * (int64_t)v150 | v137); // 0x40e141
    *v151 = *v151 - 1;
    *v148 = *v148 + v143;
    __asm_outsd(v139, *(int32_t *)v14);
    __asm_out_1(0, v143);
    *v134 = *v134 + v142;
    unsigned char v152 = v143 - *v148; // 0x40e14a
    int64_t v153 = v144 | (int64_t)v152; // 0x40e14a
    int32_t * v154 = (int32_t *)v153; // 0x40e14e
    *v154 = *v154 | (int32_t)v153;
    char * v155 = (char *)(v1 - 25); // 0x40e150
    *v155 = *v155 + v150;
    char * v156 = (char *)v153; // 0x40e153
    *v156 = *v156 + v152;
    char v157 = *v134; // 0x40e155
    unsigned char v158 = v157 | v150; // 0x40e155
    int64_t v159 = 256 * (int64_t)v158 | v137; // 0x40e155
    *v134 = v158 + v157;
    char * v160 = (char *)v159; // 0x40e159
    *v160 = *v160 - 1;
    *v156 = *v156 + v152;
    __asm_outsd(v139, *(int32_t *)v14);
    int64_t v161 = unknown_2a4ae163(); // 0x40e15e
    char * v162 = (char *)v14; // 0x40e163
    *v162 = *v162 + (char)((-2 * v132 + (v116 & 0xff00 | v87)) / 256);
    int32_t * v163 = (int32_t *)v161; // 0x40e167
    int32_t v164 = v161; // 0x40e167
    *v163 = *v163 | v164;
    int32_t * v165 = (int32_t *)v159; // 0x40e16b
    *v165 = *v165 | v164;
    char * v166 = (char *)v161; // 0x40e16d
    *v166 = *v166 + v158;
    return function_2a4ae174();
}

// Address range: 0x40e176 - 0x40e199
int64_t function_40e176(uint64_t a1, int64_t a2, int64_t a3) {
    char * v1 = (char *)a1; // 0x40e176
    int64_t v2; // 0x40e176
    *v1 = (char)v2 - 1;
    int64_t result; // 0x40e176
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    int64_t v4; // 0x40e176
    *v1 = *(char *)&v4 - 1;
    int64_t v5 = result;
    *(int32_t *)v5 = *(int32_t *)&result + (int32_t)v5;
    uint64_t v6 = a1 / 256; // 0x40e17e
    int64_t v7 = (a2 - v6) % 256 | a2 & -256; // 0x40e17e
    int64_t v8 = result;
    *(char *)v8 = *(char *)&result + (char)v8;
    char * v9 = (char *)v7; // 0x40e182
    char v10 = *v9 | (char)v6; // 0x40e182
    int64_t v11 = result;
    *(int32_t *)v11 = *(int32_t *)&result | (int32_t)v11;
    char * v12 = (char *)(v2 - 21); // 0x40e188
    *v12 = *v12 + v10;
    int64_t v13 = result;
    *(char *)v13 = *(char *)&result + (char)v13;
    char v14 = *v9;
    unsigned char v15 = v14 | v10; // 0x40e18d
    *v9 = v15 + v14;
    char * v16 = (char *)(256 * (int64_t)v15 | a1 & -0xff01); // 0x40e191
    *v16 = *v16 - 1;
    int64_t v17 = result;
    *(char *)v17 = *(char *)&result + (char)v17;
    int64_t v18; // 0x40e176
    __asm_outsd((int16_t)v7, *(int32_t *)&v18);
    return result;
}

// Address range: 0x40e1ed - 0x40e1f7
int64_t function_40e1ed(uint64_t a1, int64_t a2) {
    // 0x40e1ed
    int64_t v1; // 0x40e1ed
    *(char *)a2 = (char)v1 + (char)a1;
    int64_t v2; // 0x40e1ed
    char v3 = *(char *)&v2; // 0x40e1ef
    char * v4 = (char *)(256 * (int64_t)((char)(a1 / 256) - v3) | a1 & -0xff01); // 0x40e1f1
    *v4 = *v4 - 1;
    int64_t result; // 0x40e1ed
    int64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)v5;
    int64_t v6; // 0x40e1ed
    __asm_outsd((int16_t)a2, *(int32_t *)&v6);
    return result;
}

// Address range: 0x40e6dd - 0x40e82a
int64_t function_40e6dd(uint64_t a1, uint64_t a2, int64_t a3) {
    int64_t v1 = a2;
    int64_t v2; // 0x40e6dd
    int64_t v3 = v2 + 0xfff60107; // 0x40e6dd
    char * v4 = (char *)(v2 - 2); // 0x40e6e2
    char v5 = a1 / 256; // 0x40e6e2
    *v4 = *v4 + v5;
    char * v6 = (char *)(v3 & 0xffffffff); // 0x40e6e5
    char v7 = v3; // 0x40e6e5
    char v8 = *v6 + v7; // 0x40e6e5
    *v6 = v8;
    *v6 = v8 + v7;
    int64_t v9; // 0x40e6dd
    *(char *)a2 = *(char *)&v1 + (char)v9;
    int64_t v10; // 0x40e6dd
    char * v11 = (char *)(v10 + 2); // 0x40e6ed
    *v11 = *v11 - (char)(a2 / 256);
    *(char *)v10 = *(char *)&v10 + v7;
    unsigned char v12 = v7 - *v6; // 0x40e6f2
    int64_t v13 = v3 & 0xffffff00 | (int64_t)v12; // 0x40e6f2
    int32_t * v14 = (int32_t *)v13; // 0x40e6f6
    int32_t v15 = v13; // 0x40e6f6
    *v14 = 2 * v15 + *v14;
    char * v16 = (char *)v13; // 0x40e6fc
    unsigned char v17 = *v16 + 2 * v12; // 0x40e6fe
    char v18 = v17 + v12; // 0x40e702
    *v16 = v18;
    char v19 = v18; // 0x40e704
    int64_t v20; // 0x40e6dd
    if (v18 >= v17 && v18 != 0) {
        unsigned char v21 = *(char *)&v1 | v5; // 0x40e6e7
        *(char *)v10 = *(char *)&v10 ^ v21;
        int32_t v22 = *(int32_t *)(256 * (int64_t)v21 | a1 & -0xff01); // 0x40e70b
        int64_t v23 = (int64_t)(*v14 ^ (int32_t)v10 ^ v22); // 0x40e70b
        v10 = v23;
        *v16 = *v16 + v12;
        *(char *)v20 = *(char *)&v20 + v12;
        char * v24 = (char *)(2 * v13 + 0x56f80000); // 0x40e713
        *v24 = *v24 + (char)a1;
        *v16 = *v16 + v12;
        int64_t v25 = (int64_t)(*(int32_t *)v23 & (int32_t)v20); // 0x40e71c
        v20 = v25;
        char * v26 = (char *)(v25 + 0x58980000 + 2 * v1); // 0x40e71f
        *v26 = *v26 + v12;
        *v16 = *v16 + v12;
        uint32_t v27 = *(int32_t *)(v9 + 116) & (int32_t)v1; // 0x40e728
        v1 = v27;
        __asm_outsb((int16_t)v27, *(char *)v10);
        *v16 = *v16 + v12;
        char * v28 = (char *)(4 * v10 + v13); // 0x40e733
        *v28 = *v28 + (char)v9;
        *v16 = *v16 + v12;
        *v14 = *v14 + v15;
        v19 = *v16;
    }
    // 0x40e73a
    *v16 = v19 + v12;
    uint32_t v29 = *(int32_t *)(v20 + 85) & v15; // 0x40e73c
    int64_t v30 = v29; // 0x40e73c
    *(char *)v20 = __asm_insb((int16_t)v1);
    char * v31 = (char *)v30; // 0x40e740
    *v31 = *v31 + (char)a3;
    *(char *)-0x53bf1807 = *(char *)-0x53bf1807 + (char)v9;
    int32_t * v32 = (int32_t *)v30; // 0x40e749
    *v32 = *v32 | v29;
    *(char *)v9 = *(char *)&v9 + (char)(v29 / 256);
    *v31 = *v31 + (char)v29;
    uint32_t v33 = *(int32_t *)(v1 + 108) & v29; // 0x40e758
    int64_t result = v33; // 0x40e758
    __asm_outsd((int16_t)v1, *(int32_t *)v10);
    char * v34 = (char *)result; // 0x40e75e
    *v34 = *v34 + (char)v33;
    return result;
}

// Address range: 0x40e837 - 0x40e84d
int64_t function_40e837(int64_t a1, uint64_t a2, int64_t a3) {
    // 0x40e837
    int64_t result; // 0x40e837
    int64_t v1 = result;
    char v2 = result; // 0x40e837
    *(char *)v1 = v2 + (char)v1;
    int64_t v3; // 0x40e837
    *(char *)v3 = *(char *)&v3 + (char)(a2 / 256);
    int64_t v4; // 0x40e837
    *(char *)v4 = *(char *)&v4 + v2;
    char * v5 = (char *)(result + 0x1b00a900); // 0x40e83f
    *v5 = *v5 + (char)a2;
    char * v6 = (char *)(2 * result + 0x60000); // 0x40e845
    *v6 = *v6 + (char)(result / 256);
    return result;
}

// Address range: 0x40e9fc - 0x40ea03
int64_t function_40e9fc(void) {
    // 0x40e9fc
    return function_540f02d();
}

// Address range: 0x40ec2d - 0x40ecb4
int64_t function_40ec2d(int64_t a1, int64_t a2) {
    int64_t v1 = a2;
    char * v2 = (char *)a1; // 0x40ec2d
    int64_t v3; // 0x40ec2d
    *v2 = (char)v3 + (char)a2;
    int64_t v4; // 0x40ec2d
    unsigned char v5 = *(char *)&v4; // 0x40ec30
    *(char *)v4 = v5 / 128 | 2 * v5;
    int64_t v6; // 0x40ec2d
    *v2 = *(char *)&v6 + (char)v4;
    int64_t v7 = v4;
    *(char *)v7 = *(char *)&v4 + (char)v7;
    int64_t v8; // 0x40ec2d
    *(char *)v8 = (char)v4;
    int32_t v9 = __asm_insd((int16_t)a2); // 0x40ec3a
    int32_t * v10 = (int32_t *)v3; // 0x40ec3a
    *v10 = v9;
    *(char *)v4 = *(char *)&v4 + (char)v8;
    unsigned char v11 = *(char *)&v4; // 0x40ec3e
    *(char *)v4 = v11 / 128 | 2 * v11;
    *v2 = *(char *)&v6 + (char)v4;
    char v12 = *(char *)&v4 + (char)v4; // 0x40ec42
    *(char *)v4 = v12;
    int64_t v13 = a1 - 1; // 0x40ec44
    v6 = v13;
    if (v13 != 0 != (v12 == 0)) {
        // 0x40ec46
        *(char *)v8 = (char)v4;
        *v10 = __asm_insd((int16_t)v1);
    }
    int64_t v14 = v8;
    *(char *)v14 = *(char *)&v8 + (char)v14;
    unsigned char v15 = *(char *)&v4; // 0x40ec4c
    *(char *)v4 = v15 / 128 | 2 * v15;
    char * v16 = (char *)v6; // 0x40ec4e
    *v16 = *v16 | (char)v4;
    int64_t v17 = v4;
    *(char *)v17 = *(char *)&v4 + (char)v17;
    int64_t v18; // 0x40ec2d
    *(char *)v18 = *(char *)&v18 + (char)v8;
    unsigned char v19 = *(char *)&v4; // 0x40ec5a
    *(char *)v4 = v19 / 128 | 2 * v19;
    char * v20 = (char *)v6; // 0x40ec5c
    *v20 = *v20 + (char)v4;
    int64_t v21 = v4;
    *(char *)v21 = *(char *)&v4 + (char)v21;
    uint64_t v22 = v1 + v4; // 0x40ec66
    int64_t v23 = v4 & -256; // 0x40ec66
    char * v24 = (char *)(v22 % 256 | v23); // 0x40ec69
    char v25 = v22; // 0x40ec69
    *v24 = *v24 + v25 & v25;
    char * v26 = (char *)v6; // 0x40ec6d
    *v26 = *v26 + v25;
    int64_t v27 = (v22 + 136) % 256 | v23; // 0x40ec6f
    v4 = v27;
    char * v28 = (char *)v27; // 0x40ec76
    unsigned char v29 = *v28; // 0x40ec76
    *v28 = v29 / 128 | 2 * v29;
    char * v30 = (char *)v4; // 0x40ec78
    *v30 = *v30 + (char)v4;
    char * v31 = (char *)v4; // 0x40ec7a
    unsigned char v32 = *v31; // 0x40ec7a
    unsigned char v33 = v32 + (char)v4; // 0x40ec7a
    *v31 = v33;
    char * v34 = (char *)(4 * v6 + v4); // 0x40ec7c
    *v34 = (char)(v33 < v32) + (char)v4 + *v34;
    char * v35 = (char *)v4; // 0x40ec86
    *v35 = *v35 + (char)v4;
    char * v36 = (char *)v4; // 0x40ec88
    *v36 = *v36 + (char)v4;
    int32_t v37 = __asm_in_3((int16_t)v1); // 0x40ec92
    int64_t v38 = v37; // 0x40ec92
    char * v39 = (char *)v38; // 0x40ec93
    *v39 = 2 * (char)v37 + *v39;
    uint64_t v40 = v1;
    *(char *)v40 = *(char *)&v1 + (char)(v40 / 256);
    int64_t v41 = v38 & -256; // 0x40ec99
    uint32_t v42 = v37 + 169;
    int64_t v43 = v41 | (int64_t)(v42 % 256); // 0x40ec9b
    char * v44 = (char *)(2 * v43 + 13); // 0x40ec9d
    *v44 = *v44 + (char)(v8 / 256);
    int32_t * v45 = (int32_t *)v43; // 0x40eca1
    *v45 = *v45 + (int32_t)v43;
    char * v46 = (char *)v43; // 0x40eca3
    *v46 = *v46 + (char)v42;
    char * v47 = (char *)(v18 + 4); // 0x40eca5
    *v47 = *v47 + (char)v8;
    *(char *)v18 = *(char *)&v18 + (char)(v8 / 256);
    int32_t * v48 = (int32_t *)v6; // 0x40ecae
    int32_t v49 = (v37 + 14) % 256 | (int32_t)v41; // 0x40ecae
    *v48 = *v48 ^ v49;
    uint32_t v50 = *(int32_t *)v6 + v49; // 0x40ecb0
    int64_t result = v50; // 0x40ecb0
    char * v51 = (char *)result; // 0x40ecb2
    *v51 = *v51 + (char)v50;
    return result;
}

// Address range: 0x40ee09 - 0x40ee39
int64_t function_40ee09(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x40ee09
    int64_t v1; // 0x40ee09
    int64_t v2 = v1;
    uint64_t v3 = v1 / 256 + v1; // 0x40ee09
    *(char *)v2 = (char)(v1 / 256) + (char)v2;
    int64_t v4; // 0x40ee09
    unsigned char v5 = *(char *)&v4 + (char)a1; // 0x40ee0d
    int64_t v6; // 0x40ee09
    int64_t v7 = v6;
    *(int32_t *)v7 = *(int32_t *)&v6 + (int32_t)v7;
    char * v8 = (char *)((v3 % 256 | v1 & -256) + 6); // 0x40ee11
    *v8 = *v8 + v5;
    char v9 = __asm_in_2(0); // 0x40ee18
    uint64_t v10 = v6 & -256 | (int64_t)v9; // 0x40ee18
    int32_t * v11 = (int32_t *)v10; // 0x40ee1d
    int32_t v12 = v10; // 0x40ee1d
    *v11 = *v11 + v12;
    char * v13 = (char *)((a1 & -256 | (int64_t)v5) + 6); // 0x40ee1f
    *v13 = *v13 + (char)v3;
    __asm_out_1(0, v9);
    *v11 = *v11 + v12;
    char * v14 = (char *)(v1 + 6); // 0x40ee2d
    *v14 = *v14 + (char)(v10 / 256);
    return function_9433239();
}

// Address range: 0x40ee39 - 0x40ee67
int64_t function_40ee39(int64_t a1, uint64_t a2) {
    // 0x40ee39
    int64_t v1; // 0x40ee39
    int64_t v2 = v1;
    *(int32_t *)v2 = 2 * (int32_t)v2;
    char * v3 = (char *)(v1 + 6); // 0x40ee3b
    uint64_t v4 = a2 / 256; // 0x40ee3b
    *v3 = *v3 + (char)v4;
    int32_t v5 = __asm_in_3((int16_t)a2); // 0x40ee42
    int64_t v6 = v5; // 0x40ee42
    char * v7 = (char *)(v6 + a2); // 0x40ee43
    char v8 = v5; // 0x40ee43
    *v7 = *v7 + v8;
    char * v9 = (char *)v6; // 0x40ee47
    *v9 = *v9 + v8;
    char * v10 = (char *)(v1 + 0x6505c806); // 0x40ee49
    *v10 = *v10 + v8;
    uint64_t v11 = v4 + (int64_t)v5; // 0x40ee4f
    int64_t result = v11 % 256 | v6 & -256; // 0x40ee4f
    char * v12 = (char *)(result + a2); // 0x40ee51
    char v13 = v11; // 0x40ee51
    *v12 = *v12 + v13;
    char * v14 = (char *)result; // 0x40ee55
    *v14 = *v14 + v13;
    char * v15 = (char *)(v1 + 0x650000 + result); // 0x40ee57
    *v15 = *v15 + (char)a2;
    char * v16 = (char *)(a2 + 2); // 0x40ee5e
    *v16 = *v16 + (char)a1;
    *v14 = *v14 + 2 * v13;
    return result;
}

// Address range: 0x40ee72 - 0x40ee79
int64_t function_40ee72(void) {
    // 0x40ee72
    int64_t v1; // 0x40ee72
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    return function_6940ee7f();
}

// Address range: 0x40efa6 - 0x40efad
int64_t function_40efa6(int64_t a1) {
    // 0x40efa6
    int64_t v1; // 0x40efa6
    *(int32_t *)v1 = (int32_t)a1;
    return a1 & 0xffffffff;
}

// Address range: 0x40efea - 0x40effb
int64_t function_40efea(int64_t a1, int64_t a2) {
    // 0x40efea
    int64_t v1; // 0x40efea
    int128_t v2; // 0x40efea
    __asm_unpckhps(v2, *(int128_t *)&v1);
    char * v3 = (char *)(a1 + 0x5601150f); // 0x40eff3
    *v3 = *v3 ^ -128;
    int64_t v4; // 0x40efea
    bool v5; // 0x40efea
    return v4 + 0x85805601 + (int64_t)v5 & 0xffffffff;
}

// Address range: 0x40f051 - 0x40f05d
int64_t function_40f051(int64_t a1, int64_t a2) {
    // 0x40f051
    int64_t result; // 0x40f051
    *(int32_t *)a1 = 2 * (int32_t)result;
    char * v1 = (char *)(a2 + 26); // 0x40f053
    *v1 = *v1 + (char)((uint64_t)result / 256);
    return result;
}

// Address range: 0x40f0b4 - 0x40f0b7
int64_t function_40f0b4(void) {
    // 0x40f0b4
    int64_t result; // 0x40f0b4
    return result;
}

// Address range: 0x40f0ba - 0x40f0bd
int64_t function_40f0ba(int64_t a1) {
    // 0x40f0ba
    int64_t result; // 0x40f0ba
    return result;
}

// Address range: 0x40f0e6 - 0x40f0ef
int64_t function_40f0e6(void) {
    // 0x40f0e6
    return function_647c30b();
}

// Address range: 0x40f1cf - 0x40f1dd
int64_t function_40f1cf(int64_t a1) {
    // 0x40f1cf
    int64_t v1; // 0x40f1cf
    *(int32_t *)v1 = (int32_t)a1;
    bool v2; // 0x40f1cf
    return v1 - (v2 ? 0x60606c9 : 0x60606c8) & 0xffffffff;
}

// Address range: 0x40f1de - 0x40f1e3
int64_t function_40f1de(int64_t a1) {
    // 0x40f1de
    int64_t v1; // 0x40f1de
    uint64_t v2 = v1;
    bool v3; // 0x40f1de
    return 256 * (v2 / 256 + 29 + (int64_t)v3) & 0xff00 | v2 & -0xff01;
}

// Address range: 0x40f1e4 - 0x40f1e9
int64_t function_40f1e4(int64_t a1) {
    // 0x40f1e4
    int64_t v1; // 0x40f1e4
    return v1 & -0xe201;
}

// Address range: 0x40f1ea - 0x40f1ef
int64_t function_40f1ea(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40f1ea
    int64_t result; // 0x40f1ea
    return result;
}

// Address range: 0x40f1f0 - 0x40f1f5
int64_t function_40f1f0(int64_t a1) {
    // 0x40f1f0
    int64_t result; // 0x40f1f0
    int64_t v1 = result;
    *(char *)v1 = (char)v1 + 30;
    return result;
}

// Address range: 0x40f1f6 - 0x40f1fb
int64_t function_40f1f6(int64_t a1) {
    // 0x40f1f6
    int64_t result; // 0x40f1f6
    int64_t v1 = result;
    bool v2; // 0x40f1f6
    *(char *)v1 = (v2 ? 31 : 30) + (char)v1;
    return result;
}

// Address range: 0x40f1fc - 0x40f201
int64_t function_40f1fc(int64_t a1, int64_t a2) {
    // 0x40f1fc
    int64_t result; // 0x40f1fc
    *(char *)a1 = (char)result - 30;
    return result;
}

// Address range: 0x40f202 - 0x40f207
int64_t function_40f202(int64_t a1) {
    // 0x40f202
    int64_t result; // 0x40f202
    return result;
}

// Address range: 0x40f20c - 0x40f20d
int64_t function_40f20c(int64_t a1) {
    // 0x40f20c
    int64_t result; // 0x40f20c
    return result;
}

// Address range: 0x40f212 - 0x40f213
int64_t function_40f212(int64_t a1) {
    // 0x40f212
    int64_t result; // 0x40f212
    return result;
}

// Address range: 0x40f218 - 0x40f219
int64_t function_40f218(int64_t a1) {
    // 0x40f218
    int64_t result; // 0x40f218
    return result;
}

// Address range: 0x40f21c - 0x40f240
int64_t function_40f21c(int64_t a1, int64_t a2) {
    // 0x40f21c
    int64_t result; // 0x40f21c
    // 0x40f21e
    return result;
    int32_t v1 = result;
    unsigned char v2 = (char)a1 % 32; // 0x40f23c
    int32_t v3 = v1; // 0x40f23c
    int32_t v4 = v1; // 0x40f23c
    int64_t v5; // 0x40f21c
    int64_t result2; // 0x40f21c
    if (v2 != 0) {
        unsigned char v6 = (char)result;
        *(char *)result = v6 >> 8 - v2 | v6 << v2;
        v3 = result2;
        v5 = result2;
        v4 = *(int32_t *)&result2;
    }
    // 0x40f23c
    *(int32_t *)v5 = v4 + v3;
    return result2;
}

// Address range: 0x40f28a - 0x40f28c
int64_t function_40f28a(void) {
    // 0x40f28a
    int64_t v1; // 0x40f28a
    return function_40f28e(v1);
}

// Address range: 0x40f28c - 0x40f28e
int64_t function_40f28c(void) {
    // 0x40f28c
    int64_t v1; // 0x40f28c
    int64_t result = v1;
    *(int32_t *)result = 2 * (int32_t)result;
    return result;
}

// Address range: 0x40f28e - 0x40f2a7
int64_t function_40f28e(uint64_t a1) {
    // 0x40f28e
    int64_t v1; // 0x40f28e
    int64_t v2 = v1 & 0x100eb; // 0x40f28e
    int64_t result = v2 | 512; // 0x40f28f
    char * v3 = (char *)(a1 & 0xffffff00 | 37); // 0x40f296
    *v3 = *v3 | (char)v2;
    char * v4 = (char *)(v1 + 9); // 0x40f299
    char v5 = a1 / 256; // 0x40f299
    *v4 = *v4 + v5;
    int64_t v6; // 0x40f28e
    *(int32_t *)v6 = *(int32_t *)&v6 + (int32_t)result;
    *(char *)0x643ddd4 = *(char *)0x643ddd4 + 2;
    int64_t v7; // 0x40f28e
    *(char *)v7 = *(char *)&v7 + v5;
    return result;
}

// Address range: 0x40f2a8 - 0x40f2aa
int64_t function_40f2a8(void) {
    // 0x40f2a8
    int64_t result; // 0x40f2a8
    return result;
}

// Address range: 0x40f2ae - 0x40f2ba
int64_t function_40f2ae(void) {
    // 0x40f2ae
    int64_t result; // 0x40f2ae
    int64_t v1 = result;
    *(char *)v1 = (char)v1 / 2;
    return result;
}

// Address range: 0x40f2c0 - 0x40f2c5
int64_t function_40f2c0(void) {
    // 0x40f2c0
    int64_t v1; // 0x40f2c0
    uint64_t v2 = v1;
    return v2 & -256 | (int64_t)*(char *)(v2 % 256 + v1);
}

// Address range: 0x40f2c8 - 0x40f2ce
int64_t function_40f2c8(void) {
    // 0x40f2c8
    int64_t v1; // 0x40f2c8
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 / 2;
    return function_40f2d0(v1, v1);
}

// Address range: 0x40f2ce - 0x40f2d0
int64_t function_40f2ce(void) {
    // 0x40f2ce
    int64_t v1; // 0x40f2ce
    return 2 * v1 & 0xfffffffe;
}

// Address range: 0x40f2d0 - 0x40f2d7
int64_t function_40f2d0(int64_t a1, int64_t a2) {
    // 0x40f2d0
    int64_t v1; // 0x40f2d0
    int64_t v2 = v1;
    return ((v2 & 43) + a2) % 256 | v2 & 0x60acc00;
}

// Address range: 0x40f2d8 - 0x40f328
int64_t function_40f2d8(int64_t a1, int64_t a2) {
    // 0x40f2d8
    int64_t v1; // 0x40f2d8
    int64_t v2 = v1;
    int64_t result = v1;
    bool v3; // 0x40f2d8
    if (a1 == 1 || v3) {
        // 0x40f2de
        return result;
    }
    // 0x40f30d
    return result + 256 * a2 & 0xff00 | result & -0x10000 | ((result | v2) + v2) % 256;
}

// Address range: 0x40f383 - 0x40f3bd
int64_t function_40f383(int64_t a1, int64_t a2) {
    // 0x40f383
    int64_t v1; // 0x40f383
    uint64_t v2 = v1;
    char * v3 = (char *)(v1 + a2); // 0x40f383
    char v4 = v2 / 256; // 0x40f383
    *v3 = *v3 + v4;
    int64_t v5; // 0x40f383
    char v6 = *(char *)&v5;
    char v7 = v1 / 256; // 0x40f38f
    *(char *)v5 = v6 + v7;
    char v8 = *(char *)&v5; // 0x40f393
    char * v9 = (char *)(v5 + a2); // 0x40f395
    *v9 = *v9 + v4;
    char v10 = *(char *)&v5;
    *(char *)v5 = v10 + v7;
    char v11 = *(char *)&v5; // 0x40f3a5
    char * v12 = (char *)(a2 - 57 + v5); // 0x40f3a7
    unsigned char v13 = (char)a1; // 0x40f3a7
    *v12 = *v12 + v13;
    char v14 = *(char *)&v5; // 0x40f3ab
    char * v15 = (char *)(v1 + 50); // 0x40f3ad
    *v15 = *v15 + (char)v1;
    char * v16 = (char *)(v1 + 50); // 0x40f3b3
    *v16 = *v16 + v4;
    unsigned char v17 = v13 % 32; // 0x40f3b6
    if (v17 != 0) {
        unsigned char v18 = *(char *)&v5; // 0x40f3b6
        *(char *)v5 = v18 >> 8 - v17 | v18 << v17;
    }
    int64_t result = v2 & -256 | (int64_t)((v14 | v6 + (char)v2 + v8 + v10 + v11) + 1); // 0x40f3b0
    int32_t * v19 = (int32_t *)result; // 0x40f3b8
    *v19 = *v19 + (int32_t)result;
    __asm_outsb((int16_t)a2, *(char *)&v5);
    return result;
}

// Address range: 0x40f3de - 0x40f41d
int64_t function_40f3de(int64_t a1) {
    int64_t v1 = a1 - 1; // 0x40f3de
    bool v2; // 0x40f3de
    int64_t result; // 0x40f3de
    bool v3; // 0x40f3de
    int64_t v4; // 0x40f3de
    bool v5; // 0x40f3de
    if (v1 != 0) {
        int32_t v6 = (int32_t)v4 ^ 0x107c8; // 0x40f414
        v3 = v6 < 0;
        v2 = false;
        result = v6;
        v5 = v6 == 0;
    }
    // 0x40f41a
    if (v3 != v2 || v5) {
        // 0x40f43c
        return result;
    }
    // 0x40f41c
    return __asm_iretd(v1, v4);
}

// Address range: 0x40f473 - 0x40f47b
int64_t function_40f473(int64_t a1, int64_t a2) {
    // 0x40f473
    int64_t result; // 0x40f473
    return result;
}

// Address range: 0x40f47c - 0x40f47e
int64_t function_40f47c(void) {
    // 0x40f47c
    return function_40f480();
}

// Address range: 0x40f47e - 0x40f480
int64_t function_40f47e(void) {
    // 0x40f47e
    int64_t v1; // 0x40f47e
    int64_t result = v1;
    bool v2; // 0x40f47e
    *(int32_t *)result = 2 * (int32_t)result | (int32_t)v2;
    return result;
}

// Address range: 0x40f480 - 0x40f486
int64_t function_40f480(void) {
    // 0x40f480
    int64_t v1; // 0x40f480
    return v1 ^ 0x1106c8;
}

// Address range: 0x40f4d9 - 0x40f526
int64_t function_40f4d9(int64_t a1) {
    // 0x40f4d9
    int64_t result; // 0x40f4d9
    char * v1 = (char *)(result + 0x60740 + result); // 0x40f4d9
    bool v2; // 0x40f4d9
    char v3 = *v1 + (char)a1 + (char)v2; // 0x40f4d9
    *v1 = v3;
    int64_t v4 = a1 - 1; // 0x40f4e0
    if (v4 != 0 != (v3 == 0)) {
        // 0x40f4e6
        return result;
    }
    char * v5 = (char *)(result + 66); // 0x40f521
    *v5 = *v5 + (char)v4;
    return function_40f528(v4, result);
}

// Address range: 0x40f526 - 0x40f528
int64_t function_40f526(void) {
    // 0x40f526
    int64_t v1; // 0x40f526
    int64_t result = v1;
    bool v2; // 0x40f526
    *(int32_t *)result = 2 * (int32_t)result | (int32_t)v2;
    return result;
}

// Address range: 0x40f528 - 0x40f52c
int64_t function_40f528(int64_t a1, int64_t a2) {
    // 0x40f528
    return function_40f52e(a2);
}

// Address range: 0x40f52c - 0x40f52e
int64_t function_40f52c(void) {
    // 0x40f52c
    int64_t v1; // 0x40f52c
    int64_t result = v1;
    bool v2; // 0x40f52c
    *(int32_t *)result = 2 * (int32_t)result | (int32_t)v2;
    return result;
}

// Address range: 0x40f52e - 0x40f531
int64_t function_40f52e(int64_t a1) {
    // 0x40f52e
    int64_t v1; // 0x40f52e
    return __asm_iretd(v1, v1);
}

// Address range: 0x40f565 - 0x40f567
int64_t function_40f565(int64_t a1) {
    // 0x40f565
    int64_t result; // 0x40f565
    return result;
}

// Address range: 0x40f581 - 0x40f586
int64_t function_40f581(int64_t a1, int64_t a2) {
    // 0x40f581
    return function_40f588(a1, a2);
}

// Address range: 0x40f586 - 0x40f588
int64_t function_40f586(void) {
    // 0x40f586
    int64_t v1; // 0x40f586
    int64_t result = v1;
    bool v2; // 0x40f586
    *(int32_t *)result = 2 * (int32_t)result | (int32_t)v2;
    return result;
}

// Address range: 0x40f588 - 0x40f597
int64_t function_40f588(int64_t a1, int64_t a2) {
    // 0x40f588
    int64_t v1; // 0x40f588
    int64_t v2 = __asm_sti(a1, a2, v1); // 0x40f588
    char v3 = a2; // 0x40f589
    __writefsbyte(a1, __readfsbyte(a1) | v3);
    *(char *)0x1143e0d6 = *(char *)0x1143e0d6 + (char)v2;
    *(char *)v2 = (char)v1 + v3;
    return __asm_iretd(a1, a2);
}

// Address range: 0x40f599 - 0x40f5a9
int64_t function_40f599(uint64_t a1, int64_t a2) {
    // 0x40f599
    int64_t v1; // 0x40f599
    *(char *)a2 = 2 * (char)v1;
    int64_t v2; // 0x40f599
    *(char *)v2 = *(char *)&v2 + (char)(a1 / 256);
    return v1 & 0x1106cf43;
}

// Address range: 0x40f5d0 - 0x40f5d4
int64_t function_40f5d0(int64_t a1) {
    // 0x40f5d0
    int64_t v1; // 0x40f5d0
    *(int32_t *)v1 = (int32_t)a1;
    return function_40f5d6();
}

// Address range: 0x40f5d4 - 0x40f5d6
int64_t function_40f5d4(void) {
    // 0x40f5d4
    int64_t v1; // 0x40f5d4
    int64_t result = v1;
    bool v2; // 0x40f5d4
    *(int32_t *)result = 2 * (int32_t)result | (int32_t)v2;
    return result;
}

// Address range: 0x40f5d6 - 0x40f5d9
int64_t function_40f5d6(void) {
    // 0x40f5d6
    int64_t result; // 0x40f5d6
    __asm_rcl(*(int32_t *)(result - 56));
    return result;
}

// Address range: 0x40f901 - 0x40f961
int64_t function_40f901(int64_t a1, int64_t a2, int64_t a3) {
    // 0x40f901
    int64_t v1; // 0x40f901
    int64_t v2 = v1;
    int64_t v3 = v2 + 256 * v1 & 0xff00 | v2 & -0xff01; // 0x40f901
    int64_t result; // 0x40f901
    int64_t v4 = result;
    *(char *)v4 = *(char *)&result + (char)v4;
    int64_t v5 = result;
    *(char *)v5 = *(char *)&result + (char)v5;
    char * v6 = (char *)v3; // 0x40f907
    *v6 = *v6 + (char)result;
    int32_t * v7 = (int32_t *)(result + 14); // 0x40f90b
    int32_t v8 = a1; // 0x40f90b
    *v7 = *v7 + v8;
    __asm_int(2);
    int64_t v9; // 0x40f901
    *(char *)a3 = *(char *)&v9 + (char)result;
    int64_t v10 = result;
    *(char *)v10 = *(char *)&result + (char)v10;
    *v6 = *v6 + (char)result;
    int32_t * v11 = (int32_t *)(result + 14); // 0x40f919
    *v11 = *v11 + (int32_t)v1;
    char * v12 = (char *)(a3 + 56); // 0x40f91e
    *v12 = *v12 + (char)v1;
    int64_t v13 = result;
    *(char *)v13 = *(char *)&result + (char)v13;
    unsigned char v14 = *(char *)&result; // 0x40f924
    unsigned char v15 = v14 + (char)result; // 0x40f924
    *(char *)result = v15;
    int64_t v16 = result & 0xffffffff; // 0x40f926
    int64_t v17 = v16; // 0x40f926
    int64_t v18 = a1 & 0xffffffff; // 0x40f926
    char v19 = result;
    *(char *)v16 = v19 - (char)a2 + (char)(v15 < v14);
    *(int32_t *)v18 = *(int32_t *)&v17 | (int32_t)result;
    int64_t v20; // 0x40f901
    *(int32_t *)v20 = *(int32_t *)&v20 + v8;
    char v21 = a1; // 0x40f92e
    char * v22 = (char *)v18; // 0x40f92e
    *v22 = *(char *)&v17 + v21;
    *v22 = *(char *)&v17 + v21;
    uint32_t v23 = *(int32_t *)&v17 + v8; // 0x40f932
    int64_t v24 = v23; // 0x40f932
    result = v24;
    char * v25 = (char *)v24; // 0x40f934
    *v25 = (char)v2;
    char * v26 = (char *)(v24 + 0x4601); // 0x40f937
    *v26 = *v26 + v19;
    char v27 = v23; // 0x40f93d
    *v25 = *v25 + v27;
    char * v28 = (char *)(v3 & -256 | (int64_t)*v25); // 0x40f93f
    *v28 = *v28 + v27;
    int32_t * v29 = (int32_t *)(v16 + 14); // 0x40f943
    *v29 = *v29 + v23;
    char * v30 = (char *)result; // 0x40f948
    *v30 = *v30 + (char)result;
    char * v31 = (char *)result; // 0x40f94b
    *v31 = *v31 + (char)result;
    *v28 = *v28 + (char)result;
    int32_t * v32 = (int32_t *)(result + 14); // 0x40f951
    int32_t v33 = *v32 + (int32_t)v17; // 0x40f951
    *v32 = v33;
    int64_t v34 = v17 - 1; // 0x40f954
    v17 = v34;
    if (v33 == 0 || v34 == 0) {
        // 0x40f956
        return result;
    }
    char * v35 = (char *)result; // 0x40f958
    *v35 = *v35 + (char)result;
    char * v36 = (char *)result; // 0x40f95a
    *v36 = *v36 + (char)result;
    int64_t v37 = result;
    *(char *)v17 = 120;
    return (int64_t)(*(int32_t *)v37 + (int32_t)v37);
}

// Address range: 0x40f962 - 0x40fc3b
int64_t function_40f962(int64_t a1, int64_t a2, int64_t a3) {
    int64_t v1 = a3;
    int64_t v2; // 0x40f962
    char * v3 = (char *)(v2 + 56); // 0x40f964
    *v3 = *v3 + (char)v2;
    int64_t v4; // 0x40f962
    int64_t v5 = v4;
    *(char *)v5 = *(char *)&v4 + (char)v5;
    unsigned char v6 = *(char *)&v4; // 0x40f96a
    unsigned char v7 = v6 + (char)v4; // 0x40f96a
    *(char *)v4 = v7;
    char v8 = v4;
    char v9 = a2; // 0x40f96d
    *(char *)(v4 & 0xffffffff) = v8 - v9 + (char)(v7 < v6);
    int32_t v10 = v4; // 0x40f96f
    int64_t v11; // 0x40f962
    *(int32_t *)(a1 & 0xffffffff) = *(int32_t *)&v11 | v10;
    int64_t v12; // 0x40f962
    *(int32_t *)v12 = *(int32_t *)&v12 + v10;
    uint64_t v13 = (int64_t)&v1; // 0x40f974
    int64_t v14 = v1 & v13;
    int64_t v15 = v13 & -256; // 0x40f975
    char * v16 = (char *)(v14 & 248 | v15); // 0x40f977
    *v16 = *v16 + v8;
    int64_t v17; // 0x40f962
    char * v18 = (char *)(v17 + 0x7510e700); // 0x40f979
    *v18 = *v18 + v9;
    uint32_t v19 = *(int32_t *)&v12 + v10; // 0x40f97f
    int64_t v20 = v19; // 0x40f97f
    *(char *)v2 = *(char *)&v17;
    bool v21; // 0x40f962
    int64_t v22 = v21 ? -1 : 1; // 0x40f982
    int64_t v23 = v22 + v2; // 0x40f982
    int64_t v24 = v17 + v22; // 0x40f982
    int64_t v25 = v15 | (int64_t)(*v16 & (char)v14); // 0x40f983
    char * v26 = (char *)v25; // 0x40f985
    char v27 = v19; // 0x40f985
    *v26 = *v26 + v27;
    char * v28 = (char *)(v24 - 0x7beeff00); // 0x40f987
    *v28 = *v28 + v9;
    int32_t v29 = *(int32_t *)v25 + (int32_t)a2; // 0x40f98d
    unsigned char v30 = *(char *)v24; // 0x40f990
    uint64_t v31 = v24 + v22; // 0x40f990
    unsigned char v32 = *(char *)(v15 | (int64_t)v30) & v30; // 0x40f991
    int64_t v33 = v15 | (int64_t)v32; // 0x40f991
    char * v34 = (char *)v33; // 0x40f993
    *v34 = *v34 + v27;
    char * v35 = (char *)(v31 - 0x74eef200); // 0x40f995
    *v35 = *v35 + (char)v29;
    int32_t * v36 = (int32_t *)v20; // 0x40f99b
    int32_t v37 = *v36 + v29; // 0x40f99b
    char * v38 = (char *)(v31 - 0x68eecc00); // 0x40f9a3
    *v38 = *v38 + (char)v37;
    int32_t v39 = *(int32_t *)(2 * v33 - 52) + v37; // 0x40f9a9
    unsigned char v40 = *v34 & v32; // 0x40f9ad
    int64_t v41 = v15 | (int64_t)v40; // 0x40f9ad
    char * v42 = (char *)v41; // 0x40f9af
    *v42 = *v42 + v27;
    char * v43 = (char *)(v31 - 0x5beeb100); // 0x40f9b1
    *v43 = *v43 + (char)v39;
    uint32_t v44 = *(int32_t *)v23 + v39; // 0x40f9b7
    int64_t v45 = v44; // 0x40f9b7
    *v42 = *v42 + v40 | v40;
    int64_t v46 = v41 & 0xffffffff; // 0x40f9c0
    char * v47 = (char *)(v20 + 17); // 0x40f9c1
    *v47 = *v47 + (char)(v31 / 256);
    *(char *)v23 = (char)v31;
    int64_t v48 = v21 ? 0xffffffff : 1; // 0x40f9c4
    uint32_t v49 = *v36 + (int32_t)v2; // 0x40f9c5
    char v50 = __asm_in_6((int16_t)v44); // 0x40f9c8
    int64_t v51 = v31 & 0xffffff00 | (int64_t)v50; // 0x40f9c8
    char * v52 = (char *)(v51 & -256 | (int64_t)(*(char *)v51 & v50)); // 0x40f9cb
    *v52 = *v52 + v27;
    char * v53 = (char *)(v46 - 0x4fee8600); // 0x40f9cd
    char v54 = v44; // 0x40f9cd
    *v53 = *v53 + v54;
    uint64_t v55 = __asm_hlt(v20, v45, v2); // 0x40f9d6
    unsigned char v56 = *(char *)v55 & (char)v55; // 0x40f9d7
    int64_t v57 = v55 & -256; // 0x40f9d7
    char * v58 = (char *)(v57 | (int64_t)v56); // 0x40f9d9
    *v58 = *v58 + v27;
    char * v59 = (char *)(v46 - 0x49ee7500); // 0x40f9db
    *v59 = *v59 + v54;
    uint32_t v60 = *(int32_t *)(int64_t)v49 + v49 + *(int32_t *)&v12; // 0x40f9e1
    int64_t v61 = v60; // 0x40f9e1
    unsigned char v62 = v56 + 35; // 0x40f9e4
    int64_t v63 = v57 | (int64_t)v62; // 0x40f9e4
    char * v64 = (char *)v63; // 0x40f9e6
    *v64 = *v64 + v62 | v62;
    char * v65 = (char *)(v20 + 0x5f03bc + v45); // 0x40f9eb
    *v65 = *v65 + (char)(v13 / 256);
    unsigned char v66 = v40 | 35; // 0x40f9f2
    int64_t v67 = v13 & 0xffffff00 | (int64_t)v66; // 0x40f9f2
    char * v68 = (char *)v67; // 0x40f9f4
    *v68 = *v68 + v66 | v66;
    int64_t v69 = v63 & 0xffffffff; // 0x40f9f8
    char * v70 = (char *)(v61 + 0x6103c211); // 0x40f9f9
    char v71 = v60 / 256; // 0x40f9f9
    *v70 = *v70 + v71;
    int64_t v72 = v2 + v61;
    char * v73 = (char *)v72; // 0x40f9ff
    *v73 = *v73 + v54;
    char * v74 = (char *)v69; // 0x40fa02
    *v74 = *v74 + v62 | v62;
    char * v75 = (char *)(v61 + 0x6403c911); // 0x40fa07
    *v75 = *v75 + v71;
    char v76 = v60; // 0x40fa0d
    *v73 = *v73 + v76;
    *v68 = *v68 + v66 | v66;
    char * v77 = (char *)(v61 + 0x6703d011); // 0x40fa15
    *v77 = *v77 + v71;
    *v73 = *v73 + (char)(v55 / 256);
    *v74 = *v74 + v62 | v62;
    char * v78 = (char *)(v61 + 0x6a03d711); // 0x40fa23
    *v78 = *v78 + v71;
    unsigned char v79 = (char)(v19 / 256); // 0x40fa29
    *v73 = *v73 + v79;
    *v68 = *v68 + v66 | v66;
    char * v80 = (char *)(v61 + 0x6d03de11); // 0x40fa31
    *v80 = *v80 + v71;
    uint32_t v81 = v44 / 256; // 0x40fa37
    unsigned char v82 = (char)v81; // 0x40fa37
    *v73 = *v73 + v82;
    *v74 = *v74 + v62 | v62;
    char * v83 = (char *)(v61 + 0x7003e511); // 0x40fa3f
    *v83 = *v83 + v71;
    *v73 = *v73 + v71;
    *v68 = *v68 + v66 | v66;
    char * v84 = (char *)(v61 + 0x7303ec11); // 0x40fa4d
    *v84 = *v84 + v71;
    *v73 = *v73 + v62;
    *v74 = *v74 + v27;
    char * v85 = (char *)(v67 - 0x13ee4500); // 0x40fa59
    *v85 = *v85 + v54;
    uint32_t v86 = *(int32_t *)v67 + (int32_t)v67; // 0x40fa5f
    int64_t v87 = v86; // 0x40fa5f
    *(int64_t *)0x800001a = 0x8000022;
    uint32_t v88 = *(int32_t *)v69 & (int32_t)v63; // 0x40fa63
    int64_t v89 = v88; // 0x40fa63
    char * v90 = (char *)v89; // 0x40fa65
    *v90 = *v90 + v27;
    char * v91 = (char *)(v87 - 0xcee4500); // 0x40fa67
    *v91 = *v91 + v54;
    uint32_t v92 = *(int32_t *)v89 & v88; // 0x40fa71
    int64_t v93 = v92; // 0x40fa71
    char * v94 = (char *)v93; // 0x40fa73
    *v94 = *v94 + v27;
    char * v95 = (char *)(v87 - 0x4ee4500); // 0x40fa75
    *v95 = *v95 + v54;
    uint32_t v96 = *v36 + (int32_t)(v23 + v48) + *(int32_t *)(2 * v93 + 100); // 0x40fa7b
    uint32_t v97 = *(int32_t *)v93 & v92; // 0x40fa7f
    int64_t v98 = v97; // 0x40fa7f
    char * v99 = (char *)v98; // 0x40fa81
    *v99 = *v99 + v27;
    char * v100 = (char *)(v87 + 0x311bb00); // 0x40fa83
    *v100 = *v100 + v54;
    int64_t v101 = v98 & 0xffffff00; // 0x40fa89
    *v73 = *v73 + v79;
    char * v102 = (char *)(v101 | (int64_t)((v97 + 127) % 256)); // 0x40fa8f
    *v102 = *v102 + v27;
    char * v103 = (char *)(v87 + 0xb11bb00); // 0x40fa91
    *v103 = *v103 + v54;
    *v73 = *v73 + v82;
    char * v104 = (char *)(v101 | (int64_t)((v97 + 1) % 256)); // 0x40fa9d
    *v104 = *v104 + v27;
    char * v105 = (char *)(v87 + 0x1311bb00); // 0x40fa9f
    *v105 = *v105 + v54;
    *v73 = *v73 + v71;
    char * v106 = (char *)(v101 | (int64_t)((v97 + 134) % 256)); // 0x40faab
    *v106 = *v106 + v27;
    char * v107 = (char *)(v87 + 0x1b11bb00); // 0x40faad
    *v107 = *v107 + v54;
    uint32_t v108 = v97 + 14;
    char * v109 = (char *)(v72 + 0x80000); // 0x40fab5
    *v109 = *v109 + (char)v108;
    uint32_t v110 = (int32_t)v101;
    char * v111 = (char *)(v61 - 0x74fbdcef); // 0x40fabd
    *v111 = *v111 + v71;
    *v109 = *v109 + v27;
    char * v112 = (char *)(v61 - 0x71fbd4ef); // 0x40facb
    *v112 = *v112 + v71;
    *v109 = *v109 + v54;
    char * v113 = (char *)(v61 - 0x6efbccef); // 0x40fad9
    *v113 = *v113 + v71;
    *v109 = *v109 + v76;
    int64_t v114 = v108 % 256 | v110; // 0x40fae6
    unsigned char v115 = (char)(v110 / 256) + v79; // 0x40fae7
    int64_t v116 = v115; // 0x40fae7
    int64_t v117 = 256 * v116 | v20 & 0xffff00ff; // 0x40fae7
    int32_t * v118 = (int32_t *)(v114 + 0x8000022); // 0x40fae9
    *v118 = v96 + (int32_t)(v115 < v79) + *v118;
    int64_t v119 = v12; // 0x40faec
    *v109 = *v109 + v115;
    unsigned char v120 = 2 * (char)v81; // 0x40faf5
    int64_t v121 = v45 & 0xffff00ff | (int64_t)(512 * v81 & 0xfe00); // 0x40faf5
    int32_t * v122 = (int32_t *)(v117 + 4); // 0x40faf7
    *v122 = v86 + (int32_t)(v120 < v82) + *v122;
    int64_t v123 = v119 + 256 * v20 & 0xff00 | v119 & 0xffff00ff; // 0x40fafb
    uint32_t v124 = *(int32_t *)v123 & (int32_t)v123; // 0x40fafd
    int64_t v125 = v124; // 0x40fafd
    char * v126 = (char *)v125; // 0x40faff
    *v126 = *v126 + v27;
    char * v127 = (char *)(v87 + 0x3c121700); // 0x40fb01
    *v127 = *v127 + v54;
    int64_t v128 = v125 & 0xffff0000 | (int64_t)((v124 + 151) % 256) | 256 * ((int64_t)(v124 / 256) + v61) & 0xff00; // 0x40fb09
    uint32_t v129 = *(int32_t *)v128 & (int32_t)v128; // 0x40fb0b
    int64_t v130 = v129; // 0x40fb0b
    char * v131 = (char *)v130; // 0x40fb0d
    *v131 = *v131 + v27;
    char * v132 = (char *)(v87 + 0x41122900); // 0x40fb0f
    *v132 = *v132 + v54;
    int64_t v133 = v130 & 0xffff0000 | (int64_t)((v129 + 152) % 256) | 256 * ((int64_t)(v129 / 256) + v116) & 0xff00; // 0x40fb17
    uint32_t v134 = *(int32_t *)v133 & (int32_t)v133; // 0x40fb19
    int64_t v135 = v134; // 0x40fb19
    char * v136 = (char *)v135; // 0x40fb1b
    *v136 = *v136 + v27;
    char * v137 = (char *)(v87 + 0x75123c00); // 0x40fb1d
    *v137 = *v137 + v54;
    char v138 = *(char *)(v117 + 0x23fc00) + v76; // 0x40fb23
    *v136 = *v136 + v27;
    char * v139 = (char *)(v87 + 0x5e124d00); // 0x40fb2b
    *v139 = *v139 + v54;
    uint32_t v140 = v134 + 154;
    *(char *)0x8000022 = *(char *)0x8000022 + v138;
    char * v141 = (char *)(v135 & 0xffffff00 | (int64_t)(v140 % 256)); // 0x40fb36
    char v142 = v140; // 0x40fb36
    *v141 = *v141 + v142 | v142;
    char * v143 = (char *)(v87 + 18); // 0x40fb3b
    *v143 = *v143 + v71;
    int64_t v144 = *(int64_t *)0x8000022; // 0x40fb3e
    uint32_t v145 = v86 + 155;
    int64_t v146 = v87 & 0xffffff00 | (int64_t)(v145 % 256); // 0x40fb3f
    *(char *)0x800002a = *(char *)0x800002a + v115;
    char * v147 = (char *)v146; // 0x40fb44
    char v148 = v145; // 0x40fb44
    *v147 = *v147 + v148 | v148;
    char * v149 = (char *)(v146 - 0x63fb94ee); // 0x40fb49
    *v149 = *v149 + v54;
    *(char *)0x800002a = *(char *)0x800002a + v120;
    char * v150 = (char *)(v144 & 0xffffffff); // 0x40fb52
    char v151 = v144; // 0x40fb52
    *v150 = *v150 + v151 | v151;
    char * v152 = (char *)(v114 - 0x62fb8fee); // 0x40fb57
    *v152 = *v152 + v115;
    *(char *)0x800002a = *(char *)0x800002a + v71;
    *v147 = *v147 + v148 | v148;
    char * v153 = (char *)(2 * v121 + 0x9e045e); // 0x40fb65
    *v153 = *v153 + v71;
    uint64_t v154 = v144 & 0xffffff00; // 0x40fb6c
    char * v155 = (char *)v154; // 0x40fb6f
    *v155 = *v155 + v27;
    char * v156 = (char *)(v146 + 0x5e12cf00); // 0x40fb71
    *v156 = *v156 + v54;
    int64_t v157 = v154 | 159; // 0x40fb77
    *(char *)0x800002a = *(char *)0x800002a + v115;
    char * v158 = (char *)v157; // 0x40fb7d
    *v158 = *v158 + v27;
    char * v159 = (char *)(v146 + 0x7512dc00); // 0x40fb7f
    *v159 = *v159 + v54;
    int64_t v160 = (int64_t)(*(char *)(v157 + 0x247c00) + (char)(v154 / 256)); // 0x40fb85
    int64_t v161 = 256 * v160 | v157 & 0xffff009f; // 0x40fb85
    char * v162 = (char *)v161; // 0x40fb8b
    *v162 = *v162 + v27;
    char * v163 = (char *)(v146 + 0x7b12ec00); // 0x40fb8d
    *v163 = *v163 + v54;
    *(char *)0x808002a = *(char *)0x808002a + v27;
    int64_t v164 = v161 & 0xffffff00;
    int64_t v165 = v164 | 64; // 0x40fb9c
    int64_t v166 = 256 * (int64_t)(v115 + (char)(v86 / 256)) | v87 & 0xffff0000; // 0x40fb9d
    char * v167 = (char *)v166; // 0x40fba7
    *v167 = *v167 + v27;
    char * v168 = (char *)(v165 - 0x74ed0000); // 0x40fba9
    *v168 = *v168 + v54;
    *(char *)0x808002a = *(char *)0x808002a + v115;
    int64_t v169 = v166 | 169; // 0x40fbb8
    char * v170 = (char *)v165; // 0x40fbb9
    unsigned char v171 = *v170; // 0x40fbb9
    *v170 = v171 + 64;
    int32_t v172 = *(int32_t *)(v121 - 0x43ff53fc); // 0x40fbbb
    char * v173 = (char *)v164; // 0x40fbc3
    *v173 = *v173 + v27;
    char * v174 = (char *)(v169 - 0x66ed1400); // 0x40fbc5
    char v175 = v172 + (int32_t)v121 + (int32_t)(v171 > 191); // 0x40fbc5
    *v174 = *v174 + v175;
    int64_t v176 = v160 + v20; // 0x40fbcd
    int64_t v177 = v144 & 0xffff0000; // 0x40fbcb
    char * v178 = (char *)(256 * v176 & 0xff00 | v177); // 0x40fbd1
    *v178 = *v178 + v27;
    char * v179 = (char *)(v169 - 0x5ded1400); // 0x40fbd3
    *v179 = *v179 + v175;
    int64_t v180 = v138 + (char)v176; // 0x40fbdb
    char * v181 = (char *)(256 * v180 | v177); // 0x40fbdf
    *v181 = *v181 + v27;
    char * v182 = (char *)(v169 - 0x7becf200); // 0x40fbe1
    *v182 = *v182 + v175;
    uint32_t v183 = *(int32_t *)((int64_t)v96 + 0x24e400) + (int32_t)v169; // 0x40fbe7
    int64_t v184 = v183; // 0x40fbe7
    *v181 = *v181 + v27;
    char * v185 = (char *)(v184 - 0x55ece500); // 0x40fbef
    *v185 = *v185 + v175;
    int64_t v186 = v180 + v116; // 0x40fbf7
    int64_t v187 = 256 * v186 & 0xff00 | v177; // 0x40fbf5
    char * v188 = (char *)v187; // 0x40fbfb
    *v188 = *v188 + v27;
    char * v189 = (char *)(v184 - 0x58ef1900); // 0x40fbfd
    *v189 = *v189 + v175;
    unsigned char v190 = *(char *)(v117 + 0x24fc00) + v71; // 0x40fc03
    *v188 = *v188 + v27;
    char * v191 = (char *)(v184 + 0x41133000); // 0x40fc0b
    *v191 = *v191 + v175;
    *(char *)0x80000 = *(char *)0x80000 + v27;
    unsigned char v192 = v190 + (char)(v183 / 256); // 0x40fc1b
    char * v193 = (char *)(v117 + 0x1c00bc04); // 0x40fc1d
    *v193 = v192 + (char)(v192 < v190) + *v193;
    char * v194 = (char *)((v187 | 187) + 19); // 0x40fc29
    *v194 = *v194 + v27;
    uint64_t v195 = *(int64_t *)0x800002a; // 0x40fc2c
    *(char *)0x80000 = *(char *)0x80000 + (char)v186;
    char * v196 = (char *)((v187 | 122) + 19); // 0x40fc37
    *v196 = *v196 + (char)(v195 / 256);
    return v195 & 0xffffffff;
}

// Address range: 0x40fc9e - 0x40fca1
int64_t function_40fc9e(int64_t a1) {
    // 0x40fc9e
    int64_t result; // 0x40fc9e
    return result;
}

// Address range: 0x40fd96 - 0x40fd98
int64_t function_40fd96(void) {
    // 0x40fd96
    int64_t v1; // 0x40fd96
    return function_40fdad(v1, v1);
}

// Address range: 0x40fda9 - 0x40fdad
int64_t function_40fda9(int64_t a1) {
    // 0x40fda9
    int64_t result; // 0x40fda9
    char * v1 = (char *)(2 * result); // 0x40fda9
    *v1 = *v1 + (char)a1;
    return result;
}

// Address range: 0x40fdad - 0x40fdcf
int64_t function_40fdad(int64_t a1, uint64_t a2) {
    // 0x40fdad
    int64_t v1; // 0x40fdad
    uint64_t v2 = v1;
    int64_t v3 = v1;
    *(char *)v3 = (char)v3 + (char)a1;
    char * v4 = (char *)(v2 - 0x57e9ef00); // 0x40fdaf
    *v4 = *v4 + (char)a2;
    int64_t v5 = v3 + 0x265400cd; // 0x40fdb5
    int64_t result = v5 & 0xffffffff; // 0x40fdb5
    char * v6 = (char *)result; // 0x40fdba
    char v7 = v5; // 0x40fdba
    *v6 = *v6 + v7 | v7;
    int64_t v8; // 0x40fdad
    char * v9 = (char *)(v8 + a2); // 0x40fdbf
    *v9 = *v9 + (char)(v2 / 256);
    uint32_t v10 = *(int32_t *)&v8 + 0x265c00cd; // 0x40fdc3
    char * v11 = (char *)(int64_t)v10; // 0x40fdc8
    char v12 = v10; // 0x40fdc8
    *v11 = *v11 + v12 | v12;
    int64_t v13; // 0x40fdad
    *(char *)v13 = *(char *)&v13 + (char)(a2 / 256);
    return result;
}

// Address range: 0x40fdd1 - 0x40fded
int64_t function_40fdd1(uint64_t a1, int64_t a2) {
    // 0x40fdd1
    int64_t v1; // 0x40fdd1
    char * v2 = (char *)(2 * v1); // 0x40fdd3
    *v2 = *v2 + (char)(v1 / 256);
    int64_t v3; // 0x40fdd1
    *(char *)v3 = *(char *)&v3 + (char)(a1 / 256 + a1);
    char * v4 = (char *)(v1 - 0x41e9b600); // 0x40fdd9
    *v4 = *v4 + (char)a2;
    int64_t v5 = v3 + 0x266c00cd; // 0x40fddf
    char * v6 = (char *)(v5 & 0xffffffff); // 0x40fde4
    char v7 = v5; // 0x40fde4
    *v6 = *v6 + v7 | v7;
    char * v8 = (char *)(v1 + 22); // 0x40fde9
    *v8 = *v8 + v7;
    return v1 & 0xffffffff;
}

// Address range: 0x40fe16 - 0x40fe1b
int64_t function_40fe16(void) {
    // 0x40fe16
    return function_ffffffff8c41cb20();
}

// Address range: 0x40fecc - 0x40fed1
int64_t function_40fecc(void) {
    // 0x40fecc
    return function_fffffffff441cbd6();
}

// Address range: 0x410022 - 0x41002b
int64_t function_410022(int64_t a1, int64_t a2) {
    // 0x410022
    int64_t v1; // 0x410022
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x410022
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result | (char)v3;
    *(char *)result = (char)a1;
    return result;
}

// Address range: 0x410076 - 0x41d2e2
int64_t function_410076(int64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7) {
    // 0x410076
    int64_t v1; // 0x410076
    int64_t v2 = v1;
    int64_t v3 = a5;
    *(char *)v2 = 2 * (char)v2;
    int64_t v4; // 0x410076
    int64_t v5 = v4;
    *(char *)v5 = *(char *)&v4 | (char)v5;
    unsigned char v6 = *(char *)&v4; // 0x41007a
    *(char *)v4 = (char)a1;
    uint64_t v7 = v4; // 0x41007c
    unsigned char v8 = (char)v7 & 27; // 0x41007c
    unsigned char v9 = llvm_ctpop_i8(v8); // 0x41007c
    int64_t v10 = v7 & -256 | (int64_t)v8; // 0x41007c
    v4 = v10;
    if (v9 % 2 != 0) {
        char v11 = *(char *)(v1 - 0xe46a65); // 0x41d28c
        return 256 * (int64_t)(v11 | (char)(v7 / 256)) | v10 & -0xffe5;
    }
    // 0x41d24a
    int64_t v12; // 0x410076
    *(char *)v1 = *(char *)&v12;
    unsigned char v13 = v6 % 32; // 0x41d24b
    int64_t v14 = a2; // 0x41d24b
    if (v13 != 0) {
        v14 = 256 * (int64_t)((char)(a2 / 256) << v13) | a2 & -0xff01;
    }
    char v15 = v4;
    *(char *)0x22e7bddca9a2ea7b = v15;
    char * v16 = (char *)(8 * (a1 & 0x1fffffffffffff00 | (int64_t)v6) + 0x2c5b90c6); // 0x41d258
    *v16 = *v16 | v15;
    __asm_in_6((int16_t)v14);
    unsigned char v17 = *(char *)0x9e45677db237301; // 0x41d2d9
    return (int64_t)&v3 & -256 | (int64_t)v17;
}

// Address range: 0x41d2f3 - 0x41d32b
int64_t function_41d2f3(int32_t a1) {
    int32_t v1 = a1;
    int64_t v2; // 0x41d2f3
    *(int32_t *)(v2 + 35) = (int32_t)(int64_t)&v1;
    int64_t v3; // 0x41d2f3
    *(char *)v3 = *(char *)&v3 + (char)v2;
    bool v4; // 0x41d2f3
    int32_t v5 = *(int32_t *)(v2 + 69 + (v2 + 0xf54fbc28 + (int64_t)v4 & 0xffffffff)); // 0x41d302
    int32_t * v6 = (int32_t *)(v2 - 0x4303bd59); // 0x41d309
    int64_t v7; // 0x41d2f3
    *v6 = *v6 | (int32_t)(int64_t)&v7;
    char v8 = *(char *)0xed109d5f1787b75; // 0x41d311
    return v5 & 0x1581b400 | (int32_t)(v8 & 105);
}

// Address range: 0x41d347 - 0x41d367
int64_t function_41d347(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41d347
    int64_t v1; // 0x41d347
    int64_t v2 = __asm_iretd(a1, (int64_t)(-17 * *(int32_t *)((v1 % 256 | v1) + 15))); // 0x41d34e
    float80_t v3; // 0x41d347
    *(float80_t *)v1 = __asm_fbstp(v3);
    int32_t * v4 = (int32_t *)((2 * v2 & 0x1fffffffe) + 0x6c3843a5); // 0x41d355
    *v4 = 2 * *v4;
    return v1 & 0xffffff00 & v1 | 138;
}

// Address range: 0x41d372 - 0x41d373
int64_t function_41d372(void) {
    // 0x41d372
    int64_t result; // 0x41d372
    return result;
}

// Address range: 0x41d3a9 - 0x41d3ac
int64_t function_41d3a9(int64_t a1) {
    // 0x41d3a9
    int64_t result; // 0x41d3a9
    return result;
}

// Address range: 0x41d3b3 - 0x41d3b5
int64_t function_41d3b3(void) {
    // 0x41d3b3
    return function_41d372();
}

// Address range: 0x41d3bd - 0x41d49f
int64_t function_41d3bd(uint64_t a1, int64_t a2, int64_t a3) {
    // 0x41d3bd
    int64_t v1; // 0x41d3bd
    int32_t * v2 = (int32_t *)(v1 - 126); // 0x41d3bd
    uint32_t v3 = *v2; // 0x41d3bd
    uint32_t v4 = (int32_t)a2; // 0x41d3bd
    *v2 = v3 - v4;
    char v5 = v1 / 256 & v1; // 0x41d3c3
    int64_t v6; // 0x41d3bd
    if (v5 == 0) {
        char * v7 = (char *)(v1 - 0x82a0635 + v6); // 0x41d3cb
        unsigned char v8 = *v7; // 0x41d3cb
        *v7 = v8 / 128 | 2 * v8;
        __asm_in(-57);
        return function_aeae6bd();
    }
    char v9 = *(char *)(v1 - 55); // 0x41d3c0
    int64_t v10 = a2; // 0x41d429
    bool v11 = false; // 0x41d429
    int64_t result; // 0x41d3bd
    if (v5 >= 0) {
        // 0x41d42b
        v10 = a2 & -256 | 47;
        unsigned char v12 = (char)v1 & -19; // 0x41d42f
        if (v12 == 0) {
            int64_t v13 = __asm_sti(a1 & -0x10000 | 256 * (int64_t)((char)(v3 < v4) + (char)(a1 / 256) - v9) | 194, v10, v1); // 0x41d435
            uint64_t v14 = 27 * v1; // 0x41d442
            *(int32_t *)v1 = *(int32_t *)&v6;
            *(char *)((v14 & 0xffffffff) - 0x8a7f729) = (char)(v14 / 256);
            __asm_out_4((int16_t)a3, (char)v13);
            return 256 * (int64_t)(*(char *)-0x453876ae ^ 30) | v13 & -0xff01;
        }
        int64_t v15 = v1 & -256 | (int64_t)v12; // 0x41d42f
        int32_t * v16 = (int32_t *)v15; // 0x41d465
        int32_t v17 = *v16 & (int32_t)v6; // 0x41d465
        *v16 = v17;
        result = v15;
        v11 = v17 == 0;
    }
    // 0x41d468
    *(char *)v1 = *(char *)&v6;
    bool v18; // 0x41d3bd
    int64_t v19 = v18 ? -1 : 1; // 0x41d468
    v6 += v19;
    if (v11) {
        // 0x41d48a
        *(char *)(v19 + v1) = __asm_insb((int16_t)v10);
        return (int64_t)*(int32_t *)v6;
    }
    // 0x41d46b
    return result;
}

// Address range: 0x41d4d4 - 0x41d513
int64_t function_41d4d4(int64_t a1, int64_t a2) {
    // 0x41d4d4
    if (a1 == 0) {
        // 0x41d50b
        return __asm_int3(0, a2) & -86;
    }
    // 0x41d4db
    int64_t v1; // 0x41d4d4
    int64_t result = v1 & 0x9994cff1 | 0x666b300e; // 0x41d4d4
    *(char *)(a2 - 0x676a8f11) = (char)a2;
    *(int32_t *)0x257011ac1f7f99cf = (int32_t)result;
    return result;
}

// Address range: 0x41d514 - 0x41d522
int64_t function_41d514(int64_t a1, int64_t a2) {
    // 0x41d514
    int64_t v1; // 0x41d514
    char * v2 = (char *)v1; // 0x41d514
    while (true) {
        char * v3 = v2;
        *v3 = *v3 | (char)a2;
        v2 = (char *)0xa288e12e;
    }
}

// Address range: 0x41d522 - 0x41d5e6
int64_t function_41d522(uint64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41d522
    int64_t v1; // 0x41d522
    unsigned char v2 = (char)v1; // 0x41d527
    unsigned char v3 = *(char *)(8 * v1 + a1) + v2; // 0x41d527
    bool v4; // 0x41d522
    unsigned char v5 = v3 + (char)v4; // 0x41d527
    bool v6 = v4 ? v5 <= v2 : v3 < v2; // 0x41d527
    int32_t v7 = v6; // 0x41d533
    uint32_t v8 = (int32_t)(v1 & 0xffffff00 | (int64_t)v5) + v7; // 0x41d533
    int32_t v9 = -0x2658d6f2 - v8; // 0x41d533
    if (llvm_ctpop_i8((char)v9) % 2 != 0) {
        // 0x41d537
        *(int32_t *)v1 = (int32_t)v1;
        return (int64_t)*(int32_t *)-0x7300e0dc4cddd3e2;
    }
    // 0x41d565
    if (v9 != 0 && !((v6 ? v8 != -1 || v9 - v7 > 0xd9a7290e : v8 > 0xd9a7290e))) {
        // 0x41d53d
        *(int32_t *)a1 = (int32_t)a1 - (int32_t)v1;
        return __asm_int3(a1, a2);
    }
    char * v10 = (char *)(a1 - 21); // 0x41d569
    char v11 = *v10; // 0x41d569
    char v12 = a1 / 256; // 0x41d569
    char v13 = v11 + v12; // 0x41d569
    *v10 = v13;
    if (((v13 ^ v11) & (v13 ^ v12)) < 0) {
        // 0x41d592
        return __asm_in(-26) ^ 158;
    }
    // 0x41d56f
    return __asm_in(119) | -0x518bc68;
}

// Address range: 0x41d611 - 0x41d612
int64_t function_41d611(void) {
    // 0x41d611
    int64_t result; // 0x41d611
    return result;
}

// Address range: 0x41d622 - 0x41d624
int64_t function_41d622(void) {
    // 0x41d622
    int64_t result; // 0x41d622
    return result;
}

// Address range: 0x41d63f - 0x41d64c
int64_t function_41d63f(int64_t a1, int64_t a2) {
    char v1 = __asm_in_2(-51); // 0x41d63f
    int32_t v2 = *(int32_t *)(a1 + 0x7d36353); // 0x41d643
    int64_t v3; // 0x41d63f
    int64_t result = v3 & -256 | (int64_t)v1; // 0x41d649
    if (llvm_ctpop_i8((char)(v2 & (int32_t)v3)) % 2 == 0) {
        result = function_41d611();
    }
    // 0x41d64b
    return result;
}

// Address range: 0x41d655 - 0x41d658
int64_t function_41d655(int64_t a1) {
    // 0x41d655
    int64_t result; // 0x41d655
    return result;
}

// Address range: 0x41d681 - 0x41d684
int64_t function_41d681(int64_t a1) {
    // 0x41d681
    int64_t result; // 0x41d681
    return result;
}

// Address range: 0x41d691 - 0x41d69b
int64_t function_41d691(void) {
    // 0x41d691
    int64_t v1; // 0x41d691
    __asm_out_1(-59, (char)v1);
    return function_41d704();
}

// Address range: 0x41d6c6 - 0x41d6d3
int64_t function_41d6c6(void) {
    // 0x41d6c6
    return function_41d6ee();
}

// Address range: 0x41d6ec - 0x41d6ed
int64_t function_41d6ec(void) {
    // 0x41d6ec
    int64_t result; // 0x41d6ec
    return result;
}

// Address range: 0x41d6ee - 0x41d6ef
int64_t function_41d6ee(void) {
    // 0x41d6ee
    int64_t result; // 0x41d6ee
    return result;
}

// Address range: 0x41d6f4 - 0x41d6f5
int64_t function_41d6f4(void) {
    // 0x41d6f4
    int64_t result; // 0x41d6f4
    return result;
}

// Address range: 0x41d6fe - 0x41d6ff
int64_t function_41d6fe(void) {
    // 0x41d6fe
    int64_t result; // 0x41d6fe
    return result;
}

// Address range: 0x41d704 - 0x41d70a
int64_t function_41d704(void) {
    // 0x41d704
    int64_t result; // 0x41d704
    int32_t * v1 = (int32_t *)(result - 106); // 0x41d704
    *v1 = *v1 & (int32_t)result;
    return result;
}

// Address range: 0x41d717 - 0x41d71c
int64_t function_41d717(int64_t a1) {
    // 0x41d717
    return function_41d6fe();
}

// Address range: 0x41d753 - 0x41d758
int64_t function_41d753(int64_t a1, int64_t a2) {
    int64_t result; // 0x41d753
    if (a1 != 1) {
        result = function_41d6ec();
    }
    // 0x41d755
    return result;
}

// Address range: 0x41d7cf - 0x41d7db
int64_t function_41d7cf(void) {
    uint32_t result = *(int32_t *)0x3c3d4f5eec796a0b; // 0x41d7cf
    __asm_out_1(92, (char)result);
    return result;
}

// Address range: 0x41d80e - 0x41d83b
int64_t function_41d80e(uint64_t a1, int64_t a2) {
    char * v1 = (char *)(a1 + 0x17764f57); // 0x41d824
    *v1 = *v1 + (char)(a1 / 256);
    int64_t v2; // 0x41d80e
    __asm_pandn(v2, v2);
    __asm_wait(a1, a2);
    return function_ffffffff93a5c3de();
}

// Address range: 0x41d879 - 0x41d87d
int64_t function_41d879(void) {
    // 0x41d879
    int64_t v1; // 0x41d879
    *(int32_t *)v1 = (int32_t)v1;
    return function_41d894(v1, v1);
}

// Address range: 0x41d87d - 0x41d883
int64_t function_41d87d(int64_t a1, int64_t a2) {
    // 0x41d87d
    int64_t result; // 0x41d87d
    bool v1; // 0x41d87d
    if (v1 || false) {
        result = function_41d8da();
    }
    // 0x41d87f
    return result;
}

// Address range: 0x41d888 - 0x41d88d
int64_t function_41d888(void) {
    // 0x41d888
    return function_12246426();
}

// Address range: 0x41d894 - 0x41d89c
int64_t function_41d894(int64_t a1, int64_t a2) {
    int32_t * v1 = (int32_t *)(a2 + 69); // 0x41d894
    int64_t result; // 0x41d894
    *v1 = *v1 & (int32_t)result;
    return result;
}

// Address range: 0x41d8da - 0x41d8db
int64_t function_41d8da(void) {
    // 0x41d8da
    int64_t result; // 0x41d8da
    return result;
}

// Address range: 0x41d8dc - 0x41d8df
int64_t function_41d8dc(int64_t a1) {
    // 0x41d8dc
    int64_t result; // 0x41d8dc
    return result;
}

// Address range: 0x41d935 - 0x41d938
int64_t function_41d935(int64_t a1) {
    // 0x41d935
    int64_t result; // 0x41d935
    return result;
}

// Address range: 0x41d93b - 0x41d93c
int64_t function_41d93b(void) {
    // 0x41d93b
    int64_t result; // 0x41d93b
    return result;
}

// Address range: 0x41d99e - 0x41d9a3
int64_t function_41d99e(void) {
    // 0x41d99e
    return function_6015db9f();
}

// Address range: 0x41d9d9 - 0x41d9dc
int64_t function_41d9d9(int64_t a1) {
    // 0x41d9d9
    int64_t result; // 0x41d9d9
    return result;
}

// Address range: 0x41d9f8 - 0x41d9fb
int64_t function_41d9f8(int64_t a1) {
    // 0x41d9f8
    int64_t result; // 0x41d9f8
    return result;
}

// Address range: 0x41da03 - 0x41da07
int64_t function_41da03(void) {
    // 0x41da03
    int64_t result; // 0x41da03
    return result;
}

// Address range: 0x41da07 - 0x41da1a
int64_t function_41da07(void) {
    // 0x41da07
    int64_t result; // 0x41da07
    float80_t v1; // 0x41da07
    *(int16_t *)(result + 0x405fd438) = (int16_t)v1;
    *(int32_t *)-0x47e3c38b6713c7c4 = (int32_t)result;
    return result;
}

// Address range: 0x41da6d - 0x41da75
int64_t function_41da6d(int64_t a1) {
    // 0x41da6d
    int64_t v1; // 0x41da6d
    *(int32_t *)v1 = (int32_t)a1;
    return function_39f8e121();
}

// Address range: 0x41da96 - 0x41daa8
int64_t function_41da96(int64_t a1, int64_t a2) {
    // 0x41da96
    int64_t v1; // 0x41da96
    __asm_iretd(a1, 256 * v1 + a2 & 0xff00 | a2 & -0xff01);
    return function_eed5eaa();
}

// Address range: 0x41daae - 0x41dab1
int64_t function_41daae(void) {
    // 0x41daae
    int64_t result; // 0x41daae
    return result;
}

// Address range: 0x41dab7 - 0x41daba
int64_t function_41dab7(int64_t a1, int64_t a2) {
    // 0x41dab7
    int64_t result; // 0x41dab7
    return result;
}

// Address range: 0x41dad7 - 0x41db89
int64_t function_41dad7(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41dad7
    int64_t v1; // 0x41dad7
    int64_t v2 = v1;
    bool v3; // 0x41dad7
    if (v3) {
        // 0x41db34
        return v2 & -256 | (int64_t)*(char *)-0x377595031ec597fd;
    }
    // 0x41dad9
    return (v2 + 20) % 256 | v2 & -256;
}

// Address range: 0x41db8b - 0x41dbc1
int64_t function_41db8b(void) {
    // 0x41db8b
    int64_t result; // 0x41db8b
    *(int32_t *)-0x36e4d3f8c069d25 = (int32_t)result;
    __asm_fbld(*(float80_t *)(result - 45));
    return result;
}

// Address range: 0x41dc14 - 0x41dc2d
int64_t function_41dc14(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41dc14
    int64_t v1; // 0x41dc14
    __asm_hlt(a1, a2, v1);
    *(int32_t *)(a2 + 0x1a2ad9e2) = (int32_t)v1;
    return function_ffffffff948556b9();
}

// Address range: 0x41dc87 - 0x41dcac
int64_t function_41dc87(int64_t a1, int64_t a2) {
    // 0x41dc87
    int64_t v1; // 0x41dc87
    char * v2 = (char *)(v1 - 0x6d980e2b); // 0x41dc87
    bool v3; // 0x41dc87
    *v2 = (char)v3 + (char)v1 + *v2;
    uint32_t v4 = 0x10000 * (int32_t)v1 >> 16; // 0x41dc8d
    unsigned char v5 = *(char *)(v1 + (int64_t)(v4 % 256)); // 0x41dc8e
    uint32_t v6 = *(int32_t *)0x4c3a80c6; // 0x41dc92
    char * v7 = (char *)(a1 - 0x6b088fd3); // 0x41dc9e
    unsigned char v8 = *v7; // 0x41dc9e
    unsigned char v9 = (char)a1 % 32; // 0x41dc9e
    bool v10 = v6 < 0x1b58dc83; // 0x41dc9e
    if (v9 != 0) {
        unsigned char v11 = v9 - 1; // 0x41dc9e
        *v7 = (char)(v6 < 0x1b58dc83) << v11 | v8 << v9 | (char)((int16_t)v8 >> (int16_t)(9 - v9));
        v10 = (v8 & 128 >> v11) != 0;
    }
    int64_t v12; // 0x41dc87
    *(int32_t *)v1 = *(int32_t *)&v12;
    return ((int64_t)v5 | (int64_t)(v4 & -256)) + 0x360c6d2d + (int64_t)v10 & 0xffffffff;
}

// Address range: 0x41dcb5 - 0x41dcb6
int64_t function_41dcb5(int64_t a1) {
    // 0x41dcb5
    int64_t result; // 0x41dcb5
    return result;
}

// Address range: 0x41dccc - 0x41dcce
int64_t function_41dccc(int64_t a1, int64_t a2) {
    // 0x41dccc
    int64_t v1; // 0x41dccc
    return v1 & -256 | (int64_t)__asm_in_6((int16_t)a2);
}

// Address range: 0x41dcde - 0x41dce7
int64_t function_41dcde(void) {
    // 0x41dcde
    int64_t v1; // 0x41dcde
    *(char *)v1 = (char)v1;
    return function_b502d54();
}

// Address range: 0x41dd20 - 0x41dd3a
int64_t function_41dd20(int64_t a1, int64_t a2) {
    // 0x41dd20
    int64_t v1; // 0x41dd20
    *(int32_t *)(v1 - 0x68c9c37e) = (int32_t)a2;
    char * v2 = (char *)(v1 + 120); // 0x41dd26
    bool v3; // 0x41dd20
    *v2 = (char)v3 + (char)v1 + *v2;
    __asm_out(126, (int32_t)v1);
    return v1 & -112;
}

// Address range: 0x41dd3a - 0x41dd3c
int64_t function_41dd3a(int64_t a1) {
    // 0x41dd3a
    int64_t result; // 0x41dd3a
    return result;
}

// Address range: 0x41dd40 - 0x41dd43
int64_t function_41dd40(void) {
    // 0x41dd40
    int64_t result; // 0x41dd40
    return result;
}

// Address range: 0x41dd45 - 0x41dd46
int64_t function_41dd45(void) {
    // 0x41dd45
    int64_t result; // 0x41dd45
    return result;
}

// Address range: 0x41dd53 - 0x41dd54
int64_t function_41dd53(void) {
    // 0x41dd53
    int64_t result; // 0x41dd53
    return result;
}

// Address range: 0x41dd54 - 0x41dd55
int64_t function_41dd54(void) {
    // 0x41dd54
    int64_t result; // 0x41dd54
    return result;
}

// Address range: 0x41dd73 - 0x41dd74
int64_t function_41dd73(int64_t a1) {
    // 0x41dd73
    int64_t result; // 0x41dd73
    return result;
}

// Address range: 0x41dd74 - 0x41dd75
int64_t function_41dd74(int64_t a1) {
    // 0x41dd74
    int64_t result; // 0x41dd74
    return result;
}

// Address range: 0x41dd75 - 0x41dd96
int64_t function_41dd75(uint64_t a1) {
    // 0x41dd75
    int64_t v1; // 0x41dd75
    int64_t v2 = v1;
    int64_t v3 = v1 + 0x483d72f3; // 0x41dd75
    if (v3 < 0 != (v3 & (v1 ^ -0x8000000000000000)) < 0) {
        function_41dd45();
    }
    char v4 = *(char *)(a1 + 0x536b9db4); // 0x41dd85
    uint64_t v5 = v1 + 0x7f6211df; // 0x41dd8d
    *(int64_t *)0x80d71a31 = 256 * (int64_t)(v4 & (char)(a1 / 256)) | a1 & -0xff01;
    unsigned char v6 = *(char *)((v2 & 0xff00 & 256 * v3 | v2 & -0xff01) + v5 % 256); // 0x41dd93
    return v5 & 0xffffff00 | (int64_t)v6;
}

// Address range: 0x41de12 - 0x41de42
int64_t function_41de12(int64_t a1, int64_t a2) {
    // 0x41de12
    bool v1; // 0x41de12
    bool v2 = v1;
    int64_t v3; // 0x41de12
    int64_t v4 = (v2 ? -4 : 4) + v3 + (v2 ? -1 : 1); // 0x41de21
    int32_t v5 = *(int32_t *)(int64_t)*(int32_t *)(a2 - 0x15ad15b6); // 0x41de25
    *(int32_t *)v4 = v5;
    int64_t v6 = v4 + (v2 ? 0xfffffffc : 4); // 0x41de25
    *(char *)0x606b4616d02eca4e = (char)v6;
    char * v7 = (char *)(a1 + 13); // 0x41de38
    *v7 = 2 * *v7;
    return v6 & 0xffffffff;
}

// Address range: 0x41de9a - 0x41de9b
int64_t function_41de9a(int64_t a1) {
    // 0x41de9a
    int64_t result; // 0x41de9a
    return result;
}

// Address range: 0x41de9f - 0x41dea5
int64_t function_41de9f(void) {
    // 0x41de9f
    return function_ffffffffa892fa7b();
}

// Address range: 0x41dec0 - 0x41dec1
int64_t function_41dec0(void) {
    // 0x41dec0
    int64_t result; // 0x41dec0
    return result;
}

// Address range: 0x41df0f - 0x41df2e
int64_t function_41df0f(int64_t a1, int64_t a2) {
    // 0x41df0f
    int64_t v1; // 0x41df0f
    *(int32_t *)(v1 + 0x7178e44f & 0xffffffff) = (int32_t)v1;
    int64_t v2 = __asm_iretd(a1, a2); // 0x41df1e
    bool v3; // 0x41df0f
    __asm_outsb((int16_t)a2, *(char *)((v3 ? -4 : 4) + v1));
    float80_t v4; // 0x41df0f
    *(int32_t *)(a1 + 0x6853574b) = (int32_t)v4;
    return v2 | 255;
}

// Address range: 0x41df2e - 0x41dfd4
int64_t function_41df2e(int64_t a1, int64_t a2) {
    // 0x41df2e
    int64_t result; // 0x41df2e
    bool v1; // 0x41df2e
    if (v1) {
        int64_t v2 = unknown_ffffffff9a468fe0(); // 0x41dfca
        int16_t v3 = v2; // 0x41dfcf
        int16_t v4 = (int16_t)*(char *)(result + 23); // 0x41dfcf
        return v2 & -0x10000 | (int64_t)(v3 / v4 % 256) | (int64_t)(256 * (v3 % v4));
    }
    // 0x41df76
    *(char *)-0x498e19cc564fbc6d = (char)result;
    return result;
}

// Address range: 0x41e006 - 0x41e00b
int64_t function_41e006(int64_t a1) {
    // 0x41e006
    int64_t result; // 0x41e006
    return result;
}

// Address range: 0x41e026 - 0x41e067
int64_t function_41e026(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {
    // 0x41e026
    int64_t v1; // 0x41e026
    char * v2 = (char *)(v1 + 0x6c2f8b89); // 0x41e029
    *v2 = *v2 & (char)(a4 / 256);
    int64_t v3; // 0x41e026
    int32_t v4 = *(int32_t *)&v3; // 0x41e02f
    __asm_outsb((int16_t)v4, (char)v4);
    int64_t v5 = *(int64_t *)0x6e24b780; // 0x41e044
    *(int64_t *)0x6e24b780 = 0x200000000 * v5 | (int64_t)(v5 < 0);
    *(int32_t *)v1 = (int32_t)v1 + 0x601adc34;
    return 0xed32ae6e;
}

// Address range: 0x41e0d4 - 0x41e0d9
int64_t function_41e0d4(void) {
    // 0x41e0d4
    return function_fffffffff9594a1f();
}

// Address range: 0x41e0dc - 0x41e0dd
int64_t function_41e0dc(void) {
    // 0x41e0dc
    int64_t result; // 0x41e0dc
    return result;
}

// Address range: 0x41e0e0 - 0x41e0e7
int64_t function_41e0e0(void) {
    // 0x41e0e0
    return function_ffffffffe425f671();
}

// Address range: 0x41e126 - 0x41e190
int64_t function_41e126(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41e126
    int64_t result; // 0x41e126
    int32_t v1 = result;
    bool v2; // 0x41e126
    if (v2 || v2) {
        unsigned char v3 = *(char *)-0x2c3c669fe593e09e; // 0x41e128
        __asm_outsd((int16_t)a2, v1);
        return (result & 0xffffff00 | (int64_t)v3) + 0x386dd6d6 & 0xffffffff;
    }
    int64_t v4 = 0x29049a7c; // bp-8, 0x41e175
    if (llvm_ctpop_i8((char)result) % 2 != 0) {
        // 0x41e1a8
        return result;
    }
    int32_t * v5 = (int32_t *)(2 * a2 + 0x4694cd25 + (int64_t)&v4); // 0x41e187
    *v5 = *v5 + v1;
    return result & 0xffffffff;
}

// Address range: 0x41e1a9 - 0x41e1b1
int64_t function_41e1a9(void) {
    // 0x41e1a9
    __asm_in(-114);
    int64_t v1; // 0x41e1a9
    return __asm_int3(v1, v1);
}

// Address range: 0x41e1e7 - 0x41e1ea
int64_t function_41e1e7(void) {
    // 0x41e1e7
    int64_t result; // 0x41e1e7
    return result;
}

// Address range: 0x41e211 - 0x41e212
int64_t function_41e211(void) {
    // 0x41e211
    int64_t result; // 0x41e211
    return result;
}

// Address range: 0x41e28e - 0x41e28f
int64_t function_41e28e(void) {
    // 0x41e28e
    int64_t result; // 0x41e28e
    return result;
}

// Address range: 0x41e2f2 - 0x41e2f3
int64_t function_41e2f2(int64_t a1) {
    // 0x41e2f2
    int64_t result; // 0x41e2f2
    return result;
}

// Address range: 0x41e2f7 - 0x41e30a
int64_t function_41e2f7(int64_t a1) {
    // 0x41e2f7
    int64_t result; // 0x41e2f7
    result = function_41e28e();
    // 0x41e2f9
    return result;
}

// Address range: 0x41e341 - 0x41e342
int64_t function_41e341(void) {
    // 0x41e341
    int64_t result; // 0x41e341
    return result;
}

// Address range: 0x41e37c - 0x41e380
int64_t function_41e37c(void) {
    // 0x41e37c
    return function_41e341();
}

// Address range: 0x41e3aa - 0x41e3b0
int64_t function_41e3aa(int64_t a1, int64_t a2) {
    // 0x41e3aa
    int64_t v1; // 0x41e3aa
    __asm_out_4((int16_t)a2, (char)v1);
    return function_298bc388();
}

// Address range: 0x41e3ec - 0x41e4a6
int64_t function_41e3ec(int64_t a1, int64_t a2) {
    // 0x41e3ec
    bool v1; // 0x41e3ec
    if (a1 != 1 && !v1) {
        // 0x41e3fa
        return a2 & 0xffffffff;
    }
    // 0x41e3ef
    int64_t v2; // 0x41e3ec
    int64_t v3 = (v1 ? -1 : 1) + v2; // 0x41e3ec
    int64_t v4; // 0x41e3ec
    int64_t v5 = v4;
    int64_t v6; // 0x41e3ec
    int64_t v7 = v6;
    int64_t v8 = a2;
    int64_t v9 = (v2 & -256 | 172) & -256 | 157; // 0x41e40f
    bool v10; // 0x41e3ec
    int64_t v11 = v10 ? -1 : 1; // 0x41e411
    int64_t v12; // 0x41e3ec
    int64_t v13 = v12 + v11; // 0x41e411
    *(int32_t *)v13 = (int32_t)v9;
    int64_t result = v9 & 0x20bc9a09 | 0xdf4365b6; // 0x41e415
    int64_t * v14 = (int64_t *)v7;
    uint64_t v15 = *v14; // 0x41e41d
    int64_t v16 = v8 & -0xff01 | 0x5600; // 0x41e41e
    while ((v15 & 4) != 0) {
        int64_t v17 = v11 + v3; // 0x41e411
        int64_t v18 = v13 + (v10 ? -4 : 4); // 0x41e414
        *(char *)v18 = *(char *)v17;
        int64_t v19 = (v15 & 1024) != 0 ? -1 : 1; // 0x41e409
        *v14 = v5;
        v3 = v19 + v17;
        v10 = (v15 & 1024) != 0;
        int64_t v20 = v7 + 0x6698 & 0xffffffff; // 0x41e40e
        v5 = v7;
        v7 = result;
        v8 = v16;
        v9 = v20 & -256 | 157;
        v11 = v10 ? -1 : 1;
        v13 = v19 + v18 + v11;
        *(int32_t *)v13 = (int32_t)v9;
        result = v9 & 0x20bc9a09 | 0xdf4365b6;
        v14 = (int64_t *)v7;
        v15 = *v14;
        v16 = v8 & -0xff01 | 0x5600;
    }
    if ((char)v15 < 0 == ((v15 & 2048) != 0)) {
        // 0x41e484
        *v14 = 0x4aaac348;
        int32_t * v21 = (int32_t *)(result + 0x4c24a52c); // 0x41e488
        *v21 = 0x20000 * *v21;
        return result;
    }
    char * v22 = (char *)(result + 115); // 0x41e430
    char v23 = v8; // 0x41e430
    *v22 = (char)(v15 % 2 != 0) - v23 + *v22;
    int64_t v24; // 0x41e3ec
    if (*(char *)&v24 != v23) {
        // 0x41e4a5
        *v14 = v5;
        return result;
    }
    // 0x41e437
    *(int32_t *)-0x2fedce4712ff5c03 = (int32_t)result;
    __readgsbyte(v16 - 0x5668ceab);
    __asm_in_2(-33);
    return __asm_int1(0x4aaac347, v16);
}

// Address range: 0x41e4ad - 0x41e4ae
int64_t function_41e4ad(void) {
    // 0x41e4ad
    int64_t result; // 0x41e4ad
    return result;
}

// Address range: 0x41e4b2 - 0x41e4b3
int64_t function_41e4b2(void) {
    // 0x41e4b2
    int64_t result; // 0x41e4b2
    return result;
}

// Address range: 0x41e4c3 - 0x41e4c7
int64_t function_41e4c3(void) {
    // 0x41e4c3
    int64_t v1; // 0x41e4c3
    return &v1;
}

// Address range: 0x41e4d0 - 0x41e4d5
int64_t function_41e4d0(void) {
    // 0x41e4d0
    return function_ffffffffaffcd522();
}

// Address range: 0x41e4d8 - 0x41e54e
int64_t function_41e4d8(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41e4d8
    int64_t v1; // 0x41e4d8
    bool v2; // 0x41e4d8
    if (!v2 && !v2) {
        v1 = function_41e4b2();
    }
    int64_t result2 = v1; // 0x41e4dd
    if (v2) {
        result2 = function_41e4ad();
    }
    int64_t v3; // 0x41e4d8
    if (v2) {
        // 0x41e4e1
        __asm_hlt(a1, a2 & 0xff00 & 256 * v3 | a2 & -0xff01, v3);
        unknown_ffffffffcafd7d6b();
        char * v4 = (char *)(a3 - 0x3f9095bd); // 0x41e4eb
        *v4 = *v4 | (char)a1;
        return function_ffffffff887db3ce();
    }
    if (v2) {
        // 0x41e537
        __asm_frstor(*(int864_t *)0x676e4916);
        int64_t result = __asm_int1(a1, a2); // 0x41e54a
        *(char *)(v3 - 123) = (char)result;
        return result;
    }
    // 0x41e50e
    return result2;
}

// Address range: 0x41e553 - 0x41e564
int64_t function_41e553(uint64_t a1, int64_t a2, int64_t a3) {
    char * v1 = (char *)(a2 + 122); // 0x41e553
    *v1 = *v1 ^ (char)(a1 / 256);
    int64_t result; // 0x41e553
    return result;
}

// Address range: 0x41e5ad - 0x41e5ae
int64_t function_41e5ad(void) {
    // 0x41e5ad
    int64_t result; // 0x41e5ad
    return result;
}

// Address range: 0x41e5b1 - 0x41e5b2
int64_t function_41e5b1(void) {
    // 0x41e5b1
    int64_t result; // 0x41e5b1
    return result;
}

// Address range: 0x41e5cd - 0x41e68e
int64_t function_41e5cd(uint64_t a1, int64_t a2, int64_t a3) {
    // 0x41e5cd
    int64_t v1; // 0x41e5cd
    *(int32_t *)v1 = (int32_t)v1;
    bool v2; // 0x41e5cd
    int64_t v3 = (v2 ? -4 : 4) + v1; // 0x41e5cd
    char * v4 = (char *)v3; // 0x41e5cf
    char v5 = *v4; // 0x41e5cf
    *v4 = -v5;
    int32_t v6 = *(int32_t *)(v1 + 88); // 0x41e5d1
    *(char *)(v1 - 23) = (char)(a1 / 256);
    unsigned char v7 = (char)(v1 / 256); // 0x41e5e4
    unsigned char v8 = v7 + (char)v1; // 0x41e5e4
    int64_t v9 = a1 - 1; // 0x41e5e6
    int64_t v10 = 256 * (int64_t)v8 | v1 & -0xff01; // 0x41e5e6
    if (v9 != 0 && v8 != 0) {
        v10 = function_41e5ad();
    }
    int32_t * v11 = (int32_t *)(v10 + 13); // 0x41e5e8
    *v11 = (int32_t)(v8 < v7) - (int32_t)a2 + *v11;
    __asm_out_1(121, (char)v10);
    uint64_t result = __asm_sysenter(); // 0x41e5f6
    char v12 = *(char *)result; // 0x41e5f8
    unsigned char v13 = v12 - 93; // 0x41e5f8
    if (v13 < 163) {
        // 0x41e5fe
        *v4 = (char)v9;
        char * v14 = (char *)((int64_t)(44 * *(int32_t *)v3) + 50); // 0x41e604
        *v14 = *v14 ^ (char)(result / 256);
        return v9 & 0xffffffff;
    }
    if (((v13 ^ v12) & v12 + 35) >= 0) {
        // 0x41e667
        return result;
    }
    int32_t v15 = *(int32_t *)(int64_t)(v6 + (int32_t)v1 + (int32_t)(v5 != 0)); // 0x41e63e
    *(int32_t *)v3 = v15;
    if (v13 != 0) {
        // 0x41e667
        return result;
    }
    int64_t result2 = __asm_int3(-0xc6b575b, (int64_t)((int32_t)result >> 31)); // 0x41e643
    char * v16 = (char *)result2; // 0x41e644
    *v16 = *v16 - 67;
    *(char *)-0x4b25545a2f26c462 = (char)result2;
    return result2;
}

// Address range: 0x41e6a8 - 0x41e6aa
int64_t function_41e6a8(void) {
    // 0x41e6a8
    int64_t result; // 0x41e6a8
    return result;
}

// Address range: 0x41e6b2 - 0x41e6be
int64_t function_41e6b2(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41e6b2
    int64_t v1; // 0x41e6b2
    __asm_out_4((int16_t)a2, (char)v1);
    return (int64_t)*(int32_t *)-0x5661abd25cb9987;
}

// Address range: 0x41e6c1 - 0x41e6c6
int64_t function_41e6c1(void) {
    // 0x41e6c1
    return function_1832b69d();
}

// Address range: 0x41e6c6 - 0x41e6df
int64_t function_41e6c6(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41e6c6
    int64_t v1; // 0x41e6c6
    *(int32_t *)-0x7615da68b5f8b545 = (int32_t)v1;
    *(char *)v1 = __asm_insb((int16_t)a2);
    *(char *)-0x14f00b722f17d6b9 = (char)v1;
    return v1 + 0x19f3d79b & 0xffffffff;
}

// Address range: 0x41e733 - 0x41e734
int64_t function_41e733(void) {
    // 0x41e733
    int64_t result; // 0x41e733
    return result;
}

// Address range: 0x41e736 - 0x41e737
int64_t function_41e736(void) {
    // 0x41e736
    int64_t result; // 0x41e736
    return result;
}

// Address range: 0x41e738 - 0x41e739
int64_t function_41e738(void) {
    // 0x41e738
    int64_t result; // 0x41e738
    return result;
}

// Address range: 0x41e743 - 0x41e7f2
int64_t function_41e743(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41e743
    int64_t v1; // 0x41e743
    int32_t * v2 = (int32_t *)(v1 + 116 + v1); // 0x41e746
    int32_t v3 = *v2; // 0x41e746
    *v2 = v3 - 1;
    int64_t result = __asm_in(86); // 0x41e74b
    if (v3 > 1) {
        // 0x41e7c3
        return result;
    }
    int64_t v4 = (result + 80) % 256 | result & -256; // 0x41e750
    int32_t * v5 = (int32_t *)(a1 + 0x3bd683c0); // 0x41e753
    uint32_t v6 = *v5; // 0x41e753
    int32_t v7 = v1; // 0x41e753
    uint32_t v8 = v6 + v7; // 0x41e753
    *v5 = v8;
    if (v8 >= v6 && v8 != 0) {
        int32_t * v9 = (int32_t *)v4; // 0x41e75d
        *v9 = *v9 ^ 124;
        return function_ffffffffdbd127e5();
    }
    // 0x41e787
    bool v10; // 0x41e743
    int64_t v11 = v10 ? -4 : 4; // 0x41e74a
    int64_t v12 = v11 + v1; // 0x41e74a
    *(int32_t *)v1 = *(int32_t *)v12;
    int32_t v13 = (int32_t)v4 & -0x3a8dba37; // 0x41e788
    if (v13 >= 0 == (v13 != 0)) {
        function_41e738();
    }
    // 0x41e78f
    *(int32_t *)(v11 + v1) = *(int32_t *)(v12 + v11);
    if (a1 != 1) {
        // 0x41e7e8
        *(int32_t *)0x484abde8190b3e1a = v7;
        return v1 & 0xffffffff;
    }
    int64_t v14 = a2 & -0xff01 | 0xf300; // 0x41e79b
    __asm_in_3((int16_t)v14);
    unknown_36c7fbff();
    return v14 & 0xfffff300 | 227;
}

// Address range: 0x41e804 - 0x41e80a
int64_t function_41e804(void) {
    // 0x41e804
    return function_3e5027ca();
}

// Address range: 0x41e80b - 0x41e8a4
int64_t function_41e80b(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41e80b
    int64_t v1; // 0x41e80b
    int64_t result = v1 & -0xff01 | 0xac00; // 0x41e80b
    *(int64_t *)v1 = result;
    int32_t * v2 = (int32_t *)(4 * a2 - 37 + v1); // 0x41e810
    uint32_t v3 = *v2; // 0x41e810
    uint32_t v4 = (int32_t)v1; // 0x41e810
    int32_t v5 = v3 - v4; // 0x41e810
    *v2 = v5;
    if (v5 < 0) {
        if (v1 > (int64_t)v3) {
            // 0x41e852
            return a3 & -256 | (int64_t)__asm_in_6((int16_t)a2);
        }
        // 0x41e819
        *(int32_t *)(a2 + 0x41bf3e1b) = (int32_t)v1;
        return result;
    }
    // 0x41e88b
    *(int32_t *)v1 = (int32_t)result;
    *(int64_t *)(v1 + 8) = a1;
    bool v6; // 0x41e80b
    int32_t * v7 = (int32_t *)(v1 - 28 + (v6 ? -4 : 4)); // 0x41e892
    *v7 = *v7 + (v3 < v4 ? -0x7aee61a4 : -0x7aee61a5);
    return result & -0x5400 | (int64_t)*(char *)-0x379da9f4fa52a021;
}

// Address range: 0x41e8b2 - 0x41e8ba
int64_t function_41e8b2(int64_t a1, int64_t a2) {
    // 0x41e8b2
    int64_t v1; // 0x41e8b2
    uint64_t v2 = v1;
    *(int32_t *)(a2 + 100) = (int32_t)v1;
    return v2 & -256 | (int64_t)*(char *)(v2 % 256 + v1);
}

// Address range: 0x41e8d3 - 0x41e8d8
int64_t function_41e8d3(void) {
    // 0x41e8d3
    return function_ffffffff8c949638();
}

// Address range: 0x41e906 - 0x41e907
int64_t function_41e906(void) {
    // 0x41e906
    int64_t result; // 0x41e906
    return result;
}

// Address range: 0x41e912 - 0x41e95a
int64_t function_41e912(int64_t a1) {
    // 0x41e912
    int64_t v1; // 0x41e912
    int64_t v2 = __asm_iretd(a1, v1); // 0x41e912
    bool v3; // 0x41e912
    if (v3) {
        // 0x41e915
        return function_54a14c85();
    }
    int64_t v4 = __asm_wait(a1, v1); // 0x41e939
    int64_t v5 = a1 - 1; // 0x41e93a
    int64_t v6 = v4; // 0x41e93a
    if (v5 != 0) {
        v6 = function_41e906();
    }
    uint32_t v7 = (int32_t)v2; // 0x41e934
    if (v5 != 1 != (v7 == 0x5cbd1ecb)) {
        // 0x41e93e
        return __asm_in(2);
    }
    int64_t result = v6;
    int32_t * v8 = (int32_t *)(result + 0x7542f4af + 4 * result); // 0x41e952
    *v8 = *v8 - (v7 < 0x5cbd1ecb ? 19 : 18);
    return result;
}

// Address range: 0x41e9c5 - 0x41e9c8
int64_t function_41e9c5(int64_t a1) {
    // 0x41e9c5
    int64_t v1; // 0x41e9c5
    int64_t v2 = v1;
    return (v2 - v1) % 256 | v2 & -256;
}

// Address range: 0x41e9ed - 0x41e9f0
int64_t function_41e9ed(void) {
    // 0x41e9ed
    int64_t result; // 0x41e9ed
    return result;
}

// Address range: 0x41e9fa - 0x41eaab
int64_t function_41e9fa(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41e9fa
    return function_38f6eff5();
}

// Address range: 0x41eaeb - 0x41eb1a
int64_t function_41eaeb(uint64_t a1, uint64_t a2) {
    // 0x41eaeb
    __asm_int(-112);
    uint64_t v1 = a1 / 256; // 0x41eb03
    unsigned char v2 = (char)v1; // 0x41eb03
    int64_t v3; // 0x41eaeb
    unsigned char v4 = (char)v3; // 0x41eb03
    char v5 = v2 - v4; // 0x41eb03
    unsigned char v6 = llvm_ctpop_i8(v5); // 0x41eb03
    int16_t v7 = a2 + 0xfb00 & 0xff00 | a2 % 256; // 0x41eb05
    char v8 = __asm_in_6(v7); // 0x41eb05
    bool v9; // 0x41eaeb
    *(int64_t *)0xbc52a0eb = 0x4000 * (int64_t)v9 | (int64_t)(v2 < v4) | 64 * (int64_t)(v5 == 0) | 128 * (int64_t)(v5 < 0) | 1024 * (int64_t)v9 | 16 * (int64_t)(v2 % 16 - v4 % 16 > 15) | 512 * (int64_t)v9 | 4 * (int64_t)(v6 % 2 == 0) | 256 * (int64_t)v9 | 2048 * (int64_t)(((v5 ^ v2) & (char)(v3 ^ v1)) < 0) | 2;
    char v10 = __asm_in_6(v7); // 0x41eb07
    int64_t result = (v3 | (int64_t)v8 | (int64_t)v10) & -256 | (int64_t)(v10 - 4); // 0x41eb0f
    *(int32_t *)(v3 + 114 & 0xffffffff) = (int32_t)result;
    return result;
}

// Address range: 0x41eb4d - 0x41eb5b
int64_t function_41eb4d(int64_t a1, int64_t a2) {
    // 0x41eb4d
    int64_t v1; // 0x41eb4d
    *(char *)v1 = __asm_insb((int16_t)a2);
    return function_ffffffff82f15c93();
}

// Address range: 0x41eb8d - 0x41eb96
int64_t function_41eb8d(void) {
    // 0x41eb8d
    int64_t v1; // 0x41eb8d
    uint64_t v2 = v1;
    *(int64_t *)v2 = v2 / 0x8000000000000000 | 2 * v2;
    __asm_iretd(v1, v1);
    return function_ffffffff8be9fdb9();
}

// Address range: 0x41eb9d - 0x41eb9e
int64_t function_41eb9d(void) {
    // 0x41eb9d
    int64_t result; // 0x41eb9d
    return result;
}

// Address range: 0x41ebb2 - 0x41ebbc
int64_t function_41ebb2(int64_t a1) {
    // 0x41ebb2
    int64_t v1; // 0x41ebb2
    *(int32_t *)a1 = (int32_t)(v1 & a1);
    return function_41ebde();
}

// Address range: 0x41ebbc - 0x41ebde
int64_t function_41ebbc(int64_t a1, int64_t a2) {
    // 0x41ebbc
    int64_t v1; // 0x41ebbc
    *(char *)v1 = (char)v1;
    bool v2; // 0x41ebbc
    __asm_outsb((int16_t)a2, *(char *)((v2 ? -1 : 1) + v1));
    return v1 & 0xffffff00 | (int64_t)__asm_in_2(14);
}

// Address range: 0x41ebde - 0x41ebe2
int64_t function_41ebde(void) {
    // 0x41ebde
    int64_t result; // 0x41ebde
    bool v1; // 0x41ebde
    if (!v1 && !v1) {
        result = function_41eb9d();
    }
    // 0x41ebe0
    return result;
}

// Address range: 0x41ebec - 0x41ebf2
int64_t function_41ebec(int64_t a1) {
    // 0x41ebec
    int64_t result; // 0x41ebec
    int32_t * v1 = (int32_t *)(result + 84); // 0x41ebec
    bool v2; // 0x41ebec
    *v1 = *v1 + (int32_t)a1 + (int32_t)v2;
    return result;
}

// Address range: 0x41ec0a - 0x41ec0b
int64_t function_41ec0a(void) {
    // 0x41ec0a
    int64_t result; // 0x41ec0a
    return result;
}

// Address range: 0x41ec12 - 0x41ec1a
int64_t function_41ec12(void) {
    // 0x41ec12
    int64_t result; // 0x41ec12
    return result;
}

// Address range: 0x41ec37 - 0x41ec3a
int64_t function_41ec37(void) {
    // 0x41ec37
    return function_41ec0a();
}

// Address range: 0x41ece4 - 0x41ece5
int64_t function_41ece4(void) {
    // 0x41ece4
    int64_t result; // 0x41ece4
    return result;
}

// Address range: 0x41ed0d - 0x41ed12
int64_t function_41ed0d(void) {
    // 0x41ed0d
    int64_t result; // 0x41ed0d
    return result;
}

// Address range: 0x41ed13 - 0x41ed39
int64_t function_41ed13(int64_t a1, int64_t a2) {
    // 0x41ed13
    int64_t v1; // 0x41ed13
    *(int32_t *)a1 = 2 * (int32_t)v1;
    char v2 = a1; // 0x41ed15
    int64_t v3; // 0x41ed13
    char v4 = *(char *)&v3; // 0x41ed15
    int64_t v5; // 0x41ed13
    if (((v2 - v4 ^ v2) & (v4 ^ v2)) < 0) {
        v5 = function_41ece4();
    }
    // 0x41ed1b
    *(char *)((v5 & 0xffffffff) - 0x754f1a3f) = -126;
    __asm_in_3((int16_t)a2);
    int64_t v6 = 0x651ad48d; // bp-8, 0x41ed28
    *(int32_t *)(v1 + 0x648cc7aa) = (int32_t)(int64_t)&v6;
    return function_209ed9b0();
}

// Address range: 0x41ed5d - 0x41ed5e
int64_t function_41ed5d(int64_t a1) {
    // 0x41ed5d
    int64_t result; // 0x41ed5d
    return result;
}

// Address range: 0x41edbe - 0x41edc1
int64_t function_41edbe(void) {
    // 0x41edbe
    int64_t result; // 0x41edbe
    return result;
}

// Address range: 0x41eddd - 0x41edde
int64_t function_41eddd(void) {
    // 0x41eddd
    int64_t result; // 0x41eddd
    return result;
}

// Address range: 0x41ee2f - 0x41ee34
int64_t function_41ee2f(void) {
    // 0x41ee2f
    int64_t result; // 0x41ee2f
    bool v1; // 0x41ee2f
    if (!v1) {
        result = function_41eddd();
    }
    // 0x41ee31
    return result;
}

// Address range: 0x41ee3b - 0x41ee88
int64_t function_41ee3b(int64_t a1, int64_t a2) {
    // 0x41ee3b
    int64_t v1; // 0x41ee3b
    char * v2 = (char *)(v1 - 0x768c0c91); // 0x41ee3b
    unsigned char v3 = *v2; // 0x41ee3b
    *v2 = v3 + 37;
    int64_t v4; // 0x41ee3b
    char v5 = *(char *)&v4; // 0x41ee44
    if (llvm_ctpop_i8((char)(v3 < 219) + (char)a2 - v5) % 2 == 0) {
        // 0x41ee78
        return 0x10000 * (int32_t)v1 >> 16 & -0xff01 | 0xd600;
    }
    // 0x41ee86
    return v1 & 0xffffffff;
}

// Address range: 0x41eeb5 - 0x41eeb6
int64_t function_41eeb5(void) {
    // 0x41eeb5
    int64_t result; // 0x41eeb5
    return result;
}

// Address range: 0x41eede - 0x41eeea
int64_t function_41eede(int64_t a1) {
    int64_t v1 = a1 - 1; // 0x41eede
    int64_t result; // 0x41eede
    bool v2; // 0x41eede
    if (v1 != 0 == v2) {
        result = function_41eeb5();
    }
    char * v3 = (char *)(a1 - 0x21c37d4f); // 0x41eee0
    *v3 = *v3 + (char)v1;
    return result;
}

// Address range: 0x41eeea - 0x41ef06
int64_t function_41eeea(int64_t a1, int64_t a2) {
    // 0x41eeea
    int64_t result; // 0x41eeea
    float80_t v1; // 0x41eeea
    *(float32_t *)(result - 0x733652d8) = (float32_t)v1;
    char * v2 = (char *)(result + 0x27be3800); // 0x41eef0
    *v2 = *v2 ^ 80;
    char * v3 = (char *)(a2 + 0x7eb64db9); // 0x41eef7
    *v3 = *v3 & (char)result;
    return result;
}

// Address range: 0x41ef14 - 0x41ef1c
int64_t function_41ef14(int64_t a1, int64_t a2) {
    char v1 = __asm_in_6((int16_t)a2); // 0x41ef19
    *(int64_t *)0x3b9ab46f = 0x3b9ab477;
    int64_t v2; // 0x41ef14
    return v2 & -256 | (int64_t)v1;
}

// Address range: 0x41ef44 - 0x41ef47
int64_t function_41ef44(void) {
    // 0x41ef44
    int64_t result; // 0x41ef44
    return result;
}

// Address range: 0x41ef61 - 0x41ef67
int64_t function_41ef61(int64_t a1, int64_t a2) {
    // 0x41ef61
    int64_t result; // 0x41ef61
    return result;
}

// Address range: 0x41ef67 - 0x41ef6c
int64_t function_41ef67(void) {
    // 0x41ef67
    return function_ffffffffa9b06007();
}

// Address range: 0x41ef9d - 0x41efa0
int64_t function_41ef9d(int64_t a1, int64_t a2) {
    // 0x41ef9d
    return a1 & 0xffffffff;
}

// Address range: 0x41efaa - 0x41efbe
int64_t function_41efaa(int64_t a1, int64_t a2) {
    // 0x41efaa
    int64_t v1; // 0x41efaa
    return v1 & -256 | (int64_t)*(char *)0xcd9011e1fc55775;
}

// Address range: 0x41efeb - 0x41efee
int64_t function_41efeb(int64_t a1) {
    // 0x41efeb
    int64_t result; // 0x41efeb
    return result;
}

// Address range: 0x41f017 - 0x41f036
int64_t function_41f017(int64_t a1, int64_t a2, int64_t a3) {
    char v1 = __asm_in_2(-4); // 0x41f017
    int64_t v2; // 0x41f017
    *(int32_t *)(a1 + 0x78de11ae) = (int32_t)v2;
    int32_t * v3 = (int32_t *)((v2 & -256 | (int64_t)v1) + 63); // 0x41f02a
    *v3 = *v3 - (int32_t)v2;
    __asm_int(91);
    return function_ffffffff8fe374e6();
}

// Address range: 0x41f10f - 0x41f112
int64_t function_41f10f(int64_t a1) {
    // 0x41f10f
    int64_t result; // 0x41f10f
    return result;
}

// Address range: 0x41f112 - 0x41f115
int64_t function_41f112(int64_t a1) {
    // 0x41f112
    int64_t result; // 0x41f112
    return result;
}

// Address range: 0x41f131 - 0x41f139
int64_t function_41f131(void) {
    // 0x41f131
    int64_t v1; // 0x41f131
    return v1 & 0xb87dbdb4 | 0x4782424b;
}

// Address range: 0x41f202 - 0x41f20e
int64_t function_41f202(int64_t a1) {
    // 0x41f202
    int64_t result; // 0x41f202
    int64_t v1 = result;
    unsigned char v2 = *(char *)-0x5c308b8a; // 0x41f204
    *(char *)-0x5c308b8a = v2 - 15;
    *(int32_t *)v1 = (int32_t)v1 - (int32_t)result + (int32_t)(v2 < 15);
    return result;
}

// Address range: 0x41f210 - 0x41f2c3
int64_t function_41f210(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41f210
    int64_t v1; // 0x41f210
    bool v2; // 0x41f210
    if (true == !v2) {
        int64_t v3 = v1 & v1;
        char v4 = v3; // 0x41f27a
        while ((v4 - 127 & (v4 ^ -128)) >= 0) {
            // continue -> 0x41f27c
        }
        // 0x41f27e
        return (v3 ^ 128) + 0xbbbf1db7 & 0xffffffff;
    }
    int16_t v5 = a2; // 0x41f212
    __asm_in_6(v5);
    *(int32_t *)v1 = (int32_t)v1;
    int64_t v6 = v2 ? -4 : 4; // 0x41f213
    __asm_wait(a1, a2);
    *(char *)(v6 + v1) = __asm_insb(v5);
    unknown_637be4db();
    char * v7 = (char *)(v1 - 117 + v6); // 0x41f226
    *v7 = *v7 & (char)(v1 / 256);
    __asm_hlt(a1, a2, v1);
    return 0xc775c70a;
}

// Address range: 0x41f2c4 - 0x41f2e0
int64_t function_41f2c4(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41f2c4
    int64_t v1; // 0x41f2c4
    int64_t v2 = v1;
    int32_t * v3 = (int32_t *)(a1 + 34); // 0x41f2ca
    *v3 = *v3 & (int32_t)a1;
    *(int64_t *)v2 = *(int64_t *)(v2 + 0x5fb7708e);
    __asm_int1(a1, a2);
    return v1 & 0xffffffff;
}

// Address range: 0x41f2e1 - 0x41f2e4
int64_t function_41f2e1(int64_t a1) {
    // 0x41f2e1
    int64_t result; // 0x41f2e1
    return result;
}

// Address range: 0x41f2eb - 0x41f33b
int64_t function_41f2eb(int64_t a1, int64_t a2) {
    // 0x41f2eb
    int64_t v1; // 0x41f2eb
    int64_t v2 = v1;
    int32_t v3 = v1;
    uint32_t v4 = (v3 + 135) % 256 | v3 & -256;
    __asm_out(-60, v4);
    unsigned char v5 = (char)a1 % 32; // 0x41f307
    if (v5 != 0) {
        char * v6 = (char *)(v2 + 0x5b8a30bc); // 0x41f307
        unsigned char v7 = *v6; // 0x41f307
        *v6 = v7 >> 8 - v5 | v7 << v5;
    }
    int64_t result = v4; // 0x41f2f7
    if (a1 == 1) {
        // 0x41f312
        return result;
    }
    // 0x41f31e
    bool v8; // 0x41f2eb
    int64_t v9 = v8 ? -4 : 4; // 0x41f2f6
    int64_t v10 = v9 + result; // 0x41f32b
    *(int32_t *)v2 = 2 * (int32_t)v2;
    *(int32_t *)(v9 + v1) = (int32_t)v10;
    return v10 & 0xffffffff;
}

// Address range: 0x41f372 - 0x41f37f
int64_t function_41f372(int64_t a1) {
    // 0x41f372
    int64_t result; // 0x41f372
    return result;
}

// Address range: 0x41f391 - 0x41f39c
int64_t function_41f391(int64_t a1, int64_t a2) {
    uint32_t v1 = (int32_t)a1 % 64; // 0x41f391
    int64_t result; // 0x41f391
    if (v1 != 0) {
        int32_t * v2 = (int32_t *)(a2 + 0x7f9e988c + 2 * a2); // 0x41f391
        *v2 = *v2 >> v1 | (int32_t)result << 32 - v1;
    }
    return result;
}

// Address range: 0x41f3f8 - 0x41f40d
int64_t function_41f3f8(int64_t a1, int64_t a2) {
    // 0x41f3f8
    int64_t v1; // 0x41f3f8
    return v1 + 0xe6f241e9 & 0xffffffff;
}

// Address range: 0x41f40f - 0x41f42e
int64_t function_41f40f(int64_t a1, int64_t a2) {
    // 0x41f40f
    int64_t v1; // 0x41f40f
    *(char *)(a1 + 0x29a16282) = (char)(v1 / 256);
    *(int32_t *)v1 = (int32_t)v1;
    int16_t v2 = a2; // 0x41f427
    __asm_in_3(v2);
    bool v3; // 0x41f40f
    *(int32_t *)((v3 ? -4 : 4) + v1) = __asm_insd(v2);
    return function_cac49f4();
}

// Address range: 0x41f4a7 - 0x41f4a8
int64_t function_41f4a7(void) {
    // 0x41f4a7
    int64_t result; // 0x41f4a7
    return result;
}

// Address range: 0x41f4b2 - 0x41f4b5
int64_t function_41f4b2(void) {
    // 0x41f4b2
    int64_t result; // 0x41f4b2
    return result;
}

// Address range: 0x41f4be - 0x41f4c8
int64_t function_41f4be(int64_t a1) {
    // 0x41f4be
    int64_t result; // 0x41f4be
    *(int32_t *)result = (int32_t)result;
    return result;
}

// Address range: 0x41f4c8 - 0x41f4d0
int64_t function_41f4c8(int64_t a1, uint64_t a2) {
    int32_t result = __asm_in_3((int16_t)a2); // 0x41f4c8
    int64_t v1; // 0x41f4c8
    char * v2 = (char *)(v1 + 38); // 0x41f4cc
    *v2 = *v2 ^ (char)(a2 / 256);
    return result;
}

// Address range: 0x41f4f1 - 0x41f4f8
int64_t function_41f4f1(int64_t a1) {
    function_41f4a7();
    // 0x41f4f6
    int64_t v1; // 0x41f4f1
    return function_41f570(a1 & -0xff01 | 0x9a00, v1);
}

// Address range: 0x41f50c - 0x41f518
int64_t function_41f50c(uint64_t a1) {
    // 0x41f50c
    int64_t result; // 0x41f50c
    char * v1 = (char *)(result - 22); // 0x41f50c
    *v1 = *v1 & (char)(a1 / 256);
    int128_t v2; // 0x41f50c
    __asm_vaddss(v2, v2);
    return result;
}

// Address range: 0x41f518 - 0x41f562
int64_t function_41f518(int64_t a1, int64_t a2) {
    // 0x41f518
    int64_t v1; // 0x41f518
    *(int32_t *)v1 = (int32_t)v1;
    bool v2; // 0x41f518
    char * v3 = (char *)(4 * ((v2 ? 0x3ffffffffffffffc : 4) + v1) + v1); // 0x41f51b
    char v4 = *v3; // 0x41f51b
    *v3 = v4 - 1;
    if ((v4 & -v4) < 0) {
        unsigned char v5 = *(char *)(v1 + 0x5168e92f); // 0x41f51e
        return __asm_sti(a1, 256 * (int64_t)v5 | a2 & -0xff01, v1);
    }
    // 0x41f546
    float80_t v6; // 0x41f518
    *(int16_t *)0xa6f57e61 = (int16_t)v6;
    int64_t result; // 0x41f518
    if (a1 != 2) {
        result = function_41f585((int64_t)&g2);
    }
    // 0x41f562
    return result;
}

// Address range: 0x41f570 - 0x41f57b
int64_t function_41f570(int64_t a1, int64_t a2) {
    // 0x41f570
    int64_t v1; // 0x41f570
    char v2 = *(char *)(v1 - 32); // 0x41f570
    __asm_in_6((int16_t)(a2 & 0xff00 | (int64_t)(v2 & (char)a2)));
    int64_t result = __asm_fnstenv(); // 0x41f579
    *(int224_t *)v1 = (int224_t)result;
    return result;
}

// Address range: 0x41f585 - 0x41f588
int64_t function_41f585(int64_t a1) {
    // 0x41f585
    int64_t result; // 0x41f585
    return result;
}

// Address range: 0x41f588 - 0x41f5b7
int64_t function_41f588(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x41f588
    __asm_sti(a1, a2, a3);
    int64_t v1; // 0x41f588
    *(char *)-0x33af7d579b73a439 = (char)v1 - 112;
    return function_41f5bf(0xd28ee8e5);
}

// Address range: 0x41f5bd - 0x41f5bf
int64_t function_41f5bd(void) {
    // 0x41f5bd
    int64_t result; // 0x41f5bd
    __asm_out(75, (int32_t)result);
    return result;
}

// Address range: 0x41f5bf - 0x41f5c4
int64_t function_41f5bf(int64_t a1) {
    // 0x41f5bf
    int64_t v1; // 0x41f5bf
    return &v1;
}

// Address range: 0x41f5e4 - 0x41f5e6
int64_t function_41f5e4(void) {
    // 0x41f5e4
    int64_t result; // 0x41f5e4
    return result;
}

// Address range: 0x41f5f6 - 0x41f68e
int64_t function_41f5f6(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41f672
    __asm_in(11);
    return a2 & 0xffffffff;
    // 0x41f5f8
    int64_t v1; // 0x41f5f6
    __asm_pminub(v1, *(int64_t *)(v1 - 1));
    return function_104f9c2();
}

// Address range: 0x41f6b2 - 0x41f6b3
int64_t function_41f6b2(void) {
    // 0x41f6b2
    int64_t result; // 0x41f6b2
    return result;
}

// Address range: 0x41f6d7 - 0x41f6de
int64_t function_41f6d7(int64_t a1) {
    // 0x41f6d7
    int64_t result; // 0x41f6d7
    __asm_outsd(-0x5351, (int32_t)result);
    return result;
}

// Address range: 0x41f6e2 - 0x41f6e3
int64_t function_41f6e2(void) {
    // 0x41f6e2
    int64_t result; // 0x41f6e2
    return result;
}

// Address range: 0x41f6e6 - 0x41f760
int64_t function_41f6e6(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t result) {
    // 0x41f6e6
    int64_t v1; // 0x41f6e6
    unsigned char v2 = *(char *)(v1 - 0x4a5d7ec3); // 0x41f74d
    *(char *)v1 = (char)v1;
    bool v3; // 0x41f6e6
    if (!v3) {
        // 0x41f75b
        return v1 & 0xffffffff;
    }
    // 0x41f6f4
    *(char *)(v1 + 10 + 8 * (256 * (int64_t)v2 | v1 & 0x1fffffffffff00ff)) = v2;
    int64_t v4 = a1 - 1; // 0x41f702
    if (v4 != 0 == (*(char *)(a4 + 126) || (char)v1) == 0) {
        function_41f6b2();
    }
    int32_t * v5 = (int32_t *)a4; // 0x41f705
    *v5 = (int32_t)a3;
    *(int32_t *)(int64_t)*v5 = (int32_t)__asm_int1(v4, a2);
    return result;
}

// Address range: 0x41f778 - 0x41f77b
int64_t function_41f778(int64_t a1) {
    // 0x41f778
    int64_t result; // 0x41f778
    return result;
}

// Address range: 0x41f78b - 0x41f793
int64_t function_41f78b(int64_t a1) {
    // 0x41f78b
    int64_t result; // 0x41f78b
    bool v1; // 0x41f78b
    if (v1) {
        // 0x41f7ed
        return result;
    }
    // 0x41f78d
    *(char *)(result + 86) = (char)result;
    return result;
}

// Address range: 0x41f7eb - 0x41f7ed
int64_t function_41f7eb(void) {
    // 0x41f7eb
    int64_t result; // 0x41f7eb
    return result;
}

// Address range: 0x41f7f9 - 0x41f7fd
int64_t function_41f7f9(void) {
    // 0x41f7f9
    int64_t v1; // 0x41f7f9
    uint64_t v2 = v1;
    __asm_int(37);
    return v2 & -256 | (int64_t)*(char *)(v2 % 256 + v1);
}

// Address range: 0x41f809 - 0x41f83a
int64_t function_41f809(int64_t a1, int64_t a2) {
    // 0x41f809
    int64_t v1; // 0x41f809
    char * v2 = (char *)(v1 - 0x4a886a39); // 0x41f809
    *v2 = *v2 ^ (char)v1;
    __asm_iretd(a1, a2);
    int64_t result = a1 & 0xffffffff; // 0x41f827
    *(int64_t *)-0x2eb4ab87c025cedc = result;
    return result;
}

// Address range: 0x41f843 - 0x41f844
int64_t function_41f843(void) {
    // 0x41f843
    int64_t result; // 0x41f843
    return result;
}

// Address range: 0x41f86f - 0x41f870
int64_t function_41f86f(void) {
    // 0x41f86f
    int64_t result; // 0x41f86f
    return result;
}

// Address range: 0x41f87c - 0x41f8ab
int64_t function_41f87c(uint64_t a1, int64_t a2) {
    // 0x41f87c
    int64_t v1; // 0x41f87c
    bool v2; // 0x41f87c
    char v3 = (char)a2 - (char)v1 + (char)v2; // 0x41f87c
    __asm_in(39);
    int64_t * v4 = (int64_t *)(v1 - 95 + 8 * v1); // 0x41f889
    *v4 = *v4 & 21;
    int64_t v5 = -79; // bp-16, 0x41f890
    unsigned char v6 = *(char *)(4 * v1 + (int64_t)&v5); // 0x41f89c
    char * v7 = (char *)0x311c8771; // 0x41f89f
    if (v6 > -1 - v3 || v3 == -v6) {
        function_41f86f();
        v7 = (char *)(v5 + 0x311c87c0);
    }
    // 0x41f8a1
    *v7 = (char)(a1 / 256);
    return function_41f843();
}

// Address range: 0x41f8bc - 0x41f8bf
int64_t function_41f8bc(void) {
    // 0x41f8bc
    int64_t result; // 0x41f8bc
    return result;
}

// Address range: 0x41f8e8 - 0x41f8ec
int64_t function_41f8e8(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41f8e8
    return a2 & 0xffffffff;
}

// Address range: 0x41f8fc - 0x41f8ff
int64_t function_41f8fc(int64_t a1) {
    // 0x41f8fc
    int64_t result; // 0x41f8fc
    return result;
}

// Address range: 0x41f901 - 0x41f90a
int64_t function_41f901(int64_t a1) {
    // 0x41f901
    int64_t v1; // 0x41f901
    return __asm_wait(v1, 0x23bc73f0);
}

// Address range: 0x41f933 - 0x41f937
int64_t function_41f933(void) {
    // 0x41f933
    int64_t v1; // 0x41f933
    return __asm_hlt(v1, v1, v1);
}

// Address range: 0x41f937 - 0x41f93d
int64_t function_41f937(int64_t a1) {
    // 0x41f937
    int64_t v1; // 0x41f937
    int64_t v2 = v1;
    char * v3 = (char *)(a1 + 1); // 0x41f937
    *v3 = *v3 + (char)((uint64_t)v1 / 256);
    return (v2 + 78) % 256 | v2 & -256;
}

// Address range: 0x41f968 - 0x41f97e
int64_t function_41f968(int64_t a1, int64_t a2, int64_t a3) {
    char * v1 = (char *)(a2 + 22); // 0x41f968
    *v1 = *v1 | (char)a2;
    __asm_int(-122);
    int64_t result; // 0x41f968
    unsigned char v2 = *(char *)(result - 0x7f3dea2b); // 0x41f96e
    int32_t * v3 = (int32_t *)(result - 0x7ad73b8e); // 0x41f974
    *v3 = *v3 - (int32_t)result + (int32_t)(v2 < (char)a3);
    return result;
}

// Address range: 0x41f985 - 0x41f9a2
int64_t function_41f985(int64_t a1) {
    // 0x41f985
    int64_t v1; // 0x41f985
    uint32_t v2 = (int32_t)v1 >> 31; // 0x41f98a
    int32_t v3 = v1;
    __asm_outsd((int16_t)v2, v3);
    *(char *)0x615a0828 = *(char *)0x615a0828 - 123;
    *(int32_t *)v1 = v3 | 0x7ddb74e3;
    return __asm_int3(0x615a0828, (int64_t)v2);
}

// Address range: 0x41f9a4 - 0x41f9ab
int64_t function_41f9a4(void) {
    // 0x41f9a4
    int64_t result; // 0x41f9a4
    return result;
}

// Address range: 0x41f9ab - 0x41f9b8
int64_t function_41f9ab(int64_t a1, int64_t a2) {
    // 0x41f9ab
    int64_t result; // 0x41f9ab
    char * v1 = (char *)(result + 0x69781fd5); // 0x41f9ac
    *v1 = *v1 - (char)result;
    return result;
}

// Address range: 0x41f9cd - 0x41f9ce
int64_t function_41f9cd(int64_t a1) {
    // 0x41f9cd
    int64_t result; // 0x41f9cd
    return result;
}

// Address range: 0x41f9e5 - 0x41fa3f
int64_t function_41f9e5(int64_t a1, int64_t a2) {
    // 0x41f9e5
    int64_t v1; // 0x41f9e5
    int32_t * v2 = (int32_t *)(v1 + 0x55bf7811 + 8 * v1); // 0x41f9e5
    *v2 = *v2 & (int32_t)a2;
    *(char *)(v1 + 0xacb29df) = (char)(v1 / 256);
    __asm_int(28);
    __asm_iretd(a1, a2);
    *(char *)-0x7697e3bb = (char)(v1 / 256);
    int64_t v3; // 0x41f9e5
    return (int64_t)*(int32_t *)&v3;
}

// Address range: 0x41fa6f - 0x41fa71
int64_t function_41fa6f(void) {
    // 0x41fa6f
    int64_t result; // 0x41fa6f
    return result;
}

// Address range: 0x41fa85 - 0x41fa8a
int64_t function_41fa85(void) {
    // 0x41fa85
    int64_t result; // 0x41fa85
    return result;
}

// Address range: 0x41fa8a - 0x41fa90
int64_t function_41fa8a(void) {
    // 0x41fa8a
    int64_t v1; // 0x41fa8a
    *(char *)v1 = (char)v1;
    return function_ffffffffad2495c5();
}

// Address range: 0x41fac0 - 0x41fac3
int64_t function_41fac0(void) {
    // 0x41fac0
    int64_t result; // 0x41fac0
    return result;
}

// Address range: 0x41fada - 0x41faee
int64_t function_41fada(int64_t a1, uint64_t a2) {
    // 0x41fada
    int64_t v1; // 0x41fada
    int64_t v2 = v1 + 25; // 0x41fada
    *(int32_t *)-0x4301b908a081fa02 = (int32_t)v2;
    char v3 = a1; // 0x41fae9
    char v4 = a2 / 256; // 0x41fae9
    char v5 = v4 + v3; // 0x41fae9
    int64_t result = v2 & 0xffffffff; // 0x41faeb
    if (v5 < 0 == ((v5 ^ v3) & (v5 ^ v4)) < 0 == (v5 != 0)) {
        result = function_41fb50();
    }
    // 0x41faed
    *(int32_t *)v1 = (int32_t)v1;
    return result;
}

// Address range: 0x41fafb - 0x41fafc
int64_t function_41fafb(int64_t a1) {
    // 0x41fafb
    int64_t result; // 0x41fafb
    return result;
}

// Address range: 0x41fb28 - 0x41fb29
int64_t function_41fb28(void) {
    // 0x41fb28
    int64_t result; // 0x41fb28
    return result;
}

// Address range: 0x41fb2c - 0x41fb2d
int64_t function_41fb2c(int64_t a1) {
    // 0x41fb2c
    int64_t result; // 0x41fb2c
    return result;
}

// Address range: 0x41fb50 - 0x41fb58
int64_t function_41fb50(void) {
    // 0x41fb50
    int64_t v1; // 0x41fb50
    return (v1 & 0xffff00ff | 0x4900) + 0x1c5e8a4c & 0xffffd7ff;
}

// Address range: 0x41fb64 - 0x41fb65
int64_t function_41fb64(void) {
    // 0x41fb64
    int64_t result; // 0x41fb64
    return result;
}

// Address range: 0x41fb66 - 0x41fb8b
int64_t function_41fb66(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41fb66
    int64_t v1; // 0x41fb66
    char v2 = v1; // 0x41fb6d
    char v3 = ((int32_t)v1 < (int32_t)v1 ? -85 : -86) + v2; // 0x41fb6d
    char v4 = v3 + (char)((int32_t)v1 < (int32_t)v1); // 0x41fb6d
    int64_t v5 = v1 & -256; // 0x41fb6d
    if (v3 < 0 == ((v4 ^ v2) & (v4 ^ -128)) < 0) {
        // 0x41fb84
        return v5 | (int64_t)__asm_in_6((int16_t)(v1 ^ a2));
    }
    int64_t result = v5 | (int64_t)v3; // 0x41fb71
    if (v3 < 0) {
        result = function_41fb28();
    }
    // 0x41fb73
    return result;
}

// Address range: 0x41fb8c - 0x41fb9a
int64_t function_41fb8c(int64_t a1) {
    // 0x41fb8c
    int64_t v1; // 0x41fb8c
    __asm_sti(v1, v1, v1);
    return v1 & 0xffffff00 | (int64_t)__asm_in_2(25);
}

// Address range: 0x41fb9f - 0x41fba2
int64_t function_41fb9f(void) {
    // 0x41fb9f
    int64_t result; // 0x41fb9f
    return result;
}

// Address range: 0x41fba4 - 0x41fba7
int64_t function_41fba4(int64_t a1) {
    // 0x41fba4
    int64_t result; // 0x41fba4
    bool v1; // 0x41fba4
    if (v1) {
        result = function_41fb64();
    }
    // 0x41fba6
    return result;
}

// Address range: 0x41fbaa - 0x41fbab
int64_t function_41fbaa(int64_t a1) {
    // 0x41fbaa
    int64_t result; // 0x41fbaa
    return result;
}

// Address range: 0x41fc02 - 0x41fc05
int64_t function_41fc02(void) {
    // 0x41fc02
    int64_t result; // 0x41fc02
    return result;
}

// Address range: 0x41fc0c - 0x41fc19
int64_t function_41fc0c(void) {
    // 0x41fc0c
    int64_t v1; // 0x41fc0c
    int64_t v2 = v1;
    *(char *)(v2 + 0x23c30970) = (char)v2;
    return function_71d553e9();
}

// Address range: 0x41fc8c - 0x41fc9a
int64_t function_41fc8c(void) {
    // 0x41fc8c
    int64_t v1; // 0x41fc8c
    *(int32_t *)0x66a377bec903992f = (int32_t)v1;
    return function_38167e9a();
}

// Address range: 0x41fd20 - 0x41fe78
int64_t function_41fd20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x41fd20
    int64_t result; // 0x41fd20
    int32_t * v1 = (int32_t *)(result + 22); // 0x41fd20
    int32_t v2 = *v1 - 125; // 0x41fd20
    unsigned char v3 = llvm_ctpop_i8((char)v2); // 0x41fd20
    *v1 = v2;
    if (v3 % 2 != 0) {
        // 0x41fd26
        float80_t v4; // 0x41fd20
        *(int64_t *)(result + 0x31fa8676) = (int64_t)v4;
        return result;
    }
    // 0x41fd6a
    bool v5; // 0x41fd20
    int64_t v6 = 1024 * (int64_t)v5 | 0x4000 * (int64_t)v5 | 512 * (int64_t)v5 | 256 * (int64_t)v5;
    int64_t v7; // 0x41fd20
    int64_t v8 = v7;
    int64_t v9 = a1;
    __asm_int3(v9, a2);
    *(int64_t *)(v8 - 8) = v8;
    __asm_in_6((int16_t)a2);
    uint32_t v10 = *(int32_t *)0x69315478a70eb519; // 0x41fd7d
    int64_t v11 = v10; // 0x41fd7d
    char * v12 = (char *)(v11 - 0xaa3cd21); // 0x41fd86
    *v12 = -*v12;
    int64_t result2 = v11 & 0xffffff00 | (int64_t)*(char *)0x5f68d29fecfaa805; // 0x41fd8e
    int32_t v13 = (int32_t)result2 & -0x3617f356; // 0x41fd97
    while (v13 >= 0 == (v13 != 0)) {
        int64_t v14 = v9 - 1; // 0x41fd6b
        unsigned char v15 = llvm_ctpop_i8((char)v13); // 0x41fd97
        int64_t v16 = v8 - 16; // 0x41fd5d
        *(int64_t *)v16 = v6 | 64 * (int64_t)(v13 == 0) | 128 * (int64_t)(v13 < 0) | 4 * (int64_t)(v15 % 2 == 0) | 2;
        char * v17 = (char *)(v9 - 0x56f53da2); // 0x41fd5e
        unsigned char v18 = *v17; // 0x41fd5e
        unsigned char v19 = (char)(v10 / 256); // 0x41fd5e
        char v20 = v18 - v19; // 0x41fd5e
        unsigned char v21 = llvm_ctpop_i8(v20); // 0x41fd5e
        *v17 = v20;
        int64_t v22 = __asm_hlt(v14, a2, a3); // 0x41fd64
        int64_t v23 = v6 | (int64_t)(v18 < v19) | 64 * (int64_t)(v20 == 0) | 128 * (int64_t)(v20 < 0) | 16 * (int64_t)(v18 % 16 - v19 % 16 > 15) | 4 * (int64_t)(v21 % 2 == 0) | 2048 * (int64_t)(((v20 ^ v18) & (v18 ^ v19)) < 0) | 2; // 0x41fd65
        *(int64_t *)(v8 - 24) = v23;
        *(int64_t *)v22 = v23;
        v8 = v16;
        v9 = v14;
        __asm_int3(v9, a2);
        *(int64_t *)(v8 - 8) = v8;
        __asm_in_6((int16_t)a2);
        v10 = *(int32_t *)0x69315478a70eb519;
        v11 = v10;
        v12 = (char *)(v11 - 0xaa3cd21);
        *v12 = -*v12;
        result2 = v11 & 0xffffff00 | (int64_t)*(char *)0x5f68d29fecfaa805;
        v13 = (int32_t)result2 & -0x3617f356;
    }
    // 0x41fd9e
    return result2;
}

// Address range: 0x41fe7e - 0x41fe81
int64_t function_41fe7e(void) {
    // 0x41fe7e
    int64_t result; // 0x41fe7e
    return result;
}

// Address range: 0x41fed5 - 0x41fee1
int64_t function_41fed5(int64_t a1, int64_t a2) {
    // 0x41fed5
    int64_t result; // 0x41fed5
    char * v1 = (char *)(result + 82); // 0x41fed6
    *v1 = -1 - *v1;
    int32_t * v2 = (int32_t *)(result - 58); // 0x41fed9
    *v2 = *v2 - (int32_t)result;
    return result;
}

// Address range: 0x41ff2e - 0x41ff34
int64_t function_41ff2e(void) {
    // 0x41ff2e
    int64_t result; // 0x41ff2e
    return result;
}

// Address range: 0x41ff34 - 0x41ff3d
int64_t function_41ff34(int64_t a1, int64_t a2) {
    // 0x41ff34
    int64_t v1; // 0x41ff34
    return v1 & -256 | (uint64_t)v1 % 256;
}

// Address range: 0x41ff54 - 0x41ff56
int64_t function_41ff54(int64_t a1) {
    // 0x41ff54
    int64_t v1; // 0x41ff54
    return __asm_wait(v1, v1);
}

// Address range: 0x41ff5d - 0x41ff92
int64_t function_41ff5d(int64_t a1, int64_t a2) {
    int64_t v1 = a1 - 1; // 0x41ff5d
    int64_t result; // 0x41ff5d
    if (v1 == 0) {
        // 0x41ff5f
        return result;
    }
    // 0x41ff81
    return __asm_int3(v1, result);
}

// Address range: 0x41ff97 - 0x41ff98
int64_t function_41ff97(void) {
    // 0x41ff97
    int64_t result; // 0x41ff97
    return result;
}

// Address range: 0x41ff9b - 0x41ff9c
int64_t function_41ff9b(int64_t a1) {
    // 0x41ff9b
    int64_t result; // 0x41ff9b
    return result;
}

// Address range: 0x41ffb4 - 0x41ffcf
int64_t function_41ffb4(int64_t a1, int64_t a2, int64_t a3) {
    // 0x41ffb4
    if (a1 == 1) {
        // 0x41ffb8
        return 0xffffd061;
    }
    // 0x420020
    int64_t v1; // 0x41ffb4
    return (v1 & 0xffffffff | 0x100000000 * a2) / (v1 & 0xffffffff) & 0xffffffff;
}

// Address range: 0x41fff0 - 0x41fff7
int64_t function_41fff0(void) {
    // 0x41fff0
    int64_t result; // 0x41fff0
    char * v1 = (char *)(result - 104); // 0x41fff0
    unsigned char v2 = *v1; // 0x41fff0
    *v1 = v2 / 128 | 2 * v2;
    return result;
}

// Address range: 0x42000d - 0x42000e
int64_t function_42000d(void) {
    // 0x42000d
    int64_t result; // 0x42000d
    return result;
}

// Address range: 0x420011 - 0x420013
int64_t function_420011(void) {
    // 0x420011
    return function_42000d();
}

// Address range: 0x420014 - 0x420015
int64_t function_420014(void) {
    // 0x420014
    int64_t result; // 0x420014
    return result;
}

// Address range: 0x42001e - 0x420020
int64_t function_42001e(int64_t a1, int64_t a2) {
    // 0x42001e
    int64_t result; // 0x42001e
    return result;
}

// Address range: 0x42007c - 0x42007f
int64_t function_42007c(void) {
    // 0x42007c
    int64_t result; // 0x42007c
    return result;
}

// Address range: 0x42009d - 0x4200b3
int64_t function_42009d(int64_t a1, int64_t a2) {
    // 0x42009d
    int64_t v1; // 0x42009d
    int32_t * v2 = (int32_t *)(v1 - 80); // 0x4200ab
    *v2 = *v2 - (int32_t)v1;
    return function_ffffffff81968385();
}

// Address range: 0x420133 - 0x420142
int64_t function_420133(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420133
    int64_t v1; // 0x420133
    int64_t v2 = v1;
    __asm_out_5((int16_t)a2, (int32_t)v2);
    return v2 & 0xdd58009c | 256 * v2 & 0x6b00 | 0x22a79463;
}

// Address range: 0x420157 - 0x420158
int64_t function_420157(int64_t a1) {
    // 0x420157
    int64_t result; // 0x420157
    return result;
}

// Address range: 0x42015d - 0x420162
int64_t function_42015d(void) {
    // 0x42015d
    return function_ffffffffadae6cc8();
}

// Address range: 0x42018b - 0x420192
int64_t function_42018b(void) {
    // 0x42018b
    int64_t v1; // 0x42018b
    uint64_t v2 = v1;
    *(int32_t *)v1 = (int32_t)v1;
    return 256 * (v2 / 0x8000 % 2 | v2 / 128 & 254) | v2 & -0xff01;
}

// Address range: 0x4201a4 - 0x4201a5
int64_t function_4201a4(int64_t a1) {
    // 0x4201a4
    int64_t result; // 0x4201a4
    return result;
}

// Address range: 0x4201b5 - 0x4201ba
int64_t function_4201b5(void) {
    // 0x4201b5
    return function_ffffffff8de8849d();
}

// Address range: 0x4201ba - 0x4201bd
int64_t function_4201ba(void) {
    // 0x4201ba
    int64_t result; // 0x4201ba
    return result;
}

// Address range: 0x4201be - 0x4201c2
int64_t function_4201be(int64_t a1) {
    // 0x4201be
    int64_t result; // 0x4201be
    *(int32_t *)result = (int32_t)result;
    return result;
}

// Address range: 0x4201d7 - 0x4201e5
int64_t function_4201d7(int64_t a1, int64_t a2) {
    // 0x4201d7
    int64_t v1; // 0x4201d7
    char * v2 = (char *)(v1 + 0x252f394b); // 0x4201da
    unsigned char v3 = *v2; // 0x4201da
    *v2 = v3 / 128 | 2 * v3;
    return v1 & 0xffffffff;
}

// Address range: 0x4201f5 - 0x4201f6
int64_t function_4201f5(void) {
    // 0x4201f5
    int64_t result; // 0x4201f5
    return result;
}

// Address range: 0x420214 - 0x420215
int64_t function_420214(void) {
    // 0x420214
    int64_t result; // 0x420214
    return result;
}

// Address range: 0x420244 - 0x420257
int64_t function_420244(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420244
    int64_t v1; // 0x420244
    bool v2; // 0x420244
    if (v2) {
        v1 = function_420214();
    }
    // 0x420246
    int64_t v3; // 0x420244
    char * v4 = (char *)(v3 + 0x4f10914c); // 0x420246
    *v4 = (char)v2 + (char)a2 + *v4;
    __asm_out_4((int16_t)a2, (char)v1);
    __asm_wait(a1, a2 & -256 | 91);
    return function_fffffffff6f2517d();
}

// Address range: 0x420297 - 0x4202a0
int64_t function_420297(int64_t a1, int64_t a2) {
    // 0x420297
    int64_t result; // 0x420297
    return result;
}

// Address range: 0x4202ca - 0x4202d0
int64_t function_4202ca(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4202ca
    int64_t result; // 0x4202ca
    return result;
}

// Address range: 0x42034c - 0x420351
int64_t function_42034c(void) {
    // 0x42034c
    return function_25c881ea();
}

// Address range: 0x42037a - 0x420380
int64_t function_42037a(void) {
    // 0x42037a
    int64_t result; // 0x42037a
    return result;
}

// Address range: 0x42038d - 0x42039e
int64_t function_42038d(void) {
    // 0x42038d
    int64_t v1; // 0x42038d
    *(char *)(v1 - 115) = (char)(v1 / 256);
    *(int32_t *)-0x85efcc712a104bd = (int32_t)v1;
    return function_ffffffffb7323045();
}

// Address range: 0x4203d6 - 0x4203db
int64_t function_4203d6(void) {
    // 0x4203d6
    return function_48e26420();
}

// Address range: 0x4203ea - 0x4203ed
int64_t function_4203ea(void) {
    // 0x4203ea
    int64_t result; // 0x4203ea
    return result;
}

// Address range: 0x420401 - 0x420402
int64_t function_420401(int64_t a1) {
    // 0x420401
    int64_t result; // 0x420401
    return result;
}

// Address range: 0x420413 - 0x42041b
int64_t function_420413(int64_t a1) {
    // 0x420413
    int64_t result; // 0x420413
    *(int32_t *)result = (int32_t)result;
    bool v1; // 0x420413
    *(int32_t *)((v1 ? -4 : 4) + result) = (int32_t)result;
    uint32_t v2 = (int32_t)a1 % 32; // 0x420415
    if (v2 != 0) {
        int32_t * v3 = (int32_t *)(result - 7); // 0x420415
        uint32_t v4 = *v3; // 0x420415
        *v3 = v4 >> v2 | (int32_t)v1 << 32 - v2 | (int32_t)((int64_t)v4 << (int64_t)(33 - v2));
    }
    return result;
}

// Address range: 0x42041c - 0x42041e
int64_t function_42041c(void) {
    // 0x42041c
    int64_t v1; // 0x42041c
    return function_420473(v1, v1, v1, v1);
}

// Address range: 0x420452 - 0x420456
int64_t function_420452(int64_t a1, int64_t a2) {
    // 0x420452
    return __asm_in_3((int16_t)a2);
}

// Address range: 0x42046b - 0x42046c
int64_t function_42046b(void) {
    // 0x42046b
    int64_t result; // 0x42046b
    return result;
}

// Address range: 0x420473 - 0x420504
int64_t function_420473(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x420473
    int64_t result; // 0x420473
    int64_t v1 = __asm_sti(a1, a2, a3); // 0x420479
    int64_t v2; // 0x420473
    __asm_fbld(*(float80_t *)(v2 - 0x529a0c3));
    int32_t * v3 = (int32_t *)(8 * a2 - 0x5114f5fa + v2); // 0x420486
    uint32_t v4 = *v3; // 0x420486
    uint32_t v5 = v4 + (int32_t)v2; // 0x420486
    *v3 = v5;
    int32_t * v6 = (int32_t *)(a2 + 20);
    int64_t v7 = 0xfd42f7d5; // 0x420486
    int64_t v8 = a3; // 0x420486
    bool v9 = v5 < v4; // 0x420486
    unsigned char v10 = (char)v1; // 0x42048d
    unsigned char v11 = v10 - 92 + (char)v9; // 0x42048d
    int64_t v12 = v1 & -256 | (int64_t)v11; // 0x42048d
    result = v12;
    while (v11 != 0 && !((v9 ? v11 <= v10 : v10 > 91))) {
        // 0x420491
        int64_t v13; // 0x420473
        int64_t v14 = v13;
        int64_t v15 = v7;
        int32_t * v16 = (int32_t *)(v14 - 0x49a6fc56); // 0x420496
        int32_t v17 = *v16 - (int32_t)v12; // 0x420496
        unsigned char v18 = llvm_ctpop_i8((char)v17); // 0x420496
        *v16 = v17;
        if (v18 % 2 == 0) {
            int32_t * v19 = (int32_t *)(v2 + 105); // 0x4204a1
            *v19 = *v19 << 31;
            unsigned char v20 = llvm_ctpop_i8((char)*(int32_t *)(v2 + 0x42e2f637) - 111); // 0x4204a9
            __asm_in(-116);
            int64_t v21 = __asm_iretd(a1, a2); // 0x4204b4
            __asm_out_4((int16_t)a2, (char)v21);
            result = v21;
            if (v20 % 2 == 0) {
                int32_t * v22 = (int32_t *)((2 * v21 & 0x1fffffffe) + (v15 & 0xffffffff)); // 0x4204bb
                *v22 = *v22 ^ -0x4595e54f;
                return v2 & 0xffffffff;
            }
            return result;
        }
        // 0x4204ee
        *v6 = *v6 & (int32_t)v2;
        int64_t v23 = *(int64_t *)v15; // 0x4204f3
        int32_t * v24 = (int32_t *)(v15 + 132 + 8 * v23); // 0x4204e1
        uint32_t v25 = *v24; // 0x4204e1
        uint32_t v26 = v25 + (int32_t)a2; // 0x4204e1
        *v24 = v26;
        v7 = v15 + 8;
        v13 = v23;
        int64_t v27 = v8; // 0x4204e5
        v8 = v14 & 0xffffffff;
        v9 = true;
        if (v26 >= v25) {
            // 0x4204e7
            return __asm_int3(a1, a2);
        }
        v10 = (char)v27;
        v11 = v10 - 92 + (char)v9;
        v12 = v27 & -256 | (int64_t)v11;
        result = v12;
    }
  lab_0x420475:
    // 0x420475
    return result;
}

// Address range: 0x42053b - 0x420544
int64_t function_42053b(uint64_t a1) {
    // 0x42053b
    int64_t result; // 0x42053b
    char * v1 = (char *)(2 * a1 + 0x715ad65c + result); // 0x42053b
    *v1 = *v1 + (char)(a1 / 256);
    return result;
}

// Address range: 0x420552 - 0x420564
int64_t function_420552(int64_t a1, uint64_t a2) {
    // 0x420552
    int64_t v1; // 0x420552
    char * v2 = (char *)(v1 - 0x5bfcde42); // 0x420558
    *v2 = *v2 - (char)(a2 / 256);
    return v1 & -256 | 232;
}

// Address range: 0x42056d - 0x42057a
int64_t function_42056d(int64_t a1, int64_t a2) {
    // 0x42056d
    int64_t v1; // 0x42056d
    uint64_t v2 = v1;
    bool v3; // 0x42056d
    *(char *)a1 = (char)v1 + (char)a2 + (char)v3;
    int32_t * v4 = (int32_t *)(a1 + 124); // 0x420576
    *v4 = 2 * *v4;
    return v2 & -256 | (int64_t)*(char *)(v2 % 256 + v1);
}

// Address range: 0x420584 - 0x420585
int64_t function_420584(int64_t a1) {
    // 0x420584
    int64_t result; // 0x420584
    return result;
}

// Address range: 0x420585 - 0x420590
int64_t function_420585(int64_t a1, int64_t a2) {
    // 0x420585
    int64_t result; // 0x420585
    return result;
}

// Address range: 0x420592 - 0x420597
int64_t function_420592(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420592
    int64_t result; // 0x420592
    return result;
}

// Address range: 0x4205c3 - 0x4205c8
int64_t function_4205c3(void) {
    // 0x4205c3
    return function_fffffffffc4b824e();
}

// Address range: 0x420619 - 0x42061c
int64_t function_420619(void) {
    // 0x420619
    int64_t result; // 0x420619
    return result;
}

// Address range: 0x42063e - 0x42063f
int64_t function_42063e(void) {
    // 0x42063e
    int64_t result; // 0x42063e
    return result;
}

// Address range: 0x42066f - 0x420678
int64_t function_42066f(void) {
    // 0x42066f
    int64_t v1; // 0x42066f
    bool v2; // 0x42066f
    if (v2) {
        v1 = function_42063e();
    }
    int64_t v3 = v1;
    int64_t v4; // 0x42066f
    *(char *)v4 = (char)v4;
    return (v3 + 72) % 256 | v3 & -256;
}

// Address range: 0x4206ed - 0x4206f2
int64_t function_4206ed(int64_t a1) {
    // 0x4206ed
    int64_t result; // 0x4206ed
    *(char *)a1 = 2 * (char)result;
    return result;
}

// Address range: 0x4206f8 - 0x4206ff
int64_t function_4206f8(int64_t a1) {
    // 0x4206f8
    int64_t v1; // 0x4206f8
    return v1 & -256 | (int64_t)*(char *)(a1 - 0x38e9a3b4);
}

// Address range: 0x42071b - 0x420743
int64_t function_42071b(int64_t a1, int64_t a2) {
    // 0x42071b
    int64_t v1; // 0x42071b
    __asm_out_1(74, (char)v1);
    return function_28ca876c();
}

// Address range: 0x420744 - 0x420754
int64_t function_420744(int64_t a1, int64_t a2) {
    // 0x420744
    int64_t v1; // 0x420744
    int32_t v2 = *(int32_t *)(v1 + 0x7af368a8 + 4 * v1); // 0x420745
    int16_t v3 = v1; // 0x42074c
    int16_t v4 = v3 % 256; // 0x42074c
    *(char *)v1 = __asm_insb((int16_t)(v2 & (int32_t)a2));
    return v1 & -0x10000 | (int64_t)(v3 / v4 % 256) | (int64_t)(256 * (v3 % v4));
}

// Address range: 0x42080f - 0x420810
int64_t function_42080f(int64_t a1) {
    // 0x42080f
    int64_t result; // 0x42080f
    return result;
}

// Address range: 0x420810 - 0x420815
int64_t function_420810(void) {
    // 0x420810
    int64_t result; // 0x420810
    return result;
}

// Address range: 0x420888 - 0x420890
int64_t function_420888(int64_t a1) {
    // 0x420888
    int64_t v1; // 0x420888
    int64_t v2 = v1;
    bool v3; // 0x420888
    unsigned char v4 = *(char *)((v3 ? -4 : 4) + v1); // 0x420889
    return v2 + 0x2f620274 + (int64_t)(v4 > (char)v2) & 0xffffffff;
}

// Address range: 0x4208be - 0x4208bf
int64_t function_4208be(void) {
    // 0x4208be
    int64_t result; // 0x4208be
    return result;
}

// Address range: 0x4208d0 - 0x4208d2
int64_t function_4208d0(void) {
    // 0x4208d0
    return function_4208be();
}

// Address range: 0x4208d2 - 0x4208d9
int64_t function_4208d2(void) {
    // 0x4208d2
    int64_t v1; // 0x4208d2
    uint32_t v2 = *(int32_t *)(v1 - 61); // 0x4208d2
    return __asm_hlt(v1, (v1 & 0xffffffff) * (int64_t)v2 / 0x100000000, v1);
}

// Address range: 0x4208de - 0x4208df
int64_t function_4208de(int64_t a1) {
    // 0x4208de
    int64_t result; // 0x4208de
    return result;
}

// Address range: 0x4208f7 - 0x4208fa
int64_t function_4208f7(void) {
    // 0x4208f7
    int64_t result; // 0x4208f7
    return result;
}

// Address range: 0x420904 - 0x42096a
int64_t function_420904(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x420904
    int64_t result; // 0x420904
    return result;
}

// Address range: 0x420978 - 0x420983
int64_t function_420978(int64_t a1, int64_t a2) {
    // 0x420978
    *(char *)(a1 + 0x65892bbb) = -69;
    int64_t v1; // 0x420978
    return v1 & 0xffffffff;
}

// Address range: 0x420991 - 0x4209b4
int64_t function_420991(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420991
    int64_t v1; // 0x420991
    *(char *)v1 = (char)v1;
    int64_t v2 = v1 + 0x67fb240c; // 0x4209a5
    __asm_out_5((int16_t)a2, (int32_t)v2);
    return v2 & 0xffffffff ^ 0x64045720;
}

// Address range: 0x4209c1 - 0x4209cc
int64_t function_4209c1(int64_t a1) {
    // 0x4209c1
    int64_t v1; // 0x4209c1
    int64_t v2 = v1;
    return (v2 - v1) % 256 | v2 & -256;
}

// Address range: 0x420a4e - 0x420a53
int64_t function_420a4e(void) {
    // 0x420a4e
    return function_ffffffffab356965();
}

// Address range: 0x420a64 - 0x420a65
int64_t function_420a64(void) {
    // 0x420a64
    int64_t result; // 0x420a64
    return result;
}

// Address range: 0x420a8a - 0x420a8b
int64_t function_420a8a(void) {
    // 0x420a8a
    int64_t result; // 0x420a8a
    return result;
}

// Address range: 0x420aa3 - 0x420aaa
int64_t function_420aa3(int64_t a1, int64_t a2) {
    // 0x420aa3
    int64_t result; // 0x420aa3
    return result;
}

// Address range: 0x420ac2 - 0x420ae9
int64_t function_420ac2(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420ac2
    int64_t v1; // 0x420ac2
    *(int32_t *)v1 = (int32_t)v1;
    int64_t v2 = a1 - 1; // 0x420ac7
    bool v3; // 0x420ac2
    if (v2 != 0 && !v3) {
        function_420a64();
    }
    // 0x420ac9
    __asm_hlt(v2, a2, v1);
    uint64_t v4 = __asm_int1(v2, a2); // 0x420acd
    __asm_out_5((int16_t)a2, (int32_t)v4);
    int64_t v5 = v4 - 0x421f661; // 0x420adc
    int64_t result = v5; // 0x420ae2
    if (v4 > 0x421f660 || v5 == 0) {
        result = function_420a8a();
    }
    // 0x420ae5
    return result;
}

// Address range: 0x420afb - 0x420afe
int64_t function_420afb(void) {
    // 0x420afb
    int64_t result; // 0x420afb
    return result;
}

// Address range: 0x420b25 - 0x420b58
int64_t function_420b25(uint64_t a1, int64_t a2) {
    // 0x420b25
    int64_t v1; // 0x420b25
    int32_t v2 = 0x54557b2f * *(int32_t *)(v1 + 0x6757eae1); // 0x420b25
    *(int32_t *)v1 = v2;
    __asm_out(62, v2);
    int32_t v3 = v2 - 0x71057b78; // 0x420b34
    float80_t v4; // 0x420b25
    bool v5; // 0x420b25
    *(int32_t *)((v5 ? -4 : 4) + v1) = (int32_t)v4;
    char * v6 = (char *)(a2 - 109); // 0x420b3c
    *v6 = *v6 + (char)v3;
    char * v7 = (char *)(a2 - 8); // 0x420b3f
    *v7 = *v7 ^ (char)(a1 / 256);
    __asm_int(114);
    *(int64_t *)((int64_t)(v3 & -133) - 8) = -21;
    return function_16779a9f();
}

// Address range: 0x420b5a - 0x420b6b
int64_t function_420b5a(int64_t a1, int64_t a2) {
    // 0x420b5a
    return function_ffffffffd6beccf0();
}

// Address range: 0x420b80 - 0x420b92
int64_t function_420b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x420b80
    int64_t v1; // 0x420b80
    *(char *)(a1 + 0x15a3199d) = (char)((uint64_t)v1 / 256);
    int64_t v2; // 0x420b80
    *(int32_t *)a4 = *(int32_t *)&v2 + (int32_t)a3;
    return function_420be1(a1, a2);
}

// Address range: 0x420bca - 0x420bcf
int64_t function_420bca(int64_t a1) {
    // 0x420bca
    int64_t v1; // 0x420bca
    *(char *)(v1 & 0xffffffff) = (char)v1;
    return v1 & 0xffffffff;
}

// Address range: 0x420be1 - 0x420bf2
int64_t function_420be1(int64_t a1, int64_t a2) {
    // 0x420be1
    __asm_int1(a1, a2);
    int64_t v1; // 0x420be1
    return __asm_sti(a1, a2, v1);
}

// Address range: 0x420c00 - 0x420c0e
int64_t function_420c00(void) {
    // 0x420c00
    int64_t result; // 0x420c00
    return result;
}

// Address range: 0x420c0e - 0x420daa
int64_t function_420c0e(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    int64_t result = unknown_4e38f4f(); // 0x420c14
    int64_t v1; // 0x420c0e
    int32_t * v2 = (int32_t *)(v1 + 1 + v1); // 0x420c1b
    bool v3; // 0x420c0e
    *v2 = *v2 - (v3 ? -0x51b2739 : -0x51b273a);
    char * v4 = (char *)a3; // 0x420c22
    unsigned char v5 = *v4; // 0x420c22
    char v6 = a3; // 0x420c22
    char v7 = v5 + v6; // 0x420c22
    *v4 = v7;
    int64_t v8 = a1 - 1; // 0x420c24
    if (v8 == 0 || v7 == 0) {
        // 0x420c26
        return result;
    }
    if (v7 < 0 == ((v7 ^ v5) & (v7 ^ v6)) < 0) {
        // 0x420d0d
        int64_t v9; // 0x420c0e
        char v10 = *(char *)&v9; // 0x420d17
        *(char *)v9 = v10 ^ (*(char *)(v1 + 92) | (char)v8);
        return result & -256 | (int64_t)__asm_in_2(83);
    }
    int64_t v11 = result - (v7 < v5 ? 0xe728abaa : 0xe728aba9); // 0x420c94
    uint64_t v12 = *(int64_t *)0xfae4d8c6; // 0x420c9b
    if ((v12 & 2048) == 0) {
        int32_t * v13 = (int32_t *)(v1 + (v8 & -0xff01 | 0xec00)); // 0x420c9e
        *v13 = (int32_t)(v12 % 2 != 0) - (int32_t)v11 + *v13;
        return function_301a295f();
    }
    // 0x420ccc
    if (v12 % 2 != 0) {
        // 0x420c26
        return v11 & 0xffffffff;
    }
    // 0x420ccf
    return (v11 + 142) % 256 | v11 & 0xffffff00;
}

// Address range: 0x420dc6 - 0x420dd4
int64_t function_420dc6(int64_t a1) {
    // 0x420dc6
    return (int64_t)*(int32_t *)-0x79e6cf8103f3c81a;
}

// Address range: 0x420e15 - 0x420e16
int64_t function_420e15(int64_t a1) {
    // 0x420e15
    int64_t result; // 0x420e15
    return result;
}

// Address range: 0x420e3d - 0x420e46
int64_t function_420e3d(int64_t a1, int64_t a2, int64_t a3) {
    // 0x420e3d
    int64_t v1; // 0x420e3d
    int64_t v2 = v1;
    char * v3 = (char *)(a2 + 0x732fa80a); // 0x420e3d
    *v3 = *v3 | (char)v1;
    return (v2 + 64) % 256 | v2 & -256;
}

// Address range: 0x420e64 - 0x420e67
int64_t function_420e64(void) {
    // 0x420e64
    int64_t result; // 0x420e64
    return result;
}

// Address range: 0x420e8a - 0x420e8c
int64_t function_420e8a(void) {
    // 0x420e8a
    int64_t v1; // 0x420e8a
    return function_420ea3(v1);
}

// Address range: 0x420e8d - 0x420e8e
int64_t function_420e8d(int64_t a1) {
    // 0x420e8d
    int64_t result; // 0x420e8d
    return result;
}

// Address range: 0x420e8f - 0x420e92
int64_t function_420e8f(int64_t a1) {
    // 0x420e8f
    int64_t result; // 0x420e8f
    return result;
}

// Address range: 0x420ea3 - 0x420eb1
int64_t function_420ea3(int64_t a1) {
    // 0x420ea3
    int64_t v1; // 0x420ea3
    int32_t v2 = *(int32_t *)(v1 + 0x65c432de + v1); // 0x420ea3
    bool v3; // 0x420ea3
    return v2 - 0x3d969469 + (int32_t)v3;
}

// Address range: 0x420eb3 - 0x420eb9
int64_t function_420eb3(void) {
    // 0x420eb3
    int64_t result; // 0x420eb3
    return result;
}

// Address range: 0x420ec9 - 0x420ecd
int64_t function_420ec9(void) {
    // 0x420ec9
    int64_t v1; // 0x420ec9
    return function_420f41(v1, v1);
}

// Address range: 0x420ecf - 0x420f41
int64_t function_420ecf(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x420ecf
    int64_t result; // 0x420ecf
    uint32_t v1 = (int32_t)result; // 0x420ecf
    int32_t v2 = *(int32_t *)(result - 0x17a20f6c); // 0x420ecf
    uint32_t v3 = v2 + v1; // 0x420ecf
    if (v3 >= v1) {
        // 0x420ee0
        return result;
    }
    if (((v3 ^ v1) & (v3 ^ v2)) >= 0) {
        // 0x420ee0
        return result;
    }
    // 0x420edb
    return result & -191;
}

// Address range: 0x420f41 - 0x420f4a
int64_t function_420f41(int64_t a1, int64_t a2) {
    // 0x420f41
    int64_t v1; // 0x420f41
    uint64_t v2 = v1 + 140; // 0x420f41
    *(int32_t *)(v1 - 0x202fc073) = (int32_t)a2;
    *(char *)v1 = (char)v2;
    return v2 % 256 | v1 & -256;
}

// Address range: 0x420f56 - 0x420f57
int64_t function_420f56(void) {
    // 0x420f56
    int64_t v1; // 0x420f56
    return __asm_sti(v1, v1, v1);
}

// Address range: 0x420f5c - 0x420f5f
int64_t function_420f5c(void) {
    // 0x420f5c
    int64_t result; // 0x420f5c
    return result;
}

// Address range: 0x420f88 - 0x420fa2
int64_t function_420f88(int64_t a1, int64_t a2) {
    // 0x420f88
    int64_t v1; // 0x420f88
    *(int32_t *)0x3ce548b9381e5bed = (int32_t)v1;
    int16_t v2 = a2; // 0x420f94
    *(int32_t *)v1 = __asm_insd(v2);
    return __asm_in_3(v2);
}

// Address range: 0x420fba - 0x420fc6
int64_t function_420fba(int64_t a1) {
    // 0x420fba
    int64_t v1; // 0x420fba
    int32_t v2 = v1; // 0x420fba
    __asm_out(3, v2);
    char * v3 = (char *)(v1 - 25); // 0x420fc2
    *v3 = *v3 - (char)a1;
    bool v4; // 0x420fba
    return (int64_t)((int32_t)v4 + v2 - *(int32_t *)0x25dadefb);
}

// Address range: 0x420fe0 - 0x421009
int64_t function_420fe0(int64_t a1, int64_t a2) {
    // 0x420fe0
    int64_t v1; // 0x420fe0
    uint64_t v2 = __asm_hlt(a1, v1, v1); // 0x420fe8
    char * v3 = (char *)(v1 - 43); // 0x420fe9
    *v3 = *v3 + (char)(v2 / 256);
    __asm_out_1(119, (char)v2);
    __asm_int(36);
    int256_t v4; // 0x420fe0
    __asm_vminps(v4, v4);
    return __asm_int1(a1, v1);
}

// Address range: 0x42101e - 0x421021
int64_t function_42101e(void) {
    // 0x42101e
    int64_t result; // 0x42101e
    return result;
}

// Address range: 0x421039 - 0x42103b
int64_t function_421039(void) {
    // 0x421039
    int64_t result; // 0x421039
    *(int32_t *)result = (int32_t)result;
    return result;
}

// Address range: 0x421056 - 0x42105b
int64_t function_421056(void) {
    // 0x421056
    return function_4c49785b();
}

// Address range: 0x42105d - 0x42105e
int64_t function_42105d(void) {
    // 0x42105d
    int64_t result; // 0x42105d
    return result;
}

// Address range: 0x42106b - 0x42106c
int64_t function_42106b(void) {
    // 0x42106b
    int64_t result; // 0x42106b
    return result;
}

// Address range: 0x42108f - 0x4210a3
int64_t function_42108f(int64_t a1) {
    // 0x42108f
    int64_t v1; // 0x42108f
    char v2 = v1; // 0x421092
    bool v3; // 0x42108f
    char v4 = v3 ? 119 : 118; // 0x421092
    int64_t v5 = v1 & 0xffffff00 | (int64_t)(v2 - v4); // 0x421094
    if (v4 >= v2) {
        v5 = function_42105d();
    }
    char * v6 = (char *)(v1 + 0x37926a8b); // 0x421096
    *v6 = (char)v5;
    *(int32_t *)(v1 & 0xffffffff) = (int32_t)v1;
    int64_t result = v5 & -256 | (int64_t)*v6; // 0x42109e
    if (v4 > v2) {
        result = function_42106b();
    }
    // 0x4210a0
    return result;
}

// Address range: 0x42110c - 0x421112
int64_t function_42110c(int64_t a1) {
    // 0x42110c
    int64_t result; // 0x42110c
    return result;
}

// Address range: 0x421173 - 0x421174
int64_t function_421173(void) {
    // 0x421173
    int64_t result; // 0x421173
    return result;
}

// Address range: 0x421187 - 0x421214
int64_t function_421187(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x421187
    int64_t v1; // 0x421187
    bool v2; // 0x421187
    uint32_t v3 = v2 ? *(int32_t *)(v1 + 0x417abc97) : (int32_t)unknown_40c66028(); // 0x421195
    char * v4 = (char *)(int64_t)v3; // 0x42119c
    char v5 = *v4 & -36; // 0x42119c
    *v4 = v5;
    int64_t result = function_421173(); // 0x42119f
    if (a1 != 0) {
        // 0x4211a3
        return result;
    }
    int64_t v6 = __asm_hlt(0, a2, a3); // 0x4211f5
    float80_t v7; // 0x421187
    *(int16_t *)(a3 - 82) = (int16_t)v7;
    if (v5 >= 0) {
        // 0x42120f
        return function_ffffffff95dd6171();
    }
    int64_t v8 = (int64_t)*(int32_t *)(result - 0x1cfede8e); // 0x4211ea
    int64_t v9 = -0x3d3ef491 * v8 == -0x3d3ef49100000000 * v8 >> 32 ? 5 : 6; // 0x4211fe
    return (v6 - v9) % 256 | v6 & -256;
}

// Address range: 0x421215 - 0x421225
int64_t function_421215(uint64_t result) {
    // 0x421215
    *(char *)-0x3de4a46a = *(char *)-0x3de4a46a | (char)(result / 256);
    return result;
}

// Address range: 0x42123c - 0x421242
int64_t function_42123c(int64_t a1) {
    // 0x42123c
    int64_t result; // 0x42123c
    *(int32_t *)result = (int32_t)result;
    bool v1; // 0x42123c
    int32_t * v2 = (int32_t *)((v1 ? -4 : 4) + result); // 0x42123d
    *v2 = -1 - *v2;
    return result;
}

// Address range: 0x42128b - 0x42128c
int64_t function_42128b(int64_t a1) {
    // 0x42128b
    int64_t result; // 0x42128b
    return result;
}

// Address range: 0x4212c4 - 0x4212c5
int64_t function_4212c4(void) {
    // 0x4212c4
    int64_t result; // 0x4212c4
    return result;
}

// Address range: 0x4212d4 - 0x4212db
int64_t function_4212d4(void) {
    // 0x4212d4
    return function_ffffffffa6cd84f1();
}

// Address range: 0x4212e1 - 0x4212e2
int64_t function_4212e1(void) {
    // 0x4212e1
    int64_t result; // 0x4212e1
    return result;
}

// Address range: 0x4212f8 - 0x421307
int64_t function_4212f8(int64_t a1) {
    // 0x4212f8
    return unknown_3090d676();
}

// Address range: 0x421307 - 0x42130d
int64_t function_421307(void) {
    // 0x421307
    int64_t result; // 0x421307
    return result;
}

// Address range: 0x42130f - 0x421314
int64_t function_42130f(void) {
    // 0x42130f
    return function_fffffffff89abb09();
}

// Address range: 0x421317 - 0x42137f
int64_t function_421317(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x421317
    int64_t v1; // 0x421317
    if ((char)v1 >= 111) {
        // 0x421322
        __asm_hlt(a1, a2, a3);
        *(char *)a4 = (char)a4 - 40;
        __asm_in_2(-106);
        __readgsbyte(a2);
        return function_4212c4();
    }
    int64_t v2 = (v1 & 0xffffff00 | (int64_t)__asm_in_2(-67)) + 0x3f6a6bea; // 0x421357
    char v3 = *(char *)(v2 & 0xffffffff); // 0x42135c
    int64_t result = v2 & 0xffff0000 | (int64_t)((256 * (int16_t)v2 >> 8) * (int16_t)v3); // 0x42135c
    int32_t * v4 = (int32_t *)(result + 108); // 0x421366
    *v4 = *v4 & 37;
    return result;
}

// Address range: 0x421391 - 0x421392
int64_t function_421391(void) {
    // 0x421391
    int64_t result; // 0x421391
    return result;
}

// Address range: 0x42139d - 0x4213b5
int64_t function_42139d(int64_t a1, int64_t a2) {
    // 0x42139d
    int64_t v1; // 0x42139d
    int64_t v2 = v1;
    bool v3; // 0x42139d
    if (v3) {
        function_421391();
    }
    char v4 = *(char *)(2 * v1 - 0x5891e4f5); // 0x4213a3
    return v2 & 0xffffff00 | (int64_t)((char)v3 + (char)v2 + v4);
}

// Address range: 0x4213bd - 0x4213d3
int64_t function_4213bd(int64_t a1) {
    // 0x4213bd
    int64_t v1; // 0x4213bd
    int64_t v2 = v1;
    bool v3; // 0x4213bd
    *(int32_t *)v2 = (int32_t)v2 - (int32_t)v1 + (int32_t)v3;
    __asm_out(-62, (int32_t)a1);
    return a1 + 0xd9cdbeb0 & 0xce812376 | 0x317edc89;
}

// Address range: 0x4213d5 - 0x4213e0
int64_t function_4213d5(void) {
    // 0x4213d5
    int64_t v1; // 0x4213d5
    bool v2; // 0x4213d5
    return v1 - (v2 ? 0xdb040437 : 0xdb040436) & 0xffffffff;
}

// Address range: 0x4213ea - 0x421415
int64_t function_4213ea(int64_t a1) {
    // 0x4213ea
    int64_t result; // 0x4213ea
    unsigned char v1 = (char)result; // 0x4213ea
    unsigned char v2 = (char)result;
    while (v2 > v1) {
        if (v2 > v1) {
            // 0x421409
            return result;
        }
    }
    // 0x4213ed
    bool v3; // 0x4213ea
    *(int32_t *)((v3 ? -1 : 1) + result) = (int32_t)result;
    int64_t v4; // 0x4213ea
    *(int32_t *)v4 = *(int32_t *)&v4 - 73;
    return result & -0xff01 | 0x3e00;
}

// Address range: 0x42141d - 0x421422
int64_t function_42141d(void) {
    // 0x42141d
    return function_ffffffffef77988f();
}

// Address range: 0x42143f - 0x421444
int64_t function_42143f(void) {
    // 0x42143f
    return function_23870220();
}

// Address range: 0x421461 - 0x421462
int64_t function_421461(void) {
    // 0x421461
    int64_t result; // 0x421461
    return result;
}

// Address range: 0x42149b - 0x42149f
int64_t function_42149b(void) {
    // 0x42149b
    return function_421461();
}

// Address range: 0x4214ab - 0x4214ac
int64_t function_4214ab(void) {
    // 0x4214ab
    int64_t result; // 0x4214ab
    return result;
}

// Address range: 0x4214cc - 0x4214f5
int64_t function_4214cc(int64_t a1, int64_t a2) {
    // 0x4214cc
    int64_t v1; // 0x4214cc
    int32_t * v2 = (int32_t *)(v1 - 0x6ed8540d); // 0x4214cc
    int32_t v3 = *v2; // 0x4214cc
    *v2 = -v3;
    int64_t v4; // 0x4214cc
    if (a1 == 0) {
        v4 = function_4214ab();
    }
    int64_t v5 = v4;
    int64_t result = (v5 + (v3 == 0 ? 154 : 155)) % 256 | v5 & -256; // 0x4214d4
    char * v6 = (char *)(result - 0x74de1e88); // 0x4214d6
    *v6 = *v6 & (char)(v1 / 256);
    unsigned char v7 = (char)a1 % 32; // 0x4214dc
    if (v7 != 0) {
        char * v8 = (char *)(a2 + 47); // 0x4214dc
        *v8 = *v8 << v7;
    }
    int32_t * v9 = (int32_t *)(v1 + 37); // 0x4214e9
    *v9 = *v9 & (int32_t)v1;
    return result;
}

// Address range: 0x421501 - 0x421506
int64_t function_421501(void) {
    // 0x421501
    return function_ffffffff814c8ff7();
}

// Address range: 0x421562 - 0x42156c
int64_t function_421562(void) {
    // 0x421562
    __asm_int(48);
    *(char *)0xbd81064 = *(char *)0xbd81064 ^ 109;
    int64_t result; // 0x421562
    return result;
}

// Address range: 0x42158a - 0x42158b
int64_t function_42158a(void) {
    // 0x42158a
    int64_t result; // 0x42158a
    return result;
}

// Address range: 0x42159c - 0x421624
int64_t function_42159c(int64_t a1, int64_t a2) {
    // 0x42159c
    int64_t result; // 0x42159c
    return result;
}

// Address range: 0x421695 - 0x42169a
int64_t function_421695(void) {
    // 0x421695
    return function_ffffffffa0ed9294();
}

// Address range: 0x4216a3 - 0x4216b4
int64_t function_4216a3(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4216a3
    int64_t v1; // 0x4216a3
    int64_t v2 = v1;
    int64_t v3 = (int64_t)*(int32_t *)(v1 + 97); // 0x4216a3
    return (v2 - (-46 * v3 == -0x2e00000000 * v3 >> 32 ? 189 : 190)) % 256 | v2 & -256;
}

// Address range: 0x4216b4 - 0x4216bd
int64_t function_4216b4(int64_t a1) {
    // 0x4216b4
    int64_t result; // 0x4216b4
    return result;
}

// Address range: 0x4216c0 - 0x4216c7
int64_t function_4216c0(void) {
    // 0x4216c0
    return function_ffffffff97826008();
}

// Address range: 0x4216e5 - 0x4216e6
int64_t function_4216e5(void) {
    // 0x4216e5
    int64_t result; // 0x4216e5
    return result;
}

// Address range: 0x421702 - 0x421709
int64_t function_421702(void) {
    // 0x421702
    return function_4216e5();
}

// Address range: 0x421731 - 0x421735
int64_t function_421731(void) {
    // 0x421731
    int64_t result; // 0x421731
    return result;
}

// Address range: 0x42176a - 0x42176b
int64_t function_42176a(void) {
    // 0x42176a
    int64_t result; // 0x42176a
    return result;
}

// Address range: 0x42176c - 0x42176f
int64_t function_42176c(int64_t a1, int64_t a2, int64_t a3) {
    // 0x42176c
    int64_t result; // 0x42176c
    *(char *)result = __asm_insb((int16_t)a2);
    return result;
}

// Address range: 0x4217a9 - 0x4217e9
int64_t function_4217a9(int64_t a1, int64_t a2) {
    int64_t v1 = a2;
    int16_t v2 = a2; // 0x4217ae
    int64_t v3; // 0x4217a9
    __asm_out_5(v2, (int32_t)v3);
    bool v4; // 0x4217a9
    int64_t v5 = v4 ? -4 : 4; // 0x4217af
    int64_t v6 = v5 + v3; // 0x4217af
    int64_t v7 = 0x5a1b8982; // bp-16231, 0x4217b0
    int32_t v8 = *(int32_t *)(v3 + 0x1a40f925); // 0x4217b5
    int64_t v9 = (int32_t)((int32_t)v3 < (int32_t)v3) + (int32_t)v3 - v8; // 0x4217b5
    uint32_t v10 = __asm_in_3(v2); // 0x4217bb
    uint32_t v11 = *(int32_t *)(v6 - 0x4b990896); // 0x4217bc
    char v12 = *(char *)((int64_t)(v10 % 256) + v9); // 0x4217c3
    float80_t v13; // 0x4217a9
    *(float64_t *)((int64_t)(v12 - 59 + (char)(v11 < 18)) | (int64_t)(v10 & -256)) = (float64_t)v13;
    uint32_t v14 = *(int32_t *)(v9 + 100 + 8 * v9); // 0x4217d6
    __asm_out(69, v14);
    int64_t result = v14; // 0x4217dc
    if (*(char *)(v5 + (v3 & 0xffffffff)) - *(char *)v6 < 0) {
        result = function_42176a();
    }
    int32_t * v15 = (int32_t *)result; // 0x4217e1
    uint32_t v16 = *v15; // 0x4217e1
    *v15 = v16 - 28;
    int32_t v17 = *(int32_t *)&v1; // 0x4217e4
    *(int32_t *)v1 = v17 - ((int32_t)(v16 < 28) | (int32_t)(int64_t)&v7);
    return result;
}

// Address range: 0x4217f7 - 0x4217fb
int64_t function_4217f7(void) {
    // 0x4217f7
    return function_42183f();
}

// Address range: 0x42180d - 0x421812
int64_t function_42180d(int64_t a1) {
    // 0x42180d
    int64_t result; // 0x42180d
    return result;
}

// Address range: 0x421814 - 0x42183c
int64_t function_421814(int64_t a1, uint64_t a2) {
    // 0x421814
    if (a1 != 0) {
        // 0x421816
        int64_t v1; // 0x421814
        return __asm_hlt(a1, a2, v1);
    }
    int64_t v2; // 0x421814
    bool v3; // 0x421814
    if (v3) {
        v2 = function_421869((int64_t)&g2);
    }
    int64_t v4 = v2;
    int64_t v5 = *(char *)(v4 - 87) > (char)(a2 / 256) ? 143 : 142; // 0x42183a
    return (v4 - v5) % 256 | v4 & -256;
}

// Address range: 0x42183f - 0x421842
int64_t function_42183f(void) {
    // 0x42183f
    int64_t result; // 0x42183f
    return result;
}

// Address range: 0x421869 - 0x421893
int64_t function_421869(int64_t a1) {
    // 0x421869
    int64_t v1; // 0x421869
    int64_t v2 = v1;
    int32_t v3 = (int32_t)v2 - 0x7fd83e59 + (int32_t)((v2 & 256) != 0); // 0x42186a
    int64_t result = v3; // 0x42186a
    if (v3 >= 0) {
        // 0x421872
        return result;
    }
    unsigned char v4 = (char)v3; // 0x42188a
    char v5 = *(char *)(v1 + 113); // 0x42188c
    return result & 0xffffff00 | (int64_t)((char)(v4 < 28) + v4 - v5);
}

// Address range: 0x4218af - 0x4218b0
int64_t function_4218af(int64_t a1) {
    // 0x4218af
    int64_t result; // 0x4218af
    return result;
}

// Address range: 0x4218b9 - 0x4218ba
int64_t function_4218b9(void) {
    // 0x4218b9
    int64_t result; // 0x4218b9
    return result;
}

// Address range: 0x4218cd - 0x4218d8
int64_t function_4218cd(void) {
    // 0x4218cd
    bool v1; // 0x4218cd
    if (!v1) {
        function_4218b9();
    }
    // 0x4218cf
    __asm_in_2(24);
    return function_1972cc66();
}

// Address range: 0x4218da - 0x4218df
int64_t function_4218da(void) {
    // 0x4218da
    return function_642aa37();
}

// Address range: 0x421939 - 0x421942
int64_t function_421939(int64_t a1, int64_t a2) {
    // 0x421939
    __asm_int(84);
    int64_t result; // 0x421939
    return result;
}

// Address range: 0x421956 - 0x42195c
int64_t function_421956(void) {
    // 0x421956
    int64_t result; // 0x421956
    return result;
}

// Address range: 0x421975 - 0x42197a
int64_t function_421975(void) {
    // 0x421975
    return function_ffffffffe46f905a();
}

// Address range: 0x4219ac - 0x4219af
int64_t function_4219ac(void) {
    // 0x4219ac
    int64_t result; // 0x4219ac
    return result;
}

// Address range: 0x4219bd - 0x4219be
int64_t function_4219bd(void) {
    // 0x4219bd
    int64_t result; // 0x4219bd
    return result;
}

// Address range: 0x4219e1 - 0x4219e4
int64_t function_4219e1(void) {
    // 0x4219e1
    int64_t result; // 0x4219e1
    return result;
}

// Address range: 0x4219fe - 0x421a0a
int64_t function_4219fe(int64_t a1) {
    // 0x4219fe
    int64_t result; // 0x4219fe
    return result;
}

// Address range: 0x421a0c - 0x421a13
int64_t function_421a0c(int64_t a1, int64_t a2) {
    // 0x421a0c
    return function_ffffffffa00fc753();
}

// Address range: 0x421a2f - 0x421a30
int64_t function_421a2f(void) {
    // 0x421a2f
    int64_t result; // 0x421a2f
    return result;
}

// Address range: 0x421a56 - 0x421a66
int64_t function_421a56(int64_t a1) {
    // 0x421a56
    int64_t v1; // 0x421a56
    *(int32_t *)-0x60a409a4f937aeea = (int32_t)v1;
    return v1 & -0xff01 | a1 & 0xff00;
}

// Address range: 0x421a66 - 0x421b03
int64_t function_421a66(int64_t a1, uint64_t a2, int64_t a3) {
    int32_t * v1 = (int32_t *)(a1 + 123 + 8 * a1); // 0x421a66
    bool v2; // 0x421a66
    *v1 = *v1 + (v2 ? 0x622f0a29 : 0x622f0a28);
    int64_t v3; // 0x421a66
    char * v4 = (char *)(v3 - 74); // 0x421a6e
    *v4 = (char)(a2 / 256);
    if (a1 != 0) {
        // 0x421a78
        return __asm_in(64);
    }
    int64_t v5 = 256 * (int64_t)*v4 | a2 & -0xff01; // 0x421a6e
    __asm_fbld(*(float80_t *)v5);
    int64_t v6; // 0x421a66
    *(int32_t *)v6 = *(int32_t *)&v6 & (int32_t)v3;
    int64_t v7 = v6; // 0x421ad1
    v6 = v3 & 0x1f2d5a93 | 0xe0d2a56c;
    *(int32_t *)v3 = (int32_t)v7;
    int64_t v8 = v2 ? -4 : 4; // 0x421ad3
    uint64_t v9 = (v7 & 0xffffffff) * (int64_t)*(int32_t *)v5; // 0x421ad6
    int32_t result = (int32_t)v9 + 0x770f75b4; // 0x421ad8
    *(int32_t *)(v8 + v3) = *(int32_t *)v6;
    v6 += v8;
    if (result < 0) {
        // 0x421ae0
        return result;
    }
    uint64_t v10 = v9 / 0x100000000; // 0x421ad6
    int64_t result2 = __asm_iretd(0, v10); // 0x421af4
    __asm_outsb((int16_t)v10, *(char *)v6);
    *(int32_t *)-0x45e32c76 = *(int32_t *)-0x45e32c76 + 0x3ded7b6f;
    return result2;
}

// Address range: 0x421b04 - 0x421b0c
int64_t function_421b04(int64_t a1) {
    // 0x421b04
    int64_t result; // 0x421b04
    return result;
}

// Address range: 0x421b32 - 0x421b4d
int64_t function_421b32(int64_t a1) {
    // 0x421b32
    int64_t v1; // 0x421b32
    int32_t * v2 = (int32_t *)(v1 - 0x8411ff7); // 0x421b32
    bool v3; // 0x421b32
    *v2 = *v2 - (v3 ? 0x1313d01f : 0x1313d01e);
    *(int32_t *)-0x5f9bbee70b888e1f = (int32_t)v1;
    return function_ffffffffee5db4f5();
}

// Address range: 0x421b8e - 0x421b90
int64_t function_421b8e(void) {
    // 0x421b8e
    int64_t result; // 0x421b8e
    return result;
}

// Address range: 0x421bac - 0x421bb8
int64_t function_421bac(int64_t a1, int64_t a2, int64_t a3) {
    // 0x421bac
    int64_t result; // 0x421bac
    bool v1; // 0x421bac
    __asm_out_5((int16_t)a2 - (int16_t)result + (int16_t)v1, (int32_t)result);
    return result;
}

// Address range: 0x421bbb - 0x421bbc
int64_t function_421bbb(void) {
    // 0x421bbb
    int64_t result; // 0x421bbb
    return result;
}

// Address range: 0x421bc9 - 0x421bca
int64_t function_421bc9(void) {
    // 0x421bc9
    int64_t result; // 0x421bc9
    return result;
}

// Address range: 0x421be8 - 0x421bf6
int64_t function_421be8(int64_t a1) {
    // 0x421be8
    int64_t v1; // 0x421be8
    int64_t v2 = v1;
    *(int32_t *)v2 = -1 - (int32_t)v2;
    bool v3; // 0x421be8
    return (v1 & 0xffffff00 | 30) + 0x14583638 & 0xffffff56 | (int64_t)v3;
}

// Address range: 0x421bf6 - 0x421c0a
int64_t function_421bf6(int64_t a1) {
    // 0x421bf6
    int64_t v1; // 0x421bf6
    unsigned char v2 = (char)v1 & 93; // 0x421bf6
    *(char *)0x50ba38eff139e604 = v2;
    int64_t v3 = v1 & -256 | (int64_t)v2; // 0x421c01
    if (v2 != 0) {
        v3 = function_421bc9();
    }
    int64_t result = v3; // 0x421c04
    if ((a1 & 4) == 0) {
        result = function_421bbb();
    }
    // 0x421c06
    return result;
}

// Address range: 0x421c0a - 0x421c0b
int64_t function_421c0a(void) {
    // 0x421c0a
    int64_t result; // 0x421c0a
    return result;
}

// Address range: 0x421c47 - 0x421c48
int64_t function_421c47(void) {
    // 0x421c47
    int64_t result; // 0x421c47
    return result;
}

// Address range: 0x421c48 - 0x421c5a
int64_t function_421c48(int64_t a1) {
    char * v1 = (char *)(a1 + 78); // 0x421c48
    *v1 = *v1 / 32;
    return function_148fba1b();
}

// Address range: 0x421c62 - 0x421c63
int64_t function_421c62(void) {
    // 0x421c62
    int64_t result; // 0x421c62
    return result;
}

// Address range: 0x421cb4 - 0x421cb7
int64_t function_421cb4(void) {
    // 0x421cb4
    int64_t result; // 0x421cb4
    return result;
}

// Address range: 0x421cbb - 0x421cbe
int64_t function_421cbb(void) {
    // 0x421cbb
    int64_t result; // 0x421cbb
    return result;
}

// Address range: 0x421ccb - 0x421cde
int64_t function_421ccb(int64_t a1, int64_t a2) {
    // 0x421ccb
    int64_t v1; // 0x421ccb
    int64_t v2 = v1;
    int128_t v3; // 0x421ccb
    __asm_vpmuludq(v3, *(int128_t *)(v1 + 0x7ed53742));
    *(int32_t *)v2 = (int32_t)(v2 ^ a2);
    return function_421c62();
}

// Address range: 0x421d3b - 0x421d3e
int64_t function_421d3b(int64_t a1) {
    // 0x421d3b
    int64_t result; // 0x421d3b
    return result;
}

// Address range: 0x421d46 - 0x421d47
int64_t function_421d46(void) {
    // 0x421d46
    int64_t result; // 0x421d46
    return result;
}

// Address range: 0x421d61 - 0x421d86
int64_t function_421d61(int64_t a1, int64_t a2) {
    // 0x421d61
    int64_t v1; // 0x421d61
    int64_t v2 = v1;
    __asm_out(5, (int32_t)v1);
    bool v3; // 0x421d61
    *(int32_t *)v2 = (int32_t)v2 + (int32_t)a1 + (int32_t)v3;
    char * v4 = (char *)(v1 + 0x26c0a20c); // 0x421d7a
    char v5 = *v4; // 0x421d7a
    char v6 = v1; // 0x421d7a
    char v7 = v5 - v6; // 0x421d7a
    *v4 = v7;
    if (((v7 ^ v5) & (v5 ^ v6)) >= 0) {
        function_421d46();
    }
    // 0x421d82
    return a2 & 0xffffffff;
}

// Address range: 0x421dab - 0x421e15
int64_t function_421dab(int64_t a1, uint64_t a2) {
    // 0x421dab
    int64_t v1; // 0x421dab
    uint64_t v2 = v1 & 0xffffffff; // 0x421daf
    uint64_t v3 = 0x100000000 * (a2 % 256 & v1 / 256 | a2 & 0xffffff00) | v2; // 0x421daf
    *(int32_t *)((v3 / v2 & 0xffffffff) + 0x70628936) = (int32_t)v1;
    int64_t v4; // 0x421dab
    unsigned char v5 = llvm_ctpop_i8(-*(char *)&v4); // 0x421dbe
    __asm_in_3((int16_t)(v3 % v2));
    if (v5 % 2 != 0) {
        // 0x421dc2
        return function_1b8d249a();
    }
    int32_t v6 = *(int32_t *)0x21eb062a398aecb8; // 0x421e0a
    int64_t v7; // 0x421dab
    return (int64_t)(v6 & -256) | (int64_t)*(char *)&v7;
}

// Address range: 0x421e26 - 0x421e27
int64_t function_421e26(void) {
    // 0x421e26
    int64_t result; // 0x421e26
    return result;
}

// Address range: 0x421e34 - 0x421e37
int64_t function_421e34(void) {
    // 0x421e34
    int64_t result; // 0x421e34
    return result;
}

// Address range: 0x421e3c - 0x421e3f
int64_t function_421e3c(int64_t a1, int64_t a2) {
    // 0x421e3c
    int64_t v1; // 0x421e3c
    __asm_out_5((int16_t)a2, (int32_t)v1);
    return function_421e74(a1, a2);
}

// Address range: 0x421e46 - 0x421e4a
int64_t function_421e46(void) {
    // 0x421e46
    int64_t result; // 0x421e46
    bool v1; // 0x421e46
    if (!v1 && !v1) {
        result = function_421e26();
    }
    // 0x421e49
    return result;
}

// Address range: 0x421e4b - 0x421e5e
int64_t function_421e4b(int64_t a1, int64_t a2) {
    // 0x421e4b
    int64_t v1; // 0x421e4b
    int64_t v2 = v1;
    char * v3 = (char *)(a2 + 0x380fbf73); // 0x421e50
    *v3 = *v3 + (char)v1;
    bool v4; // 0x421e4b
    return v2 & 0xffffff00 & v1 | (int64_t)*(char *)((v4 ? -4 : 4) + v2);
}

// Address range: 0x421e74 - 0x421e82
int64_t function_421e74(int64_t a1, int64_t a2) {
    // 0x421e74
    int64_t result; // 0x421e74
    char * v1 = (char *)(result + 89 + 2 * result); // 0x421e78
    *v1 = *v1 - 66;
    return result;
}

// Address range: 0x421ea0 - 0x421ea6
int64_t function_421ea0(int64_t a1, int64_t a2) {
    // 0x421ea0
    __asm_outsb((int16_t)a2, (char)a2);
    return function_5e971fe0();
}

// Address range: 0x421eac - 0x421eb5
int64_t function_421eac(int64_t a1) {
    // 0x421eac
    int64_t result; // 0x421eac
    *(char *)(a1 + 0x98fdc3a) = (char)result;
    return result;
}

// Address range: 0x421eb9 - 0x421eba
int64_t function_421eb9(void) {
    // 0x421eb9
    int64_t result; // 0x421eb9
    return result;
}

// Address range: 0x421ed0 - 0x421ed8
int64_t function_421ed0(void) {
    // 0x421ed0
    bool v1; // 0x421ed0
    if (true == !v1) {
        function_421eb9();
    }
    // 0x421ed2
    return function_3204623();
}

// Address range: 0x421f41 - 0x421f42
int64_t function_421f41(void) {
    // 0x421f41
    int64_t result; // 0x421f41
    return result;
}

// Address range: 0x421f4d - 0x421f50
int64_t function_421f4d(int64_t a1) {
    // 0x421f4d
    int64_t result; // 0x421f4d
    return result;
}

// Address range: 0x421f50 - 0x421f51
int64_t function_421f50(void) {
    // 0x421f50
    int64_t result; // 0x421f50
    return result;
}

// Address range: 0x421f5f - 0x421f63
int64_t function_421f5f(int64_t a1) {
    // 0x421f5f
    int64_t result; // 0x421f5f
    return result;
}

// Address range: 0x421f64 - 0x421f65
int64_t function_421f64(void) {
    // 0x421f64
    int64_t result; // 0x421f64
    return result;
}

// Address range: 0x421f81 - 0x421fb3
int64_t function_421f81(int64_t a1, uint64_t a2) {
    // 0x421f81
    int64_t v1; // 0x421f81
    uint32_t v2 = (int32_t)v1; // 0x421f81
    bool v3; // 0x421f81
    uint32_t v4 = v3 ? 0x554876f0 : 0x554876ef; // 0x421f81
    int64_t v5 = v2 - v4; // 0x421f8a
    if (a1 == 0) {
        v5 = function_421f41();
    }
    char v6 = *(char *)(v5 - 114); // 0x421f8c
    unsigned char v7 = (char)(v3 | v4 > v2) + (char)(a2 / 256) - v6; // 0x421f8c
    int64_t v8 = a1 - 1; // 0x421f8f
    if (v8 != 0 == v7 == 0) {
        function_421f64();
    }
    // 0x421f91
    unknown_ffffffffb23680c7();
    return __asm_int1(v8, 256 * (int64_t)v7 | a2 & -0xff01) + 0xffc7a1ea & 0xffffffff;
}

// Address range: 0x421fb3 - 0x421fbe
int64_t function_421fb3(int64_t a1, int64_t a2) {
    // 0x421fb3
    int64_t v1; // 0x421fb3
    *(char *)(a2 + 0x4ff798c4) = (char)((uint64_t)v1 / 256);
    return function_13dc0620();
}

// Address range: 0x421fcb - 0x421fcc
int64_t function_421fcb(int64_t a1) {
    // 0x421fcb
    int64_t result; // 0x421fcb
    return result;
}

// Address range: 0x421ffa - 0x421ffb
int64_t function_421ffa(void) {
    // 0x421ffa
    int64_t result; // 0x421ffa
    return result;
}

// Address range: 0x422012 - 0x42201a
int64_t function_422012(int64_t a1, int64_t a2) {
    // 0x422012
    int64_t v1; // 0x422012
    return &v1;
}

// Address range: 0x422039 - 0x42203c
int64_t function_422039(int64_t a1) {
    // 0x422039
    int64_t result; // 0x422039
    return result;
}

// Address range: 0x42203d - 0x422040
int64_t function_42203d(void) {
    // 0x42203d
    int64_t result; // 0x42203d
    return result;
}

// Address range: 0x422050 - 0x422052
int64_t function_422050(void) {
    // 0x422050
    int64_t v1; // 0x422050
    return function_422075(v1, v1, (int64_t)&g2);
}

// Address range: 0x42205f - 0x422060
int64_t function_42205f(void) {
    // 0x42205f
    int64_t result; // 0x42205f
    return result;
}

// Address range: 0x422070 - 0x422075
int64_t function_422070(void) {
    // 0x422070
    return __asm_in(26);
}

// Address range: 0x422075 - 0x4220a9
int64_t function_422075(int64_t a1, int64_t a2, int64_t a3) {
    // 0x422075
    int64_t v1; // 0x422075
    int64_t v2 = v1;
    int64_t v3 = a2;
    int64_t v4 = a1 - 1; // 0x422075
    bool v5; // 0x422075
    if (v4 != 0 != v5) {
        // 0x422077
        return v1 & 0xffffffff;
    }
    int32_t * v6 = (int32_t *)(v1 - 0x35e6d3e6); // 0x42208a
    *v6 = *v6 ^ (int32_t)v4;
    int32_t v7 = *(int32_t *)((((v2 + 210) % 256 | v2 & 0xffffff00) ^ 0x9641a134) - 0x1fe805ac); // 0x422099
    *(char *)((int64_t)(-113 * v7) - 35) = (char)(v3 / 256);
    *(int32_t *)v3 = 0x100000 * *(int32_t *)&v3;
    return __asm_int1(v4, v3);
}

// Address range: 0x4220ad - 0x42224e
int64_t function_4220ad(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x4220ad
    int64_t v1; // 0x4220ad
    int64_t v2 = v1 & 0xffffffff; // 0x4220ad
    int32_t v3 = *(int32_t *)(v1 + 0xdc5379f); // 0x4220af
    int64_t v4 = v2 - 1; // 0x4220b5
    if (v4 == 0 || v3 == (int32_t)v1) {
        int64_t result; // 0x4220ad
        if (v4 != 1 && v3 != (int32_t)v1) {
            result = function_42205f();
        }
        // 0x4220b9
        __asm_out(-46, (int32_t)result);
        *(char *)0xb53b2b8c = -1 - *(char *)0xb53b2b8c;
        return result;
    }
    if ((int32_t)v1 != 2) {
        // 0x422148
        return v1 & 0xffffff6b;
    }
    // 0x422143
    return __asm_in_3((int16_t)a2);
    char * v5 = (char *)(v2 + 0x7ef98128); // 0x4221c0
    *v5 = *v5 ^ 50;
    int64_t v6 = v2 - 3; // 0x4221c7
    if (v6 == 0) {
        // 0x4221c9
        return v1 & 0xffffff00 | (int64_t)*(char *)-0x35fbd7e3315168cc;
    }
    // 0x422241
    return 0xfffffff1 * v6 & 0xffffffff;
}

// Address range: 0x422258 - 0x42225d
int64_t function_422258(void) {
    // 0x422258
    return function_32dffe3d();
}

// Address range: 0x42227c - 0x422281
int64_t function_42227c(void) {
    // 0x42227c
    return function_67a23335();
}

// Address range: 0x422293 - 0x422298
int64_t function_422293(void) {
    // 0x422293
    return function_dd4adf8();
}

// Address range: 0x422298 - 0x422299
int64_t function_422298(int64_t a1) {
    // 0x422298
    int64_t result; // 0x422298
    return result;
}

// Address range: 0x4222af - 0x4222c3
int64_t function_4222af(void) {
    // 0x4222af
    return function_ffffffffce00bf50();
}

// Address range: 0x4222c3 - 0x422379
int64_t function_4222c3(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x4222c5
    int64_t result; // 0x4222c3
    return result;
    while (true) {
        // continue -> 0x42232a
    }
}

// Address range: 0x422396 - 0x422397
int64_t function_422396(void) {
    // 0x422396
    int64_t result; // 0x422396
    return result;
}

// Address range: 0x4223f4 - 0x4223f9
int64_t function_4223f4(void) {
    // 0x4223f4
    return function_fffffffff086169e();
}

// Address range: 0x4223f9 - 0x4223fd
int64_t function_4223f9(void) {
    // 0x4223f9
    int64_t v1; // 0x4223f9
    return v1 & 0xffffffff;
}

// Address range: 0x4223ff - 0x422405
int64_t function_4223ff(int64_t a1) {
    // 0x4223ff
    int64_t result; // 0x4223ff
    return result;
}

// Address range: 0x422405 - 0x42240f
int64_t function_422405(void) {
    // 0x422405
    int64_t v1; // 0x422405
    int32_t v2 = *(int32_t *)(v1 + 114) | (int32_t)v1; // 0x422405
    if (v2 >= 0 == (v2 != 0)) {
        function_42244b(v1, v1);
    }
    // 0x42240b
    return function_422396();
}

// Address range: 0x422424 - 0x422434
int64_t function_422424(int64_t a1) {
    // 0x422424
    int64_t v1; // 0x422424
    *(char *)v1 = (char)v1;
    int64_t result; // 0x422424
    bool v2; // 0x422424
    if (a1 != 1 == v2) {
        result = function_422495();
    }
    // 0x422427
    return result;
}

// Address range: 0x422448 - 0x422449
int64_t function_422448(int64_t a1) {
    // 0x422448
    int64_t result; // 0x422448
    return result;
}

// Address range: 0x42244b - 0x42245c
int64_t function_42244b(uint64_t a1, uint64_t a2) {
    // 0x42244b
    int64_t v1; // 0x42244b
    int64_t v2 = v1;
    *(char *)v2 = (char)v2 + (char)(a1 / 256);
    int64_t v3 = __asm_sti(a1, a2, v1); // 0x42244d
    char * v4 = (char *)a1; // 0x422453
    *v4 = (char)a2;
    *(int64_t *)(a1 - 86) = *(int64_t *)0x1dc4b74f;
    *v4 = (char)(a2 / 256);
    return v3 | 113;
}

// Address range: 0x42245e - 0x42246d
int64_t function_42245e(int64_t a1) {
    unsigned char v1 = *(char *)0x27b9a5a2; // 0x422460
    int64_t v2; // 0x42245e
    unsigned char v3 = v1 + (char)((uint64_t)v2 / 256); // 0x422460
    bool v4; // 0x42245e
    unsigned char v5 = v3 + (char)v4; // 0x422460
    *(char *)0x27b9a5a2 = v5;
    return v2 - (v4 ? v5 <= v1 : v3 < v1 ? 0xf668f74 : 0xf668f73) & 0xffffffff;
}

// Address range: 0x42248c - 0x42248d
int64_t function_42248c(void) {
    // 0x42248c
    int64_t result; // 0x42248c
    return result;
}

// Address range: 0x422495 - 0x42249b
int64_t function_422495(void) {
    // 0x422495
    return function_33317529();
}

// Address range: 0x4224a6 - 0x4224ab
int64_t function_4224a6(int64_t a1) {
    // 0x4224a6
    int64_t result; // 0x4224a6
    bool v1; // 0x4224a6
    if (v1) {
        result = function_42248c();
    }
    // 0x4224a8
    return result;
}

// Address range: 0x4224be - 0x422534
int64_t function_4224be(int64_t a1, int64_t a2) {
    int64_t v1 = a1;
    int64_t v2; // 0x4224be
    int32_t * v3 = (int32_t *)(v2 + 0x71cd29ec); // 0x4224be
    int32_t v4 = v2; // 0x4224be
    *v3 = *v3 & v4;
    int64_t v5; // 0x4224be
    int64_t result = &v5; // 0x4224c4
    int128_t v6; // 0x4224be
    __asm_movlps(v6, *(int64_t *)(v2 + 110));
    int32_t * v7; // 0x42252e
    if ((*(char *)(a2 + 86) || (char)v2) == 0) {
        // 0x42252e
        v7 = (int32_t *)(v2 - 0x4d652620);
        *v7 = *v7 | v4;
        return result;
    }
    unsigned char v8 = (char)v1 % 32; // 0x4224cf
    int64_t v9; // 0x4224be
    if (v8 == 0) {
        // 0x4224da
        return result & -256 | (int64_t)*(char *)&v9;
    }
    char v10 = *(char *)&v9; // 0x4224cf
    *(char *)v9 = v10 >> v8;
    if ((1 << v8 - 1 & v10) == 0) {
        // 0x4224da
        return result & -256 | (int64_t)*(char *)&v9;
    }
    // 0x422518
    int64_t v11; // 0x4224be
    uint32_t v12 = *(int32_t *)&v11; // 0x42251a
    uint32_t v13 = *(int32_t *)&v1; // 0x42251d
    uint32_t v14 = (int32_t)((v2 & 0xffffffff) - 8); // 0x42251d
    *(int32_t *)v1 = v13 - v14;
    uint32_t v15 = (int32_t)__asm_sti(v1, (int64_t)((int32_t)result >> 31 & -0xff01 | 0xac00), (int64_t)v12); // 0x422520
    int32_t v16 = (v13 < v14 ? 0x4172bff8 : 0x4172bff7) + v15; // 0x422520
    int32_t v17 = v13 < v14 ? 8 : 7; // 0x422520
    unsigned char v18 = llvm_ctpop_i8((char)v16); // 0x422520
    bool v19 = v13 < v14 ? v16 <= v15 : v15 > 0xbe8d4008; // 0x422520
    char * v20 = (char *)(v1 + 0x254acfd8); // 0x422528
    *v20 = *v20 + (char)v1;
    int64_t result2 = 256 * (64 * (int64_t)(v16 == 0) | (int64_t)v19 | 128 * (int64_t)(v16 < 0) | 16 * (int64_t)(v15 % 16 + v17 > 15) | 4 * (int64_t)(v18 % 2 == 0)) | (int64_t)(v16 & -0xff01 | 512); // 0x422528
    // 0x42252e
    v7 = (int32_t *)(v2 - 0x4d652620);
    *v7 = *v7 | v4;
    return result2;
}

// Address range: 0x422535 - 0x422541
int64_t function_422535(int64_t a1, int64_t a2) {
    // 0x422535
    int64_t v1; // 0x422535
    return v1 & 0x723a172a | 0x8dc5e8d5;
}

// Address range: 0x422558 - 0x42255c
int64_t function_422558(void) {
    // 0x422558
    int64_t result; // 0x422558
    return result;
}

// Address range: 0x422560 - 0x422561
int64_t function_422560(void) {
    // 0x422560
    int64_t result; // 0x422560
    return result;
}

// Address range: 0x42257f - 0x422591
int64_t function_42257f(int64_t a1, int64_t a2) {
    // 0x42257f
    return __asm_int1(a1, a2 & -0xff01 | 0x1e00);
}

// Address range: 0x422591 - 0x422594
int64_t function_422591(int64_t a1) {
    // 0x422591
    int64_t result; // 0x422591
    return result;
}

// Address range: 0x42259c - 0x4225a5
int64_t function_42259c(void) {
    // 0x42259c
    int64_t result; // 0x42259c
    return result;
}

// Address range: 0x4225aa - 0x4225c4
int64_t function_4225aa(int64_t a1, int64_t a2) {
    // 0x4225aa
    int64_t v1; // 0x4225aa
    bool v2; // 0x4225aa
    __asm_outsd((int16_t)a2, *(int32_t *)((v2 ? -4 : 4) + v1));
    return v1 & 0xffffffff;
}

// Address range: 0x4225c6 - 0x422605
int64_t function_4225c6(int64_t a1, int64_t a2) {
    // 0x4225c6
    int64_t v1; // 0x4225c6
    // 0x4225c8
    int64_t v2; // 0x4225c6
    int32_t * v3 = (int32_t *)(v2 + 0x71e92593); // 0x4225e9
    int32_t v4 = *v3 & (int32_t)v2; // 0x4225e9
    *v3 = v4;
    int64_t v5; // 0x4225c6
    *(char *)v2 = *(char *)&v5;
    if (v4 == 0) {
        // 0x422650
        return (v1 & 0xffffff00 | (int64_t)*(char *)0x6a392e644cef27b5) ^ 0x9ae46b9f;
    }
    // 0x4225f2
    bool v6; // 0x4225c6
    int32_t * v7 = (int32_t *)(v2 - 0xb22c3c3 + (v6 ? -1 : 1)); // 0x4225f3
    *v7 = *v7 + (int32_t)v2;
    int64_t v8; // 0x4225c6
    return &v8;
}

// Address range: 0x4226e9 - 0x4226f2
int64_t function_4226e9(int64_t a1, int64_t a2) {
    unsigned char v1 = (char)a1 % 32; // 0x4226e9
    int64_t result; // 0x4226e9
    if (v1 != 0) {
        char * v2 = (char *)(result + 0x39d0336a); // 0x4226e9
        *v2 = *v2 << v1;
    }
    return result;
}

// Address range: 0x4226f2 - 0x422702
int64_t function_4226f2(int64_t a1, int64_t a2) {
    // 0x4226f2
    int64_t v1; // 0x4226f2
    int64_t v2 = v1;
    *(int32_t *)v2 = (int32_t)(v2 ^ a2);
    return function_ffffffffe4966e46();
}

// Address range: 0x422703 - 0x422707
int64_t function_422703(int64_t a1) {
    // 0x422703
    int64_t result; // 0x422703
    return result;
}

// Address range: 0x422709 - 0x422713
int64_t function_422709(int64_t a1, int64_t a2) {
    // 0x422709
    int64_t result; // 0x422709
    int64_t v1 = result;
    int32_t * v2 = (int32_t *)(v1 - 0x3c3d7266 + 8 * v1); // 0x422709
    *v2 = *v2 - (int32_t)a1;
    return result;
}

// Address range: 0x42273a - 0x422741
int64_t function_42273a(int64_t result) {
    // 0x42273a
    return result;
}

// Address range: 0x42275a - 0x42275b
int64_t function_42275a(void) {
    // 0x42275a
    int64_t result; // 0x42275a
    return result;
}

// Address range: 0x42278f - 0x422795
int64_t function_42278f(int64_t a1) {
    // 0x42278f
    int64_t v1; // 0x42278f
    return v1 & 0x541c0793;
}

// Address range: 0x4227aa - 0x4227ec
int64_t function_4227aa(int64_t a1, int64_t a2) {
    int16_t v1 = a2; // 0x4227aa
    int64_t v2; // 0x4227aa
    *(char *)v2 = __asm_insb(v1);
    int64_t v3 = a1 & -0xff01 | 0x6600; // 0x4227ae
    __asm_out_1(117, *(char *)-0xa6c9d63496d637d);
    __asm_int3(v3, a2);
    if ((__asm_sti(v3, a2, v2) & 0x28fc20d3) == 0) {
        function_42275a();
    }
    // 0x4227da
    int64_t v4; // 0x4227aa
    __asm_outsd(v1, *(int32_t *)&v4);
    return function_29bd6b5d();
}

// Address range: 0x4227ec - 0x42280f
int64_t function_4227ec(int64_t a1, int64_t a2) {
    // 0x4227ec
    int64_t v1; // 0x4227ec
    bool v2; // 0x4227ec
    int64_t v3 = (v2 ? -4 : 4) + v1; // 0x4227f3
    *(char *)(v1 - 32) = (char)a2;
    int64_t result = v1 ^ 252; // 0x4227f7
    int32_t * v4 = (int32_t *)(v3 - 123); // 0x422801
    *v4 = *v4 | (int32_t)v1;
    int32_t * v5 = (int32_t *)(result - 9); // 0x422805
    *v5 = *v5 - (int32_t)v3;
    return result;
}

// Address range: 0x42284a - 0x422863
int64_t function_42284a(int64_t a1, int64_t a2, int64_t a3) {
    int32_t * v1 = (int32_t *)(__asm_iretd(a1, a2) - 0x56bdbf18); // 0x42284b
    *v1 = *v1 | (int32_t)a1;
    int64_t v2; // 0x42284a
    uint32_t v3 = *(int32_t *)&v2; // 0x422851
    *(int32_t *)a2 = (int32_t)a2;
    int64_t v4 = v3; // 0x422851
    int16_t v5 = v3; // 0x422853
    __asm_in_6(v5);
    __asm_wait(a1, v4);
    int32_t * v6 = (int32_t *)(a1 - 72); // 0x422856
    int64_t v7; // 0x42284a
    *v6 = *v6 + (int32_t)v7;
    int64_t result = __asm_iretd(a1, v4); // 0x42285b
    *(int32_t *)v7 = __asm_insd(v5);
    *(int64_t *)v7 = result;
    return result;
}

// Address range: 0x422876 - 0x422877
int64_t function_422876(void) {
    // 0x422876
    int64_t result; // 0x422876
    return result;
}

// Address range: 0x422884 - 0x422886
int64_t function_422884(void) {
    // 0x422884
    return function_422876();
}

// Address range: 0x42288f - 0x422895
int64_t function_42288f(int64_t a1) {
    // 0x42288f
    int64_t v1; // 0x42288f
    bool v2; // 0x42288f
    return v1 & -0xff01 | 256 * (64 * (int64_t)v2 | 128 * (int64_t)v2 | 16 * (int64_t)v2 | (int64_t)v2 | 4 * (int64_t)v2) | 512;
}

// Address range: 0x422896 - 0x42289b
int64_t function_422896(void) {
    // 0x422896
    return function_ffffffffe6420c57();
}

// Address range: 0x4228ae - 0x4228d8
int64_t function_4228ae(int64_t a1, int64_t a2) {
    // 0x4228ae
    int64_t v1; // 0x4228ae
    unsigned char v2 = *(char *)(v1 + 115); // 0x4228b4
    uint64_t v3 = v1 / 256; // 0x4228b4
    *(int32_t *)a2 = (int32_t)v1 + (int32_t)a2 + (int32_t)(v2 < (char)v3);
    char v4 = v3 & v1; // 0x4228bc
    int64_t result = v1 & 0xffff00ff | 0xd400; // 0x4228be
    if (llvm_ctpop_i8(v4) % 2 == 0 || v4 >= 0) {
        // 0x4228c2
        return result;
    }
    __asm_out_5((int16_t)a2, (int32_t)result);
    // 0x4228ce
    while (v4 < 0) {
        // 0x4228ce
        __asm_out_5((int16_t)a2, (int32_t)result);
    }
    // 0x4228c2
    return result;
}

// Address range: 0x4228f8 - 0x4228fd
int64_t function_4228f8(void) {
    // 0x4228f8
    return function_2c9a4c73();
}

// Address range: 0x422913 - 0x422915
int64_t function_422913(void) {
    // 0x422913
    return function_422988();
}

// Address range: 0x42291f - 0x422921
int64_t function_42291f(void) {
    // 0x42291f
    int64_t result; // 0x42291f
    return result;
}

// Address range: 0x422932 - 0x42293d
int64_t function_422932(int64_t a1, int64_t a2) {
    // 0x422932
    int64_t v1; // 0x422932
    int64_t v2 = v1;
    int32_t * v3 = (int32_t *)(v1 - 11); // 0x422934
    bool v4; // 0x422932
    *v3 = *v3 + (int32_t)a2 + (int32_t)v4;
    uint32_t v5 = *(int32_t *)(v1 - 107); // 0x422937
    return (v2 - a1 + (int64_t)(v5 > -1 - (int32_t)v1)) % 256 | v2 & -256;
}

// Address range: 0x42293e - 0x422943
int64_t function_42293e(int64_t a1) {
    // 0x42293e
    int64_t result; // 0x42293e
    return result;
}

// Address range: 0x422988 - 0x42298c
int64_t function_422988(void) {
    // 0x422988
    int64_t v1; // 0x422988
    return function_422932(v1, v1);
}

// Address range: 0x422991 - 0x422996
int64_t function_422991(void) {
    // 0x422991
    return function_ffffffff9bc8a1a0();
}

// Address range: 0x4229ae - 0x4229b0
int64_t function_4229ae(void) {
    // 0x4229ae
    int64_t v1; // 0x4229ae
    __asm_outsb((int16_t)v1, (char)v1);
    return &g2;
}

// Address range: 0x4229be - 0x4229cb
int64_t function_4229be(int64_t a1) {
    // 0x4229be
    return function_4229f8();
}

// Address range: 0x4229ce - 0x4229d3
int64_t function_4229ce(void) {
    // 0x4229ce
    return function_3749a8d9();
}

// Address range: 0x4229de - 0x4229e1
int64_t function_4229de(int64_t a1) {
    // 0x4229de
    int64_t result; // 0x4229de
    return result;
}

// Address range: 0x4229ea - 0x4229eb
int64_t function_4229ea(int64_t a1) {
    // 0x4229ea
    int64_t result; // 0x4229ea
    return result;
}

// Address range: 0x4229ee - 0x4229f8
int64_t function_4229ee(int64_t a1, int64_t a2) {
    // 0x4229ee
    int64_t result; // 0x4229ee
    *(char *)0x4656cf8668845357 = (char)result;
    __asm_outsb((int16_t)a2, (char)a2);
    return result;
}

// Address range: 0x4229f8 - 0x4229f9
int64_t function_4229f8(void) {
    // 0x4229f8
    int64_t result; // 0x4229f8
    return result;
}

// Address range: 0x422a76 - 0x422a77
int64_t function_422a76(void) {
    // 0x422a76
    int64_t result; // 0x422a76
    return result;
}

// Address range: 0x422a7f - 0x422a80
int64_t function_422a7f(void) {
    // 0x422a7f
    int64_t result; // 0x422a7f
    return result;
}

// Address range: 0x422a97 - 0x422a98
int64_t function_422a97(void) {
    // 0x422a97
    int64_t result; // 0x422a97
    return result;
}

// Address range: 0x422aa8 - 0x422b4e
int64_t function_422aa8(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    int64_t v1 = a2; // bp-16, 0x422ab2
    float80_t v2; // 0x422aa8
    *(float64_t *)a1 = (float64_t)v2;
    int64_t v3; // 0x422aa8
    __asm_out_5((int16_t)a2, (int32_t)v3);
    int32_t * v4 = (int32_t *)(a1 + 105); // 0x422ab9
    uint32_t v5 = *v4; // 0x422ab9
    uint32_t v6 = v5 + (int32_t)a2; // 0x422ab9
    bool v7; // 0x422aa8
    uint32_t v8 = v6 + (int32_t)v7; // 0x422ab9
    *v4 = v8;
    v1 = a1;
    *(int32_t *)a2 = *((v7 ? (int32_t *)0xf33a199 : (int32_t *)0xf33a1a1));
    int64_t v9 = (v7 ? -4 : 4) + a2; // 0x422abd
    int64_t result = v7 ? v8 <= v5 : v6 < v5 ? 0x6f58d2bb : 0x6f58d2ba; // 0x422ac3
    unsigned char v10 = *((v7 ? (char *)0xf33a195 : (char *)0xf33a1a5)); // 0x422ac9
    unsigned char v11 = *(char *)v9; // 0x422ac9
    char v12 = v10 - v11; // 0x422ac9
    int64_t v13 = v9 + (v7 ? -1 : 1); // 0x422ac9
    if (((v12 ^ v10) & (v11 ^ v10)) >= 0) {
        // 0x422b43
        *(char *)(result + 11) = (char)a1;
        *(char *)v13 = (char)result;
        return result;
    }
    int64_t v14 = &v1; // 0x422ad0
    if (v12 != 0) {
        v14 = function_422a7f();
    }
    unsigned char v15 = llvm_ctpop_i8(v12); // 0x422ac9
    *(int64_t *)(result - 8) = v13;
    int64_t result2 = v12 == 0 ? 0xbddd7b31 : 256 * (64 * (int64_t)(v12 == 0) | (int64_t)(v10 < v11) | 128 * (int64_t)(v12 < 0) | 16 * (int64_t)(v10 % 16 - v11 % 16 > 15) | 4 * (int64_t)(v15 % 2 == 0)) | v14 & -0xff01 | 512;
    return result2;
}

// Address range: 0x422b52 - 0x422b53
int64_t function_422b52(void) {
    // 0x422b52
    int64_t result; // 0x422b52
    return result;
}

// Address range: 0x422ba1 - 0x422ba9
int64_t function_422ba1(int64_t a1) {
    // 0x422ba1
    int64_t result; // 0x422ba1
    int32_t * v1 = (int32_t *)(result - 0x4062c1db + 2 * result); // 0x422ba1
    bool v2; // 0x422ba1
    *v1 = (int32_t)v2 - (int32_t)result + *v1;
    return result;
}

// Address range: 0x422bc0 - 0x422bc2
int64_t function_422bc0(void) {
    // 0x422bc0
    return function_422b52();
}

// Address range: 0x422bc7 - 0x422be5
int64_t function_422bc7(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x422bc7
    int64_t v1; // 0x422bc7
    int64_t v2 = v1;
    int64_t v3 = a4;
    __asm_int(55);
    int32_t * v4 = (int32_t *)(a2 - 36); // 0x422bce
    *v4 = (int32_t)v1;
    int64_t v5; // 0x422bc7
    uint32_t v6 = *(int32_t *)&v5; // 0x422bdb
    int32_t * v7 = (int32_t *)a3; // 0x422bde
    int32_t v8 = v6 > (int32_t)(int64_t)&v3 ? 0x6f3fbc22 : 0x6f3fbc21; // 0x422bde
    *v7 = *v7 - v8;
    return (v2 & 144) - (*v4 > -1 - (int32_t)v1 ? 211 : 210) & 191 | v2 & 0xdae27f00;
}

// Address range: 0x422bfd - 0x422c00
int64_t function_422bfd(int64_t a1) {
    // 0x422bfd
    int64_t result; // 0x422bfd
    return result;
}

// Address range: 0x422c53 - 0x422c5a
int64_t function_422c53(void) {
    // 0x422c53
    return function_2ac73058();
}

// Address range: 0x422c5c - 0x422c5d
int64_t function_422c5c(void) {
    // 0x422c5c
    int64_t result; // 0x422c5c
    return result;
}

// Address range: 0x422c69 - 0x422c73
int64_t function_422c69(void) {
    // 0x422c69
    return function_ffffffffb6e4480e();
}

// Address range: 0x422ca4 - 0x422caa
int64_t function_422ca4(void) {
    // 0x422ca4
    int64_t v1; // 0x422ca4
    return __asm_sti(v1, v1, v1);
}

// Address range: 0x422caa - 0x422caf
int64_t function_422caa(void) {
    // 0x422caa
    return function_4388ae39();
}

// Address range: 0x422cef - 0x422cf4
int64_t function_422cef(int64_t a1) {
    // 0x422cef
    int64_t result; // 0x422cef
    return result;
}

// Address range: 0x422d86 - 0x422d87
int64_t function_422d86(int64_t a1) {
    // 0x422d86
    int64_t result; // 0x422d86
    return result;
}

// Address range: 0x422e08 - 0x422e1d
int64_t function_422e08(int64_t a1, int64_t a2, int64_t a3) {
    // 0x422e08
    __asm_in_6((int16_t)a2);
    int64_t v1; // 0x422e08
    __asm_sti(a1, a2, v1);
    return function_6f53cb30();
}

// Address range: 0x422e1e - 0x422e25
int64_t function_422e1e(void) {
    // 0x422e1e
    int64_t result; // 0x422e1e
    return result;
}

// Address range: 0x422e65 - 0x422e6b
int64_t function_422e65(void) {
    // 0x422e65
    __asm_in(27);
    int64_t v1; // 0x422e65
    return v1 & 0xffffffff;
}

// Address range: 0x422e6b - 0x422e8d
int64_t function_422e6b(int64_t a1, int64_t a2) {
    // 0x422e6b
    int64_t v1; // 0x422e6b
    uint64_t v2 = v1;
    uint32_t v3 = *(int32_t *)0x4cab8614; // 0x422e6b
    bool v4; // 0x422e6b
    *(int32_t *)0x4cab8614 = v3 / 2 | 0x80000000 * (int32_t)v4;
    char * v5 = (char *)(v1 - 0x61d60b24); // 0x422e71
    *v5 = *v5 - (char)(v1 / 256) + (char)(v3 % 2 != 0);
    int32_t * v6 = (int32_t *)(a2 + 98); // 0x422e82
    *v6 = 2 * *v6;
    return v2 & -256 | (int64_t)*(char *)(v2 % 256 + v1);
}

// Address range: 0x422e92 - 0x422e9e
int64_t function_422e92(int64_t a1) {
    // 0x422e92
    int64_t result; // 0x422e92
    *(int32_t *)-0x4013dcffef6c185e = (int32_t)result;
    return result;
}

// Address range: 0x422ea7 - 0x422eaa
int64_t function_422ea7(int64_t a1) {
    // 0x422ea7
    int64_t result; // 0x422ea7
    return result;
}

// Address range: 0x422eb7 - 0x422f39
int64_t function_422eb7(int64_t a1, int64_t a2) {
    int64_t v1 = -0x747606c9; // bp-8, 0x422eb7
    int64_t v2; // 0x422eb7
    int32_t * v3 = (int32_t *)(4 * a2 - 0x23ba90af + v2); // 0x422ebc
    bool v4; // 0x422eb7
    *v3 = (int32_t)v4 - (int32_t)v2 + *v3;
    int64_t v5; // 0x422eb7
    __asm_outsd((int16_t)a2, *(int32_t *)&v5);
    int64_t v6 = v2 & 0xfa95f00b | 0x56a0ff4; // 0x422ecb
    uint64_t v7 = a2 + 0x3904111; // 0x422ecc
    int32_t * v8 = (int32_t *)(v6 + 0x23d22340); // 0x422ed1
    uint32_t v9 = *v8; // 0x422ed1
    int32_t v10 = (int32_t)a2 < 0xfc6fbeef; // 0x422ed1
    int64_t v11; // 0x422eb7
    uint32_t v12 = (int32_t)v11 + v10; // 0x422ed1
    int32_t v13 = v9 - v12; // 0x422ed1
    *v8 = v13;
    if ((int32_t)a2 < 0xfc6fbeef ? v12 != -1 | v9 < v13 - v10 : v9 < v12) {
        int64_t result = v7 & 0x95805843 | 0x6a7fa7bc; // 0x422edb
        if (a1 == 0) {
            // 0x422f09
            return result & 0xffffff00 | 116;
        }
        // 0x422ef3
        return result;
    }
    uint32_t v14 = *(int32_t *)&v11 + (int32_t)(int64_t)&v1; // 0x422ec3
    int64_t v15 = v6 & 0xffffff00; // 0x422ed7
    unsigned char v16 = (char)(v7 / 512) & 30 | 128 * (char)(v7 / 256) | 97; // 0x422f22
    int32_t * v17 = (int32_t *)(v5 + 120); // 0x422f24
    *v17 = *v17 + v14;
    *(int64_t *)((int64_t)v14 - 8) = v15 | (int64_t)v16;
    int64_t v18; // 0x422eb7
    char v19 = *(char *)&v5 < *(char *)&v18 ? -81 : -82; // 0x422f2e
    int64_t result2 = v15 | (int64_t)(v16 - v19); // 0x422f2e
    __asm_out(81, (int32_t)result2);
    return result2;
}

// Address range: 0x422f3d - 0x422f3f
int64_t function_422f3d(void) {
    // 0x422f3d
    int64_t result; // 0x422f3d
    return result;
}

// Address range: 0x422fa3 - 0x422fa6
int64_t function_422fa3(int64_t a1, int64_t a2) {
    // 0x422fa3
    int64_t result; // 0x422fa3
    return result;
}

// Address range: 0x422fc5 - 0x422fd1
int64_t function_422fc5(uint64_t a1) {
    // 0x422fc5
    int64_t v1; // 0x422fc5
    int64_t v2 = __asm_wait(a1, v1); // 0x422fc5
    int32_t * v3 = (int32_t *)(v1 + 50); // 0x422fc6
    *v3 = *v3 - (int32_t)v2;
    *(char *)-0x6b540f82 = *(char *)-0x6b540f82 + (char)(a1 / 256);
    return a1 & 0xffffffff;
}

// Address range: 0x422ff9 - 0x422ffc
int64_t function_422ff9(void) {
    // 0x422ff9
    int64_t result; // 0x422ff9
    return result;
}

// Address range: 0x423026 - 0x423027
int64_t function_423026(void) {
    // 0x423026
    int64_t result; // 0x423026
    return result;
}

// Address range: 0x42303a - 0x42303c
int64_t function_42303a(void) {
    // 0x42303a
    return function_4230a5();
}

// Address range: 0x423047 - 0x423048
int64_t function_423047(void) {
    // 0x423047
    int64_t result; // 0x423047
    return result;
}

// Address range: 0x42305c - 0x42305d
int64_t function_42305c(void) {
    // 0x42305c
    int64_t result; // 0x42305c
    return result;
}

// Address range: 0x423060 - 0x4230a5
int64_t function_423060(int64_t a1, int64_t a2, int64_t a3) {
    // 0x423060
    int64_t v1; // 0x423060
    int32_t v2 = *(int32_t *)(v1 - 0x773dc824); // 0x423060
    int16_t v3 = a2; // 0x42306b
    int64_t v4 = v1 & -256 | (int64_t)__asm_in_6(v3); // 0x42306b
    __asm_in_2(52);
    int32_t * v5 = (int32_t *)(v1 + 93); // 0x423070
    int32_t v6 = *v5; // 0x423070
    int32_t v7 = *(int32_t *)v4 < (int32_t)v4; // 0x423070
    int32_t v8 = v6 + 0x541c6b55 + v7; // 0x423070
    *v5 = v8;
    if ((v8 + v7 & (v6 ^ -0x80000000)) < 0) {
        function_4230db();
    }
    int32_t result = __asm_in_3(v3); // 0x42307a
    if (v8 < 0 == (v8 + v7 & (v6 ^ -0x80000000)) < 0) {
        // 0x4230a1
        bool v9; // 0x423060
        return __asm_iretd((int64_t)((int32_t)v9 + (int32_t)a1 - v2), a2);
    }
    // 0x42307d
    return result;
}

// Address range: 0x4230a5 - 0x4230a7
int64_t function_4230a5(void) {
    // 0x4230a5
    int64_t result; // 0x4230a5
    return result;
}

// Address range: 0x4230a8 - 0x4230cd
int64_t function_4230a8(int64_t a1, int64_t a2) {
    // 0x4230a8
    int64_t v1; // 0x4230a8
    char * v2 = (char *)(v1 + 42); // 0x4230ac
    bool v3; // 0x4230a8
    *v2 = (char)v3 + (char)(v1 / 256) + *v2;
    if (a1 != 1) {
        function_42305c();
    }
    // 0x4230b5
    int64_t v4; // 0x4230a8
    int64_t result = (int64_t)*(int32_t *)&v4; // 0x4230c3
    *(char *)v1 = __asm_insb((int16_t)a2);
    float80_t v5; // 0x4230a8
    *(int16_t *)(v4 + (v3 ? -0xbe16cde : -0xbe16cd6) + 2 * result) = (int16_t)v5;
    return result;
}

// Address range: 0x4230db - 0x4230dc
int64_t function_4230db(void) {
    // 0x4230db
    int64_t result; // 0x4230db
    return result;
}

// Address range: 0x4230e8 - 0x4230e9
int64_t function_4230e8(int64_t a1) {
    // 0x4230e8
    int64_t result; // 0x4230e8
    return result;
}

// Address range: 0x423114 - 0x4231f3
int64_t function_423114(int64_t a1, int64_t a2, int64_t a3) {
    // 0x423114
    int64_t v1; // 0x423114
    int64_t v2 = v1 & -256; // 0x423114
    *(char *)v1 = -109;
    bool v3; // 0x423114
    if (!v3) {
        // 0x42316b
        return v2 | 147;
    }
    int64_t v4 = v2 | (int64_t)(*(char *)(4 * v1 - 0x1bd020c2) | -109); // 0x42317c
    int64_t v5; // 0x423114
    int64_t result = &v5; // 0x42318d
    if (((int32_t)v4 & -0x5a7610fd) < 1) {
        // 0x4231c8
        return result;
    }
    int64_t v6 = v4 & 0xffffffff; // 0x42318d
    *(int64_t *)(v6 - 8) = v6;
    int64_t v7; // 0x423114
    int32_t v8 = *(int32_t *)&v7; // 0x4231eb
    int64_t v9; // bp-1503955211, 0x423114
    return (int32_t)((int32_t)result > 0x59a4890a) + (int32_t)(int64_t)&v9 - v8;
}

// Address range: 0x42320e - 0x423211
int64_t function_42320e(int64_t a1) {
    // 0x42320e
    int64_t result; // 0x42320e
    return result;
}

// Address range: 0x423244 - 0x423257
int64_t function_423244(int64_t a1, int64_t a2) {
    // 0x423244
    int64_t v1; // 0x423244
    int64_t v2 = v1;
    __asm_sti(a1, v1, v1);
    return (v2 + 206) % 256 | v2 & 0xffffff00;
}

// Address range: 0x423290 - 0x423295
int64_t function_423290(void) {
    // 0x423290
    return function_70d7cf7b();
}

// Address range: 0x423295 - 0x4232a2
int64_t function_423295(int64_t a1, int64_t a2) {
    // 0x423295
    int64_t v1; // 0x423295
    return v1 & 0xffffffff;
}

// Address range: 0x4232b1 - 0x4232b2
int64_t function_4232b1(void) {
    // 0x4232b1
    int64_t result; // 0x4232b1
    return result;
}

// Address range: 0x4232df - 0x4232f0
int64_t function_4232df(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4232df
    int64_t result; // 0x4232df
    return result;
}

// Address range: 0x4232fc - 0x4232fe
int64_t function_4232fc(void) {
    // 0x4232fc
    return function_4232b1();
}

// Address range: 0x423305 - 0x423306
int64_t function_423305(void) {
    // 0x423305
    int64_t result; // 0x423305
    return result;
}

// Address range: 0x423321 - 0x423334
int64_t function_423321(void) {
    // 0x423321
    return unknown_aaf2f77();
}

// Address range: 0x423360 - 0x423363
int64_t function_423360(void) {
    // 0x423360
    int64_t result; // 0x423360
    return result;
}

// Address range: 0x42336c - 0x4233d9
int64_t function_42336c(int64_t a1, int64_t a2, int64_t a3) {
    if (a1 == 1) {
        // 0x42336e
        return function_d3e30de();
    }
    // 0x4233c7
    return (int64_t)(*(int32_t *)0x4b25c6ffc0f0498a & -256 | 148);
}

// Address range: 0x4233f5 - 0x423497
int64_t function_4233f5(int64_t a1, uint64_t a2, int64_t a3) {
    unsigned char v1 = *(char *)(a2 - 0x5ca9c6b) ^ (char)(a2 / 256); // 0x4233f5
    int64_t v2 = 256 * (int64_t)v1 | a2 & -0xff01; // 0x4233f5
    int32_t v3 = *(int32_t *)(v2 + 96); // 0x4233fc
    int64_t v4; // 0x4233f5
    *(int32_t *)0x4549490216a9cb70 = (int32_t)v4;
    int64_t v5 = __asm_hlt(a1, v2, v4); // 0x42340c
    int64_t v6 = v5 & -251; // 0x42340d
    int64_t v7 = (int64_t)*(int32_t *)((int64_t)(-0x44b1ff24 * v3) - 114 + 4 * v2); // 0x42340f
    if (-120 * v7 != -0x7800000000 * v7 >> 32) {
        // 0x423443
        __asm_out_1(84, (char)v4);
        char * v8 = (char *)((v4 + 1 + v6 & 0xffffffff) + 94); // 0x423449
        *v8 = *v8 ^ v1;
        return v4 & 0xffffffff;
    }
    char v9 = v6; // 0x423419
    *(char *)-0x45b27e925003a067 = v9;
    char * v10 = (char *)v6; // 0x423422
    *v10 = v9;
    return v5 & -256 | (int64_t)*v10;
}

// Address range: 0x42349b - 0x4234a0
int64_t function_42349b(int64_t a1) {
    // 0x42349b
    int64_t result; // 0x42349b
    return result;
}

// Address range: 0x4234b0 - 0x4234b8
int64_t function_4234b0(int64_t a1) {
    // 0x4234b0
    __asm_fldenv((int224_t)a1);
    int64_t result; // 0x4234b0
    return result;
}

// Address range: 0x4234ec - 0x4234ee
int64_t function_4234ec(void) {
    // 0x4234ec
    int64_t result; // 0x4234ec
    return result;
}

// Address range: 0x42350b - 0x42350e
int64_t function_42350b(void) {
    // 0x42350b
    int64_t result; // 0x42350b
    return result;
}

// Address range: 0x423554 - 0x42355a
int64_t function_423554(void) {
    // 0x423554
    return function_574c4227();
}

// Address range: 0x42357a - 0x423582
int64_t function_42357a(void) {
    // 0x42357a
    __asm_in(-81);
    int64_t v1; // 0x42357a
    unsigned char v2 = (char)v1;
    *(char *)v1 = v2 / 16 | 16 * v2;
    return __asm_sti(v1, v1, v1);
}

// Address range: 0x4235e2 - 0x4235e3
int64_t function_4235e2(void) {
    // 0x4235e2
    int64_t result; // 0x4235e2
    return result;
}

// Address range: 0x423619 - 0x42361e
int64_t function_423619(void) {
    // 0x423619
    return function_ffffffff87de042c();
}

// Address range: 0x42369a - 0x4236ac
int64_t function_42369a(int64_t a1, int64_t a2) {
    uint32_t v1 = (int32_t)a1 % 32; // 0x42369a
    int64_t result; // 0x42369a
    if (v1 != 0) {
        int32_t * v2 = (int32_t *)(result - 0x3efef3a5); // 0x42369a
        uint32_t v3 = *v2; // 0x42369a
        bool v4; // 0x42369a
        *v2 = (int32_t)v4 << 32 - v1 | v3 >> v1 | (int32_t)((int64_t)v3 << (int64_t)(33 - v1));
    }
    return result;
}

// Address range: 0x4236b8 - 0x4236ca
int64_t function_4236b8(uint64_t a1) {
    // 0x4236b8
    int64_t v1; // 0x4236b8
    char * v2 = (char *)(v1 + 0x24a48eb1); // 0x4236b8
    *v2 = *v2 >> 1;
    char * v3 = (char *)(v1 - 0x396d6e86); // 0x4236be
    unsigned char v4 = *v3; // 0x4236be
    unsigned char v5 = (char)(a1 / 256); // 0x4236be
    *v3 = v4 - v5;
    *(char *)v1 = (char)v1;
    return function_4236cd(256 * (a1 / 128 & 254 | (int64_t)(v4 < v5)) | a1 & -0xff01);
}

// Address range: 0x4236ca - 0x4236cd
int64_t function_4236ca(int64_t a1, int64_t a2) {
    int16_t v1 = a2; // 0x4236ca
    int64_t v2; // 0x4236ca
    *(char *)v2 = __asm_insb(v1);
    return v2 & -256 | (int64_t)__asm_in_6(v1);
}

// Address range: 0x4236cd - 0x4236d8
int64_t function_4236cd(int64_t a1) {
    // 0x4236cd
    int64_t result; // 0x4236cd
    return result;
}

// Address range: 0x4236d9 - 0x42372d
int64_t function_4236d9(int64_t a1, int64_t a2) {
    int64_t v1 = a2;
    int64_t v2; // 0x4236d9
    *(char *)(v2 - 0x5bf5a6ec) = (char)(v2 / 256) ^ -102;
    int64_t v3 = unknown_34d7fa5e(); // 0x4236ef
    char * v4 = (char *)(2 * v2); // 0x423707
    char v5 = *v4; // 0x423707
    char v6 = (char)((char)v3 > 211) + (char)a1; // 0x423707
    *v4 = v5 - v6;
    int64_t result = (v3 + 44) % 256 | v3 & -256; // 0x42370a
    if (v5 < v6) {
        result = function_4236cd(a1);
    }
    // 0x42370c
    __asm_out(-19, (int32_t)result);
    __asm_int(-100);
    char v7 = *(char *)&v1 | (char)v1; // 0x423710
    *(char *)v1 = v7;
    if (v7 < 1) {
        // 0x423726
        return unknown_52bd337b();
    }
    // 0x423714
    return result;
}

// Address range: 0x423736 - 0x423737
int64_t function_423736(void) {
    // 0x423736
    int64_t result; // 0x423736
    return result;
}

// Address range: 0x42376b - 0x423771
int64_t function_42376b(int64_t a1) {
    // 0x42376b
    return function_ffffffffe61a258c();
}

// Address range: 0x423778 - 0x42377c
int64_t function_423778(int64_t a1) {
    // 0x423778
    int64_t result; // 0x423778
    bool v1; // 0x423778
    if (v1) {
        result = function_423736();
    }
    // 0x42377b
    return result;
}

// Address range: 0x423787 - 0x423792
int64_t function_423787(int64_t a1, int64_t a2) {
    // 0x423787
    int64_t v1; // 0x423787
    bool v2; // 0x423787
    return v1 - (v2 ? 0x512fcd38 : 0x512fcd37) & 0xffffffff;
}

// Address range: 0x4237c5 - 0x4237c6
int64_t function_4237c5(void) {
    // 0x4237c5
    int64_t result; // 0x4237c5
    return result;
}

// Address range: 0x4237e7 - 0x4237e8
int64_t function_4237e7(void) {
    // 0x4237e7
    int64_t result; // 0x4237e7
    return result;
}

// Address range: 0x4237e8 - 0x423855
int64_t function_4237e8(int64_t a1, int64_t a2) {
    // 0x4237e8
    int64_t v1; // 0x4237e8
    uint64_t v2 = v1;
    float80_t v3; // 0x4237e8
    *(float64_t *)(v2 & 0xffffffff) = (float64_t)v3;
    int64_t v4 = unknown_ffffffffd6578bf6(); // 0x4237ed
    if (a1 == 0) {
        // 0x42383b
        int32_t v5; // 0x4237e8
        if (v5 < v5) {
            // 0x423842
            *(int64_t *)0x886180a2 = -81;
            return v4 + 0x61982d9e & 0xffffffff;
        }
        int64_t v6 = function_4237c5(); // 0x42382f
        __asm_outsb((int16_t)a2, *(char *)*(int64_t *)0x886180aa);
        // 0x423831
        while ((int32_t)v6 >= -0x7ba862be) {
            // 0x423831
            v6 = function_4237c5();
            __asm_outsb((int16_t)a2, *(char *)*(int64_t *)0x886180aa);
        }
        // 0x423842
        *(int64_t *)0x886180a2 = -81;
        return v6 + 0x61982d9e & 0xffffffff;
    }
    int64_t v7 = 0x100000000 * v1 >> 32; // 0x4237f8
    int64_t v8 = 0xf5e7df5 * v7; // 0x4237f8
    uint32_t v9 = (int32_t)v1; // 0x4237fe
    int32_t v10 = v8 != 0xf5e7df500000000 * v7 >> 32; // 0x4237fe
    uint32_t v11 = *(int32_t *)(v1 + 0x326fc56f) + v10; // 0x4237fe
    uint32_t v12 = v9 - v11; // 0x4237fe
    bool v13 = v8 != 0xf5e7df500000000 * v7 >> 32 ? v11 != -1 | v12 - v10 > v9 : v11 > v9; // 0x4237fe
    int64_t v14 = v12; // 0x4237fe
    char v15 = *(char *)(v14 - 0x37cbe7ce); // 0x423805
    char v16 = *(char *)(a2 + 74); // 0x423812
    char * v17 = (char *)(v1 - 0x1c950b16); // 0x423815
    *v17 = 16 * *v17;
    *(int64_t *)(v8 & 0xffffffff) = v14;
    int32_t * v18 = (int32_t *)(a1 - 0x3a796a35); // 0x42381d
    *v18 = *v18 & (int32_t)a1;
    if (((char)(v2 / 256) - v15 + v16 + (char)v13 & 65) == 0) {
        function_4237e7();
    }
    // 0x423828
    return 0x329594bf;
}

// Address range: 0x42386f - 0x423870
int64_t function_42386f(void) {
    // 0x42386f
    int64_t result; // 0x42386f
    return result;
}

// Address range: 0x4238ae - 0x4238b0
int64_t function_4238ae(void) {
    // 0x4238ae
    return function_42386f();
}

// Address range: 0x4238b1 - 0x4238b4
int64_t function_4238b1(void) {
    // 0x4238b1
    int64_t result; // 0x4238b1
    return result;
}

// Address range: 0x4238cf - 0x4238d2
int64_t function_4238cf(int64_t a1) {
    // 0x4238cf
    int64_t result; // 0x4238cf
    return result;
}

// Address range: 0x42392b - 0x4239fd
int64_t function_42392b(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x42392b
    int64_t v1; // 0x42392b
    uint32_t result2 = (int32_t)a1 - *(int32_t *)(4 * v1 + 82 + v1); // 0x42392d
    int32_t * v2 = (int32_t *)(v1 + 0x13ee99f1); // 0x423931
    int32_t v3 = a2; // 0x423931
    *v2 = *v2 & v3;
    int128_t v4; // 0x42392b
    __asm_movlps(v4, a2);
    char * v5 = (char *)(2 * v1); // 0x42393f
    *v5 = *v5 - (char)result2;
    int64_t v6 = v1 & -0xff01 | 0x8300; // 0x423942
    __asm_out_1(115, (char)v1);
    char * v7 = (char *)v6; // 0x423946
    unsigned char v8 = *v7; // 0x423946
    *v7 = v8 - 125;
    uint32_t v9 = (int32_t)v1; // 0x423948
    int32_t v10 = v8 > 124; // 0x423948
    uint32_t v11 = result2 + v10; // 0x423948
    uint32_t v12 = v9 - v11; // 0x423948
    if (v12 != 0 && !((v8 > 124 ? v11 != -1 || v12 - v10 > v9 : v11 > v9))) {
        // 0x42396d
        int64_t result; // 0x42392b
        return result;
    }
    // 0x42394d
    int64_t v13; // bp-16, 0x42392b
    int32_t v14 = (int32_t)(int64_t)&v13 - v3; // 0x423957
    int64_t v15 = v14; // 0x423957
    if (v14 >= 0) {
        // 0x42395f
        __readgsbyte(a2 - 0x5ca278bc);
        *(int64_t *)v15 = v15 + 8;
        // 0x42396d
        return result2;
    }
    int64_t v16 = v12; // 0x423948
    int64_t * v17 = (int64_t *)v15; // 0x42395c
    char * v18 = (char *)(v16 + 92); // 0x4239dd
    char v19 = *v18 & 87; // 0x4239dd
    *v18 = v19;
    __asm_int(-35);
    *v17 = v16;
    __asm_out(-5, (int32_t)*(char *)*v17 | -0x4fa9a900);
    int64_t result3 = unknown_ffffffff93ca3296(); // 0x4239eb
    int64_t v20 = *(int64_t *)(v15 + 0x73d2) & -256 | 46; // 0x4239f2
    if (v19 != 0) {
        char * v21 = (char *)(v20 - 104); // 0x4239fa
        *v21 = (char)result3;
        return result3 & -0x10000 | (int64_t)*v21 | 0x6a00;
    }
    uint32_t v22 = (int32_t)v6; // 0x423959
    int32_t * v23 = (int32_t *)v20; // 0x4239ce
    *v23 = v22 / 0x40000 | 0x4000 * v22 | *v23;
    return result3;
}

// Address range: 0x423a21 - 0x423a26
int64_t function_423a21(void) {
    // 0x423a21
    return function_8751c66();
}

// Address range: 0x423a2a - 0x423a2b
int64_t function_423a2a(void) {
    // 0x423a2a
    int64_t result; // 0x423a2a
    return result;
}

// Address range: 0x423a54 - 0x423a60
int64_t function_423a54(int64_t a1, int64_t a2) {
    // 0x423a54
    int64_t v1; // 0x423a54
    int64_t v2; // 0x423a54
    return (uint64_t)v2 % 256 ^ (int64_t)&v1;
}

// Address range: 0x423a64 - 0x423a7b
int64_t function_423a64(int64_t a1, int64_t a2) {
    // 0x423a64
    *(int32_t *)-0x6064face = *(int32_t *)-0x6064face + 0x777c7a85;
    return function_ffffffffb781cae8();
}

// Address range: 0x423a95 - 0x423a98
int64_t function_423a95(void) {
    // 0x423a95
    int64_t result; // 0x423a95
    return result;
}

// Address range: 0x423aa9 - 0x423aaa
int64_t function_423aa9(void) {
    // 0x423aa9
    int64_t result; // 0x423aa9
    return result;
}

// Address range: 0x423ac6 - 0x423ad9
int64_t function_423ac6(int64_t a1) {
    // 0x423ac6
    int64_t v1; // 0x423ac6
    int32_t * v2 = (int32_t *)(v1 - 0x224bd24b); // 0x423ac6
    *v2 = 0x800000 * *v2;
    __asm_out(55, (int32_t)v1);
    return function_423aa9();
}

// Address range: 0x423b21 - 0x423b2f
int64_t function_423b21(void) {
    // 0x423b21
    return function_ffffffff8f6721ed();
}

// Address range: 0x423b36 - 0x423b37
int64_t function_423b36(void) {
    // 0x423b36
    int64_t result; // 0x423b36
    return result;
}

// Address range: 0x423b3c - 0x423b40
int64_t function_423b3c(void) {
    // 0x423b3c
    int64_t result; // 0x423b3c
    return result;
}

// Address range: 0x423b42 - 0x423b50
int64_t function_423b42(int64_t a1, int64_t a2) {
    // 0x423b42
    int64_t v1; // 0x423b42
    char * v2 = (char *)(v1 + 14); // 0x423b46
    *v2 = *v2 ^ (char)(v1 / 256);
    return function_fffffffff5271057();
}

// Address range: 0x423b51 - 0x423b52
int64_t function_423b51(void) {
    // 0x423b51
    int64_t result; // 0x423b51
    return result;
}

// Address range: 0x423b52 - 0x423b74
int64_t function_423b52(uint64_t a1, int64_t a2, int64_t result) {
    // 0x423b52
    *(int32_t *)-0x6bcb402c = *(int32_t *)-0x6bcb402c + -1 - (int32_t)a1;
    uint64_t v1 = a1 % 64; // 0x423b64
    if (v1 != 0) {
        int64_t v2; // 0x423b52
        int64_t * v3 = (int64_t *)(v2 + 4); // 0x423b64
        *v3 = *v3 << v1;
    }
    return result;
}

// Address range: 0x423b74 - 0x423c09
int64_t function_423b74(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x423b74
    int64_t v1; // 0x423b74
    int64_t v2 = v1;
    uint32_t result = (int32_t)v1 - 0x4f1a3504; // 0x423b7b
    *(char *)v1 = (char)v1;
    if (result >= 0) {
        // 0x423b85
        return result;
    }
    int64_t v3 = a1 - 1; // 0x423b83
    if (v3 == 0) {
        // 0x423b85
        return result;
    }
    // 0x423bfe
    bool v4; // 0x423b74
    int64_t v5 = v4 ? -1 : 1; // 0x423b80
    int64_t v6 = v5 + v1; // 0x423b80
    uint32_t result2 = result & 0x58a273d6; // 0x423bfe
    *(char *)(v5 + v1) = *(char *)v6;
    if (result2 == 0) {
        // 0x423c07
        return result2;
    }
    int16_t v7 = a2; // 0x423b92
    __asm_out_4(v7, (char)result2);
    char * v8 = (char *)(v2 + 8); // 0x423b93
    *v8 = *v8 + (char)(result2 / 256);
    int64_t v9 = v3 & -0xff01; // 0x423b96
    __asm_iretd(v9, a2);
    int64_t v10 = function_423b36(); // 0x423b9a
    int64_t v11; // 0x423bbc
    float80_t v12; // 0x423b74
    if (v9 == 0) {
        // ._crit_edge
        *(int32_t *)0x4757737d = (int32_t)v2;
        *(float64_t *)(v2 - 0x2df51431) = (float64_t)v12;
        v11 = *(char *)(v2 - 124) < (char)v2 ? 155 : 154;
        return (v10 - v11) % 256 | v10 & -256;
    }
    int64_t v13 = v9; // 0x423b9e
    __asm_outsd(v7, *(int32_t *)(v6 + v5));
    while (v13 != 1) {
        // .lr.ph
        v13--;
        __asm_outsd(v7, *(int32_t *)(v6 + v5));
    }
    // ._crit_edge
    *(int32_t *)0x4757737d = (int32_t)v2;
    *(float64_t *)(v2 - 0x2df51431) = (float64_t)v12;
    v11 = *(char *)(v2 - 124) < (char)v2 ? 155 : 154;
    return (v10 - v11) % 256 | v10 & -256;
}

// Address range: 0x423c29 - 0x423c71
int64_t function_423c29(int64_t a1, int64_t a2) {
    // 0x423c29
    int64_t v1; // 0x423c29
    __asm_outsd((int16_t)a2, (int32_t)v1);
    int64_t v2 = v1 & -0xff01; // 0x423c2a
    int64_t result = v2 | 0x7300; // 0x423c2a
    *(char *)v1 = (char)v1;
    // 0x423c53
    bool v3; // 0x423c29
    int64_t v4 = (v3 ? -1 : 1) + v1; // 0x423c2c
    int32_t v5 = *(int32_t *)(v4 - 85); // 0x423c5b
    if (llvm_ctpop_i8((char)((int32_t)v1 - v5)) % 2 != 0) {
        // 0x423c51
        return result;
    }
    int64_t v6 = 0xa1d01695 * v4 & 0xffffffff; // 0x423c62
    *(int64_t *)(v6 - 8) = result;
    *(int64_t *)(v6 - 16) = v4;
    return 256 * *(int64_t *)v1 & 0x7300 | v2;
}

// Address range: 0x423c8c - 0x423c98
int64_t function_423c8c(int64_t a1, int64_t a2) {
    // 0x423c8c
    int64_t result; // 0x423c8c
    char * v1 = (char *)(result - 0x8f83294); // 0x423c8f
    *v1 = *v1 & (char)(result / 256);
    return result;
}

// Address range: 0x423ca1 - 0x423ca2
int64_t function_423ca1(void) {
    // 0x423ca1
    int64_t result; // 0x423ca1
    return result;
}

// Address range: 0x423cbe - 0x423cf6
int64_t function_423cbe(int64_t a1, int64_t a2) {
    int64_t v1 = a1;
    int64_t v2; // 0x423cbe
    int64_t v3 = v2 + 0xc000f48d; // 0x423cbe
    int64_t v4 = v3 & 0xffffffff; // 0x423cbe
    float80_t v5; // 0x423cbe
    *(int16_t *)(a1 - 0x7f9935f3) = (int16_t)v5;
    int32_t * v6 = (int32_t *)(v2 + 4 * a2); // 0x423cc9
    *v6 = *v6 ^ -48;
    char * v7 = (char *)(v4 - 0xd711de9); // 0x423ccf
    *v7 = *v7 | (char)v2;
    char * v8 = (char *)(v4 + 33); // 0x423cd5
    *v8 = *v8 >> 1;
    unsigned char v9 = (char)a1 % 32; // 0x423cd9
    if (v9 != 0) {
        char * v10 = (char *)v4; // 0x423cd9
        *v10 = *v10 << v9;
    }
    int32_t * v11 = (int32_t *)(v1 + 0x5814b30e); // 0x423cdd
    *v11 = 2 * *v11;
    int64_t v12; // 0x423cbe
    int64_t v13 = v12;
    *(int32_t *)v13 = *(int32_t *)&v12 & (int32_t)v13;
    int32_t v14 = *(int32_t *)&v1 + 1; // 0x423cef
    unsigned char v15 = llvm_ctpop_i8((char)v14); // 0x423cef
    *(int32_t *)v1 = v14;
    int64_t v16 = v3 & 0xffffff00 | (int64_t)*(char *)&v12; // 0x423cf1
    if (v15 % 2 == 0) {
        v16 = function_423ca1();
    }
    int64_t v17 = v16;
    return (v17 + 206) % 256 | v17 & -256;
}

// Address range: 0x423cf6 - 0x423cfc
int64_t function_423cf6(void) {
    // 0x423cf6
    return function_1f2e87ee();
}

// Address range: 0x423cfc - 0x423d13
int64_t function_423cfc(int64_t a1, int64_t a2) {
    // 0x423cfe
    return __asm_in(26);
    // 0x423d06
    int64_t result; // 0x423cfc
    bool v1; // 0x423cfc
    if (llvm_ctpop_i8((char)result - (char)a2 + (char)v1) % 2 == 0) {
        // 0x423d64
        return result;
    }
    // 0x423d0a
    *(char *)((v1 ? -8 : 8) + result) = (char)result;
    return result & 0xffffffff;
}

// Address range: 0x423d13 - 0x423d17
int64_t function_423d13(int64_t a1) {
    // 0x423d13
    int64_t result; // 0x423d13
    return result;
}

// Address range: 0x423d4e - 0x423d58
int64_t function_423d4e(void) {
    // 0x423d4e
    int64_t v1; // 0x423d4e
    uint64_t v2 = v1;
    char v3 = *(char *)(v1 + 73); // 0x423d4e
    return 256 * (int64_t)(v3 & (char)(v2 / 256)) | v2 & -0xff01;
}

// Address range: 0x423d62 - 0x423d64
int64_t function_423d62(void) {
    // 0x423d62
    int64_t v1; // 0x423d62
    return v1 & -256 | (int64_t)__asm_in_2(-60);
}

// Address range: 0x423d91 - 0x423d95
int64_t function_423d91(void) {
    // 0x423d91
    int64_t v1; // 0x423d91
    return __asm_wait(v1, v1);
}

// Address range: 0x423da2 - 0x423da3
int64_t function_423da2(void) {
    // 0x423da2
    int64_t result; // 0x423da2
    return result;
}

// Address range: 0x423db5 - 0x423dba
int64_t function_423db5(void) {
    // 0x423db5
    int64_t result; // 0x423db5
    return result;
}

// Address range: 0x423dba - 0x423dbb
int64_t function_423dba(void) {
    // 0x423dba
    int64_t result; // 0x423dba
    return result;
}

// Address range: 0x423e0c - 0x423e11
int64_t function_423e0c(void) {
    // 0x423e0c
    return function_ffffffffa6515d3c();
}

// Address range: 0x423e13 - 0x423e19
int64_t function_423e13(void) {
    // 0x423e13
    return function_423da2();
}

// Address range: 0x423e1a - 0x423e1e
int64_t function_423e1a(int64_t a1, int64_t a2) {
    // 0x423e1a
    int64_t v1; // 0x423e1a
    *(char *)v1 = __asm_insb((int16_t)a2);
    int64_t result; // 0x423e1a
    bool v2; // 0x423e1a
    if (v2) {
        result = function_423dba();
    }
    // 0x423e1d
    return result;
}

// Address range: 0x423e8f - 0x423e95
int64_t function_423e8f(int64_t a1) {
    // 0x423e8f
    return function_59db732f();
}

// Address range: 0x423eb7 - 0x423ebc
int64_t function_423eb7(void) {
    // 0x423eb7
    int64_t result; // 0x423eb7
    return result;
}

// Address range: 0x423edd - 0x423eef
int64_t function_423edd(int64_t a1, int64_t a2) {
    // 0x423edd
    int64_t v1; // 0x423edd
    float80_t v2; // 0x423edd
    *(float80_t *)(v1 + 0x3b1f2e7c) = __asm_fbstp(v2);
    __asm_outsb(256 * (int16_t)v1 | 25, (char)v1);
    return function_fcb1bcd();
}

// Address range: 0x423f0b - 0x423f0c
int64_t function_423f0b(void) {
    // 0x423f0b
    int64_t result; // 0x423f0b
    return result;
}

// Address range: 0x423f15 - 0x423f16
int64_t function_423f15(void) {
    // 0x423f15
    int64_t result; // 0x423f15
    return result;
}

// Address range: 0x423f1a - 0x423f2e
int64_t function_423f1a(uint64_t a1) {
    // 0x423f1a
    int64_t v1; // 0x423f1a
    int32_t * v2 = (int32_t *)(v1 + 0x531f0a6b); // 0x423f1a
    uint32_t v3 = *v2; // 0x423f1a
    uint32_t v4 = v3 + (int32_t)v1; // 0x423f1a
    bool v5; // 0x423f1a
    uint32_t v6 = v4 + (int32_t)v5; // 0x423f1a
    *v2 = v6;
    int64_t v7; // 0x423f1a
    char v8; // 0x423f1a
    int64_t v9; // 0x423f1a
    if (v6 == 0 || (v5 ? v6 <= v3 : v4 < v3)) {
        int64_t v10 = function_423f15(); // 0x423f20
        v9 = v10;
        v7 = v10;
        v8 = v10;
    } else {
        // 0x423f1a
        v7 = v9;
        v8 = *(char *)&v9;
    }
    char v11 = v8 & (char)(a1 / 256); // 0x423f22
    *(char *)v7 = v11;
    *(int32_t *)v1 = *(int32_t *)((v5 ? -1 : 1) + v1);
    *(char *)a1 = (char)(v11 != 0);
    return function_5c819705();
}

// Address range: 0x423f30 - 0x423f33
int64_t function_423f30(void) {
    // 0x423f30
    int64_t result; // 0x423f30
    return result;
}

// Address range: 0x423f4d - 0x423f4f
int64_t function_423f4d(void) {
    // 0x423f4d
    int64_t result; // 0x423f4d
    return result;
}

// Address range: 0x423f54 - 0x423f70
int64_t function_423f54(int64_t a1) {
    unsigned char v1 = (char)a1 % 32; // 0x423f55
    int64_t v2; // 0x423f54
    if (v1 != 0) {
        char * v3 = (char *)(v2 + 0x37bec766); // 0x423f55
        unsigned char v4 = *v3; // 0x423f55
        *v3 = v4 >> v1 | v4 << 8 - v1;
    }
    if ((char)v2 < -107) {
        function_423f0b();
    }
    // 0x423f5f
    return function_ffffffff99bf1d81();
}

// Address range: 0x423f93 - 0x423f97
int64_t function_423f93(int64_t a1) {
    // 0x423f93
    int64_t result; // 0x423f93
    return result;
}

// Address range: 0x423f9f - 0x423fb4
int64_t function_423f9f(int64_t a1) {
    // 0x423f9f
    int64_t v1; // 0x423f9f
    *(char *)(8 * a1 - 108 + v1) = (char)((uint64_t)v1 / 256);
    *(int32_t *)0x259f7d5978628dfa = (int32_t)v1;
    __asm_in_2((char)a1);
    return function_ffffffff947a23e6();
}

// Address range: 0x423fea - 0x423fed
int64_t function_423fea(int64_t a1) {
    // 0x423fea
    int64_t result; // 0x423fea
    return result;
}

// Address range: 0x424002 - 0x424005
int64_t function_424002(void) {
    // 0x424002
    int64_t result; // 0x424002
    return result;
}

// Address range: 0x424005 - 0x424013
int64_t function_424005(int64_t a1) {
    // 0x424005
    return function_64d0f283();
}

// Address range: 0x42401a - 0x42401f
int64_t function_42401a(int64_t a1, int64_t a2) {
    // 0x42401a
    int64_t v1; // 0x42401a
    *(char *)a2 = (char)v1 | 124;
    int64_t v2; // 0x42401a
    return &v2;
}

// Address range: 0x42408a - 0x42409b
int64_t function_42408a(int64_t a1, int64_t a2, int64_t a3) {
    // 0x42408a
    int64_t v1; // 0x42408a
    int64_t v2 = __asm_hlt(a1, a2, v1); // 0x42408a
    int32_t * v3 = (int32_t *)(a2 + 114); // 0x424095
    *v3 = *v3 + (int32_t)v1;
    return v2 & 0x993a4e62 | 0x66c5b19d;
}

// Address range: 0x42414c - 0x42414f
int64_t function_42414c(int64_t a1) {
    // 0x42414c
    int64_t result; // 0x42414c
    return result;
}

// Address range: 0x424173 - 0x424174
int64_t function_424173(void) {
    // 0x424173
    int64_t result; // 0x424173
    return result;
}

// Address range: 0x42419c - 0x4241a9
int64_t function_42419c(int64_t a1, int64_t a2, int64_t a3) {
    // 0x42419c
    int64_t v1; // 0x42419c
    __asm_outsb((int16_t)a2, (char)v1);
    int64_t result; // 0x42419c
    if (a1 != 1) {
        result = function_424173();
    }
    // 0x42419f
    *(int32_t *)a2 = (int32_t)a2 - (int32_t)v1;
    *(int32_t *)v1 = (int32_t)result;
    float80_t v2; // 0x42419c
    *(int64_t *)(v1 - 106) = (int64_t)v2;
    return result;
}

// Address range: 0x42420a - 0x424216
int64_t function_42420a(int64_t a1) {
    // 0x42420a
    return (int64_t)*(int32_t *)0x77c5c93722c885bd;
}

// Address range: 0x424230 - 0x4242ce
int64_t function_424230(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    // 0x424230
    int64_t result; // 0x424230
    bool v1; // 0x424230
    if (v1 || v1) {
        // 0x424232
        return result;
    }
    // 0x4242b3
    *(int64_t *)(result - 8) = a1;
    int64_t * v2 = (int64_t *)(a4 + 29); // 0x4242bd
    *v2 = *v2 >> 58;
    int64_t result2; // 0x424230
    *(int32_t *)result2 = 2 * *(int32_t *)&result2;
    return result2;
}

// Address range: 0x4242d3 - 0x4242d6
int64_t function_4242d3(int64_t a1) {
    // 0x4242d3
    int64_t result; // 0x4242d3
    return result;
}

// Address range: 0x4242f9 - 0x4242fe
int64_t function_4242f9(void) {
    // 0x4242f9
    return function_ffffffffdcf21017();
}

// Address range: 0x424325 - 0x42433e
int64_t function_424325(int64_t a1) {
    // 0x424325
    int64_t v1; // 0x424325
    __asm_hlt(a1, v1, v1);
    __asm_in_2(-89);
    *(int32_t *)-0x5e1a6c70f4d913d3 = (int32_t)v1;
    return v1 & 0xffffffff;
}

// Address range: 0x42436a - 0x42436b
int64_t function_42436a(void) {
    // 0x42436a
    int64_t result; // 0x42436a
    return result;
}

// Address range: 0x424370 - 0x424398
int64_t function_424370(int64_t a1, int64_t a2) {
    // 0x424370
    int64_t result; // 0x424370
    __asm_hlt(a1, 0xfd3263f7, result);
    return result;
}

// Address range: 0x4243ae - 0x4243c8
int64_t function_4243ae(int64_t a1, int64_t a2) {
    int64_t result = __asm_int1(a1, a2); // 0x4243b6
    int64_t v1; // 0x4243ae
    __asm_psubd(v1, a2);
    char * v2 = (char *)(a1 - 0x2dd5d96a); // 0x4243bf
    *v2 = *v2 & (char)a1;
    return result;
}

// Address range: 0x4243c9 - 0x4243ca
int64_t function_4243c9(void) {
    // 0x4243c9
    int64_t result; // 0x4243c9
    return result;
}

// Address range: 0x4243cd - 0x4243d3
int64_t function_4243cd(int64_t a1, int64_t a2) {
    // 0x4243cd
    return a1 & 0xffffff00 | (int64_t)__asm_in_2(25);
}

// Address range: 0x4243d4 - 0x4243e7
int64_t function_4243d4(int64_t a1, int64_t a2) {
    int32_t * v1 = (int32_t *)(a1 - 21); // 0x4243d9
    int32_t v2 = *v1 & -52; // 0x4243d9
    *v1 = v2;
    int64_t result = 0x8ad06687; // 0x4243df
    if (v2 < 1) {
        result = function_42436a();
    }
    // 0x4243e1
    int64_t v3; // 0x4243d4
    char * v4 = (char *)(v3 - 119); // 0x4243e1
    *v4 = *v4 + 102;
    return result;
}

// Address range: 0x424428 - 0x42446a
int64_t function_424428(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x424428
    int64_t v1; // 0x424428
    if (a1 == 1 || (char)v1 == (char)v1) {
        // 0x42442b
        bool v2; // 0x424428
        *(char *)((v2 ? -1 : 1) + v1) = (char)v1;
        __asm_iretd(a1 - 2, a2 & -0xff01 | 0x7900);
        return (int64_t)*(int32_t *)0x138e35bfb29ba73;
    }
    // 0x424462
    return v1 ^ 98;
}

// Address range: 0x424476 - 0x424477
int64_t function_424476(void) {
    // 0x424476
    int64_t result; // 0x424476
    return result;
}

// Address range: 0x42448c - 0x424522
int64_t function_42448c(int64_t a1, uint64_t a2) {
    // 0x42448c
    int64_t v1; // 0x42448c
    uint32_t v2 = (int32_t)v1 + 0x611d9993; // 0x424499
    __asm_int(-19);
    int32_t v3 = *(int32_t *)((int64_t)v2 + 45); // 0x4244a2
    float32_t v4 = *(float32_t *)(4 * v1 + 0xcf2394f2); // 0x4244a5
    __asm_int(-83);
    int64_t v5 = *(int64_t *)(int64_t)(v3 | (int32_t)v1); // 0x4244b5
    char v6 = (char)v1 + (char)(a2 / 256); // 0x42451b
    unsigned char v7 = llvm_ctpop_i8(v6); // 0x42451b
    *(char *)v1 = v6;
    if (v7 % 2 != 0) {
        // 0x424520
        return __asm_iretq();
    }
    // 0x4244c7
    *(char *)(2 * v5) = 0;
    char * v8 = (char *)(v1 - 0x22b66d87); // 0x4244d0
    *v8 = *v8 + 109;
    uint32_t v9 = ((int32_t)a1 & -256 | 180) - 0x3f449a9e >> 31; // 0x4244d7
    int16_t v10 = v9; // 0x4244da
    __asm_in_3(v10);
    int32_t * v11 = (int32_t *)(v1 + 0x524242d7); // 0x4244db
    *v11 = *v11 | -0xb359786;
    char v12 = *(char *)0x8246f29c; // 0x4244ea
    __asm_in_6(v10);
    int32_t v13 = *(int32_t *)(v5 - 11); // 0x4244f1
    int64_t v14 = unknown_ffffffffdb2de981(256 * (int64_t)(v12 + (char)(v2 / 256)) | (int64_t)(v2 & -0x10000 | 168)); // 0x4244fe
    float80_t v15; // 0x42448c
    *(int32_t *)((int64_t)v9 - 89) = (int32_t)(v15 / (float80_t)v4 / v15 - (float80_t)v13);
    return (v14 + 36) % 256 | v14 & -256;
}

// Address range: 0x4245af - 0x4245c8
int64_t function_4245af(int64_t a1) {
    // 0x4245af
    int64_t result; // 0x4245af
    *(int32_t *)0x5538021a51f2d6cb = (int32_t)result;
    return result;
}

// Address range: 0x424620 - 0x424631
int64_t function_424620(int64_t a1) {
    // 0x424620
    int64_t v1; // 0x424620
    int32_t * v2 = (int32_t *)(v1 + 0x60aebc36); // 0x424621
    *v2 = *v2 ^ 0x6165d9f2;
    return (a1 + 124) % 256 | a1 & -256;
}

// Address range: 0x42464e - 0x42464f
int64_t function_42464e(void) {
    // 0x42464e
    int64_t result; // 0x42464e
    return result;
}

// Address range: 0x424650 - 0x424654
int64_t function_424650(int64_t a1) {
    // 0x424650
    int64_t result; // 0x424650
    return result;
}

// Address range: 0x42465b - 0x42465c
int64_t function_42465b(void) {
    // 0x42465b
    int64_t result; // 0x42465b
    return result;
}

// Address range: 0x42467c - 0x424686
int64_t function_42467c(int64_t a1, int64_t a2) {
    // 0x42467c
    int64_t v1; // 0x42467c
    return function_4246bb(a1, (uint64_t)v1 / 256 % 256 ^ a2, (int64_t)&g2);
}

// Address range: 0x424686 - 0x42469c
int64_t function_424686(int64_t a1) {
    // 0x424686
    int64_t v1; // 0x424686
    uint32_t v2 = 0x10000 * (int32_t)v1 >> 16; // 0x424687
    int32_t * v3 = (int32_t *)(2 * v1 - 0x3a332ffc + (int64_t)v2); // 0x42468f
    *v3 = v2;
    return (int64_t)(0x10000 * *v3 >> 16);
}

// Address range: 0x42469f - 0x4246a1
int64_t function_42469f(void) {
    // 0x42469f
    int64_t result; // 0x42469f
    return result;
}

// Address range: 0x4246b4 - 0x4246b9
int64_t function_4246b4(void) {
    // 0x4246b4
    int64_t result; // 0x4246b4
    return result;
}

// Address range: 0x4246bb - 0x4246e8
int64_t function_4246bb(int64_t a1, int64_t a2, int64_t a3) {
    int64_t result = unknown_415c67e9(); // 0x4246bc
    bool v1; // 0x4246bb
    if (v1 || false) {
        // 0x42472d
        return result;
    }
    int64_t v2 = result + 0xe05e83be; // 0x4246c5
    int64_t v3; // 0x4246bb
    char v4 = *(char *)(v3 + 126) | (char)v2; // 0x4246cb
    int64_t result2 = v2 & 0xffffff00 | (int64_t)v4; // 0x4246ce
    if (v4 < 1) {
        result2 = function_42465b();
    }
    char v5 = *(char *)0x56ba748f; // 0x4246d9
    *(char *)0x56ba748f = v5 | (char)(result2 / 256);
    return result2;
}

// Address range: 0x42470f - 0x424712
int64_t function_42470f(int64_t a1) {
    // 0x42470f
    int64_t result; // 0x42470f
    return result;
}

// Address range: 0x42471e - 0x42472d
int64_t function_42471e(int64_t a1) {
    unsigned char v1 = (char)a1; // 0x42471e
    char v2 = __asm_in_2(v1); // 0x42471e
    int64_t v3; // 0x42471e
    float80_t v4; // 0x42471e
    *(int32_t *)(v3 - 0x625228f2) = (int32_t)v4;
    unsigned char v5 = v1 % 32; // 0x424726
    if (v5 != 0) {
        char * v6 = (char *)(v3 - 0x3c549877); // 0x424726
        *v6 = *v6 << v5;
    }
    return v3 & -256 | (int64_t)v2;
}

// Address range: 0x42472e - 0x424762
int64_t function_42472e(int64_t a1, int64_t a2, int64_t a3) {
    // 0x42472e
    int64_t v1; // 0x42472e
    int64_t v2 = v1;
    bool v3; // 0x42472e
    if (!v3) {
        // 0x42475f
        return __asm_hlt(a1, a2, v1);
    }
    // 0x424730
    __asm_int(-118);
    *(int32_t *)v2 = 2 * (int32_t)v2;
    *(char *)a3 = __asm_insb((int16_t)a2 % 256 | 3840);
    char * v4 = (char *)(a3 + 4); // 0x42474d
    *v4 = *v4 ^ 54;
    return v1 & -0xff01 | 0x7500;
}

// Address range: 0x424784 - 0x424858
int64_t function_424784(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    char v1 = __asm_in_2(-66); // 0x424788
    unsigned char v2 = v1 & 9; // 0x42478a
    int64_t v3; // 0x424784
    int64_t v4 = (v3 | (int64_t)v1) & -256 | (int64_t)v2; // 0x42478a
    int32_t * v5 = (int32_t *)v4; // 0x42478d
    uint32_t v6 = (int32_t)a1; // 0x42478d
    *v5 = *v5 ^ v6;
    uint32_t v7 = (int32_t)v4; // 0x42478f
    __asm_out_1(-4, v2);
    unsigned char v8 = (char)a2; // 0x42480e
    unsigned char v9 = *(char *)(v4 - 0x69c6b4cc) + v8; // 0x42480e
    unsigned char v10 = v9 + (char)(v7 < 0xeebb6124); // 0x42480e
    int64_t v11 = a2 & -256 | (int64_t)v10; // 0x42480e
    int64_t v12; // 0x424784
    if (!((v7 < 0xeebb6124 ? v10 <= v8 : v9 < v8))) {
        // 0x424854
        __asm_outsd((int16_t)v11, *(int32_t *)&v12);
        return (int64_t)(0x10000 * v7 / 0x10000);
    }
    uint32_t v13 = v6 % 32; // 0x424816
    if (v13 != 0) {
        int32_t * v14 = (int32_t *)(v11 + 0x486efff5); // 0x424816
        *v14 = *v14 >> v13;
    }
    // 0x424829
    *(int32_t *)-0x38c783c122898c30 = v7;
    *(int32_t *)(v3 + 108) = (int32_t)v12;
    __asm_in_3((int16_t)v11);
    return __asm_iretd(a1, v11);
}

// Address range: 0x42486c - 0x42488c
int64_t function_42486c(int64_t a1, int64_t a2) {
    // 0x42486c
    int64_t v1; // 0x42486c
    uint32_t v2 = ((int32_t)v1 >> 23) - 0xed51d21 ^ 0x308f610c; // 0x424876
    uint32_t v3 = (int32_t)v1; // 0x42487b
    uint32_t v4 = (int32_t)a1 % 32; // 0x42487d
    bool v5 = v2 < v3; // 0x42487d
    if (v4 != 0) {
        uint32_t v6 = (int32_t)v1;
        int32_t v7 = v6 >> v4 | v6 << 32 - v4; // 0x42487d
        *(int32_t *)v1 = v7;
        v5 = v7 < 0;
    }
    uint32_t v8 = v2 - v3; // 0x42487b
    int64_t v9 = v8; // 0x42487b
    unsigned char v10 = (char)v8; // 0x424880
    char v11 = v5; // 0x424880
    unsigned char v12 = *(char *)v9 + v11; // 0x424880
    unsigned char v13 = v10 - v12; // 0x424880
    int64_t v14 = v5 ? v12 != -1 | v13 - v11 > v10 : v12 > v10 ? 0x39df4179 : 0x39df4178; // 0x424882
    return (v9 & 0xffffff00 | (int64_t)v13) - v14 & 0xffffffff;
}

// Address range: 0x42488c - 0x4248ba
int64_t function_42488c(uint64_t a1, int64_t a2, int64_t a3) {
    // 0x42488c
    int64_t result; // 0x42488c
    char * v1 = (char *)(result - 104); // 0x42488c
    char v2 = *v1; // 0x42488c
    bool v3; // 0x42488c
    char v4 = v3; // 0x42488c
    char v5 = v4 + (char)(a1 / 256); // 0x42488c
    char v6 = v2 - v5; // 0x42488c
    *v1 = v6;
    if (((v6 - v4 ^ v2) & (v2 ^ v5)) < 0) {
        // 0x4248a5
        return a1 & 0xffffffff;
    }
    // 0x424891
    return result;
}

// Address range: 0x4248d5 - 0x424903
int64_t function_4248d5(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4248d5
    int64_t v1; // 0x4248d5
    int64_t v2 = v1;
    int64_t v3 = __asm_sti(a3 & -0xff01 | 0x5900, a2, v1); // 0x4248de
    char * v4 = (char *)(v2 + 6); // 0x4248e4
    *v4 = *v4 - (char)a2;
    int64_t v5; // 0x4248d5
    *(int32_t *)v1 = *(int32_t *)&v5;
    unsigned char v6 = (char)v3 - 78; // 0x4248ee
    __asm_out_4((int16_t)a2, v6);
    int32_t * v7 = (int32_t *)((v2 - 256 * (v3 + 70 + (int64_t)(v6 > 107)) & 0xff00 | v2 & -0xff01) - 0x705873de); // 0x4248f8
    int32_t v8 = *v7; // 0x4248f8
    *v7 = 2 * v8 | (int32_t)(v8 < 0);
    return function_ffffffffa00b4d45();
}

// Address range: 0x424903 - 0x424943
int64_t function_424903(int64_t a1, uint64_t a2) {
    // 0x424903
    int64_t v1; // 0x424903
    uint64_t v2 = v1;
    char * v3 = (char *)(a1 - 0x54cf0d0); // 0x424903
    *v3 = *v3 + (char)(a2 / 256);
    char * v4 = (char *)(2 * (int64_t)__asm_in(-87) + a2); // 0x42492a
    *v4 = *v4 | (char)(v2 / 256);
    __asm_in(-109);
    int64_t v5; // 0x424903
    __asm_outsd((int16_t)a2, *(int32_t *)&v5);
    __asm_in(-119);
    return v2 & 0xffffffff;
}

// Address range: 0x42497a - 0x424980
int64_t function_42497a(int64_t a1, int64_t a2) {
    // 0x42497a
    int64_t result; // 0x42497a
    return result;
}

// Address range: 0x424988 - 0x424989
int64_t function_424988(int64_t a1) {
    // 0x424988
    int64_t result; // 0x424988
    return result;
}

// Address range: 0x42499d - 0x42499e
int64_t function_42499d(int64_t a1) {
    // 0x42499d
    int64_t result; // 0x42499d
    return result;
}

// Address range: 0x4249b0 - 0x4249b5
int64_t function_4249b0(void) {
    // 0x4249b0
    return function_3a9700a6();
}

// Address range: 0x4249c1 - 0x4249c2
int64_t function_4249c1(int64_t a1) {
    // 0x4249c1
    int64_t result; // 0x4249c1
    return result;
}

// Address range: 0x4249ca - 0x424a7b
int64_t function_4249ca(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x4249ca
    int64_t v1; // 0x4249ca
    uint32_t v2 = *(int32_t *)(v1 + 0x7983c3a4 & 0xffffffff) | (int32_t)v1; // 0x4249d5
    *(char *)-0x6882a4deaada45c9 = (char)v1;
    int64_t v3 = v1 & 0xffffffff; // 0x4249e5
    int16_t v4 = v1; // 0x4249e6
    __asm_in_6(v4);
    int64_t v5 = __asm_wait(a1, v3); // 0x4249e7
    __asm_outsb(v4, *(char *)(int64_t)v2);
    *(char *)v1 = (char)v5;
    int64_t v6 = a1 - 1; // 0x4249ea
    if (v6 != 0 && v2 != 0) {
        // 0x424a66
        return __asm_sti(v6, v3, v1);
    }
    uint32_t v7 = (int32_t)v5; // 0x4249ed
    int32_t v8 = v7 + 0x5d9599dd; // 0x4249ed
    int64_t result = v8; // 0x4249ed
    if (v8 < 0 != (v7 + 0x5d9599de & (v7 ^ -0x80000000)) < 0) {
        // 0x4249f4
        return result;
    }
    int32_t * v9 = (int32_t *)(result + 0x6eee6910); // 0x424a52
    uint32_t v10 = *v9; // 0x424a52
    int32_t v11 = v10 - 1; // 0x424a52
    unsigned char v12 = llvm_ctpop_i8((char)v11); // 0x424a52
    *v9 = v11;
    return result & 0xffff00ff | 256 * (64 * (int64_t)(v11 == 0) | (int64_t)(v7 > 0xa26a6622) | 128 * (int64_t)(v11 < 0) | 16 * (int64_t)(v10 % 16 > 16) | 4 * (int64_t)(v12 % 2 == 0)) | 512;
}

// Address range: 0x424a86 - 0x424a87
int64_t function_424a86(void) {
    // 0x424a86
    int64_t result; // 0x424a86
    return result;
}

// Address range: 0x424aa7 - 0x424aa9
int64_t function_424aa7(void) {
    // 0x424aa7
    int64_t v1; // 0x424aa7
    return function_424b0b(v1, v1, v1, v1);
}

// Address range: 0x424ad9 - 0x424ada
int64_t function_424ad9(int64_t a1) {
    // 0x424ad9
    int64_t result; // 0x424ad9
    return result;
}

// Address range: 0x424af5 - 0x424afc
int64_t function_424af5(void) {
    // 0x424af5
    return function_4510bde9();
}

// Address range: 0x424b0b - 0x424b1e
int64_t function_424b0b(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    int64_t v1 = __asm_iretd(*(int64_t *)(a4 - 103) ^ a1, a2); // 0x424b0f
    return (v1 + 217) % 256 | v1 & -256;
}

// Address range: 0x424b32 - 0x424b37
int64_t function_424b32(int64_t a1) {
    // 0x424b32
    __asm_int((char)a1);
    int64_t result; // 0x424b32
    return result;
}

// Address range: 0x424b55 - 0x424b5a
int64_t function_424b55(void) {
    // 0x424b55
    return function_fffffffffa7e35ba();
}

// Address range: 0x424b5a - 0x424b62
int64_t function_424b5a(int64_t a1, int64_t a2, int64_t a3) {
    // 0x424b5a
    int64_t result; // 0x424b5a
    *(int32_t *)result = __asm_insd((int16_t)a2);
    return result;
}

// Address range: 0x424bff - 0x424c10
int64_t function_424bff(int64_t a1) {
    // 0x424bff
    int64_t v1; // 0x424bff
    *(char *)(v1 - 78) = (char)a1;
    __asm_sti(a1, v1, v1);
    int64_t v2; // 0x424bff
    unsigned char v3 = *(char *)&v2; // 0x424c0b
    *(char *)v2 = v3 / 2 | 128 * v3;
    return (int64_t)*(int32_t *)(v1 - 124);
}

// Address range: 0x424c4a - 0x424c4c
int64_t function_424c4a(void) {
    // 0x424c4a
    int64_t result; // 0x424c4a
    return result;
}

// Address range: 0x424c5a - 0x424c5e
int64_t function_424c5a(void) {
    // 0x424c5a
    int64_t v1; // 0x424c5a
    return v1 & -256 | (uint64_t)v1 % 256;
}

// Address range: 0x424ca4 - 0x424ca7
int64_t function_424ca4(void) {
    // 0x424ca4
    int64_t result; // 0x424ca4
    return result;
}

// Address range: 0x424cb8 - 0x424d9a
int64_t function_424cb8(int64_t a1, uint64_t a2, int64_t a3) {
    // 0x424cb8
    int64_t v1; // 0x424cb8
    char * v2 = (char *)(v1 - 72); // 0x424cba
    unsigned char v3 = *v2; // 0x424cba
    unsigned char v4 = (char)v1; // 0x424cba
    char v5 = v3 - v4; // 0x424cba
    *v2 = v5;
    __asm_rcl(*(int32_t *)(v1 - 0x7049e589));
    int64_t v6 = a1 - 1; // 0x424cc3
    if (v6 != 0 != (v5 == 0)) {
        unsigned char v7 = *(char *)((v6 & 0xffffffff) - 0x2fa7f76a); // 0x424cc9
        return 0x10000 * (int32_t)((a1 + 95 + (int64_t)(v7 > -1 - (char)(a2 / 256))) % 256 | v6 & 0xff00) + 0x69340000 >> 16;
    }
    uint32_t v8 = (int32_t)v1; // 0x424d42
    int32_t v9 = v3 < v4; // 0x424d42
    uint32_t v10 = *(int32_t *)(v1 + v6) + v9; // 0x424d42
    int32_t v11 = v8 - v10; // 0x424d42
    uint64_t result = (int64_t)__asm_in(122); // 0x424d45
    if (v11 == 0 || (v3 < v4 ? v10 != -1 || v11 - v9 > v8 : v10 > v8)) {
        char * v12 = (char *)((v1 & -0xff01 | 0xda00) - 0x792413ea); // 0x424d4b
        *v12 = *v12 - (char)(result / 256);
        float80_t v13; // 0x424cb8
        *(int16_t *)(a2 - 27) = (int16_t)v13;
        return result & -164;
    }
    // 0x424d80
    if ((*(int32_t *)-0x79d3183e & (int32_t)v6) < 0) {
        // 0x424d9b
        return result;
    }
    // 0x424d88
    return result + 0x91fb585f & 0xffffffd8 | 39;
}

// Address range: 0x424db2 - 0x424f8a
int64_t function_424db2(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x424db2
    int64_t v1; // 0x424db2
    int64_t v2 = v1;
    int64_t v3 = v1;
    char v4 = *(char *)(a2 + 64 & 0xffffffff); // 0x424db5
    *(int32_t *)v1 = (int32_t)(v3 & 0xffffff00 | (int64_t)(v4 + (char)v3));
    bool v5; // 0x424db2
    int64_t v6 = (v5 ? -4 : 4) + v1; // 0x424dc0
    int64_t result = __asm_in(101); // 0x424dc1
    char v7 = __readgsbyte(v1); // 0x424dc3
    char v8 = *(char *)v6; // 0x424dc3
    char v9 = v7 - v8; // 0x424dc3
    if (((v9 ^ v7) & (v8 ^ v7)) >= 0) {
        if (v9 < 0) {
            // 0x424e88
            return __asm_int3(a1, a2);
        }
        // 0x424e11
        return result;
    }
    unsigned char v10 = *(char *)(v2 - 0x46989682) | (char)v2; // 0x424db9
    int64_t v11 = v5 ? -1 : 1; // 0x424dc3
    int64_t v12 = v6 + v11; // 0x424dc3
    int64_t v13 = v11 + v1; // 0x424dc3
    *(char *)v12 = *(char *)v13;
    int64_t v14 = v13 + v11; // 0x424dc8
    int32_t * v15 = (int32_t *)((v2 & -256 | (int64_t)v10) + 1); // 0x424dcf
    *v15 = *v15 - 1;
    __asm_psubb(v1, *(int64_t *)(result & 0xffffffff));
    unsigned char v16 = *(char *)(v14 - 0x5b89a511); // 0x424dd7
    *(char *)(a1 + 41) = v10;
    *(char *)(v12 + v11) = *(char *)v14;
    int32_t * v17 = (int32_t *)((result & 0xffffff00 | (int64_t)v16) - 125); // 0x424de4
    *v17 = *v17 + ((int32_t)a1 & -0xff01 ^ -0x5301);
    return function_ffffffffe72caca4();
}

// Address range: 0x424fa6 - 0x424fa7
int64_t function_424fa6(void) {
    // 0x424fa6
    int64_t result; // 0x424fa6
    return result;
}

// Address range: 0x424fac - 0x424fba
int64_t function_424fac(void) {
    int32_t result = __asm_in(55); // 0x424fac
    int64_t v1; // 0x424fac
    *(char *)v1 = (char)result;
    return result;
}

// Address range: 0x424fbf - 0x424fc0
int64_t function_424fbf(void) {
    // 0x424fbf
    int64_t result; // 0x424fbf
    return result;
}

// Address range: 0x424fd1 - 0x424fde
int64_t function_424fd1(int64_t a1) {
    // 0x424fd1
    int64_t v1; // 0x424fd1
    bool v2; // 0x424fd1
    if (!v2) {
        v1 = function_424fbf();
    }
    // 0x424fd8
    __asm_out_1(-82, (char)v1);
    return function_424ffa((int64_t)&g2);
}

// Address range: 0x424fe0 - 0x424fe2
int64_t function_424fe0(void) {
    // 0x424fe0
    return function_424fa6();
}

// Address range: 0x424ffa - 0x424ffb
int64_t function_424ffa(int64_t a1) {
    // 0x424ffa
    int64_t result; // 0x424ffa
    return result;
}

// Address range: 0x425068 - 0x425069
int64_t function_425068(void) {
    // 0x425068
    int64_t result; // 0x425068
    return result;
}

// Address range: 0x425084 - 0x425089
int64_t function_425084(int64_t a1) {
    // 0x425084
    __asm_out(19, (int32_t)a1);
    int64_t v1; // 0x425084
    return function_4250c6(v1, (int64_t)&g2);
}

// Address range: 0x4250b1 - 0x4250b8
int64_t function_4250b1(void) {
    // 0x4250b1
    return function_ffffffffccc0ce4f();
}

// Address range: 0x4250c6 - 0x4250ff
int64_t function_4250c6(int64_t a1, int64_t a2) {
    uint32_t v1 = *(int32_t *)-0x1cd8492187ac262c; // 0x4250c6
    int64_t result = v1; // 0x4250c6
    bool v2; // 0x4250c6
    if (v2) {
        // 0x4250fb
        __asm_int(-46);
        return ((v2 ? 254 : 253) + result) % 256 | result & 0xffffff00;
    }
    // 0x4250d1
    if (v2) {
        // 0x4250e1
        return result;
    }
    // 0x4250d3
    *(int32_t *)0x141f03e38e8f7452 = v1;
    int64_t result2 = result; // 0x4250df
    if (v2) {
        result2 = function_425068();
    }
    // 0x4250e1
    return result2;
}

// Address range: 0x425123 - 0x42512a
int64_t function_425123(void) {
    // 0x425123
    return function_ffffffff98bc19b7();
}

// Address range: 0x425166 - 0x42516b
int64_t function_425166(void) {
    // 0x425166
    return function_ffffffffbd8522ab();
}

// Address range: 0x42518c - 0x4251a8
int64_t function_42518c(int64_t a1) {
    // 0x42518c
    int64_t v1; // 0x42518c
    *(int32_t *)(v1 - 0x2353b754) = (int32_t)v1;
    __asm_out_1(-117, (char)v1);
    int64_t v2; // 0x42518c
    *(int32_t *)v1 = *(int32_t *)&v2;
    bool v3; // 0x42518c
    int64_t v4 = v3 ? -4 : 4; // 0x425195
    *(char *)(v4 + v1) = *(char *)(v2 + v4);
    int64_t v5; // 0x42518c
    return &v5;
}

// Address range: 0x4251b0 - 0x4251b1
int64_t function_4251b0(void) {
    // 0x4251b0
    int64_t result; // 0x4251b0
    return result;
}

// Address range: 0x4251bf - 0x4251c2
int64_t function_4251bf(void) {
    // 0x4251bf
    int64_t result; // 0x4251bf
    return result;
}

// Address range: 0x4251ca - 0x4251d8
int64_t function_4251ca(int64_t a1, int64_t a2) {
    // 0x4251ca
    int64_t v1; // 0x4251ca
    *(int32_t *)v1 = __asm_insd((int16_t)a2);
    return v1 & -256 | (int64_t)*(char *)-0x4567dfa1ddbcc700;
}

// Address range: 0x4251d9 - 0x4251de
int64_t function_4251d9(void) {
    // 0x4251d9
    int64_t result; // 0x4251d9
    return result;
}

// Address range: 0x4251de - 0x425308
int64_t function_4251de(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {
    int64_t v1 = a1 - 1; // 0x4251de
    int64_t v2; // 0x4251de
    bool v3; // 0x4251de
    if (v1 != 0 == v3) {
        v2 = function_4251b0();
    }
    char * v4 = (char *)(a1 - 94); // 0x4251e7
    *v4 = *v4 ^ -14;
    unsigned char v5 = *(char *)-0xe4b5ba9d6f5420f; // 0x4251ea
    uint32_t v6 = (int32_t)(v2 & 0xffffff00 | (int64_t)v5) ^ 0x72f85300; // 0x4251f3
    int64_t v7; // 0x4251de
    char * v8 = (char *)(v7 - 118);
    bool v9 = v6 > 0x1be6bf14;
    int64_t v10; // 0x4251de
    int64_t v11 = v10;
    uint64_t v12 = v1;
    int64_t result = v6 - 0x1be6bf15;
    while (v12 != 0) {
        char v13 = *(char *)(v11 - 20); // 0x4251fb
        if ((v12 & -256 || (int64_t)((char)v9 + (char)v12 + v13)) != 0) {
            // 0x425200
            return result;
        }
        // 0x425245
        __asm_in(27);
        *v8 = *v8 ^ (char)(v12 / 256);
        int64_t v14; // 0x4251de
        int64_t v15 = *(int64_t *)v14; // 0x42524a
        int64_t v16; // 0x4251de
        int32_t v17 = *(int32_t *)v16; // 0x425250
        int64_t v18 = v16 + (v3 ? -4 : 4); // 0x425250
        unsigned char v19 = (char)v17; // 0x425251
        unsigned char v20 = v19 + 41; // 0x425251
        unsigned char v21 = llvm_ctpop_i8(v20); // 0x425251
        int64_t result2 = (int64_t)v20 | (int64_t)(v17 & -256); // 0x425251
        v14 += 8;
        v16 = v18;
        if (v21 % 2 != 0) {
            if (v20 != 0) {
                // 0x425225
                *(char *)-0x2d99e6d = *(char *)-0x2d99e6d + (char)v15;
                return result2;
            }
            // 0x425259
            *(int32_t *)v7 = *(int32_t *)v18;
            return (int64_t)*(int32_t *)-0x184566230bf0162d;
        }
        v9 = v19 > 214;
        v11 = v15;
        v12 = 0;
        result = result2;
    }
    char v22 = *(char *)(v11 + 110); // 0x42522f
    return result & -256 | (int64_t)((char)result - 7 + (char)v9 + v22);
}

// Address range: 0x42531b - 0x42531c
int64_t function_42531b(void) {
    // 0x42531b
    int64_t result; // 0x42531b
    return result;
}

// Address range: 0x425337 - 0x425338
int64_t function_425337(void) {
    // 0x425337
    int64_t result; // 0x425337
    return result;
}

// Address range: 0x425346 - 0x425348
int64_t function_425346(void) {
    // 0x425346
    int64_t result; // 0x425346
    return result;
}

// Address range: 0x42536d - 0x42536e
int64_t function_42536d(void) {
    // 0x42536d
    int64_t result; // 0x42536d
    return result;
}

// Address range: 0x425374 - 0x42537d
int64_t function_425374(int64_t a1) {
    // 0x425374
    return function_42531b();
}

// Address range: 0x42537e - 0x425393
int64_t function_42537e(int64_t a1, int64_t a2, int64_t a3) {
    // 0x42537e
    int64_t result; // 0x42537e
    bool v1; // 0x42537e
    if (v1) {
        result = function_425337();
    }
    uint32_t v2 = (int32_t)a1 % 32; // 0x425380
    if (v2 != 0) {
        int64_t v3; // 0x42537e
        int32_t * v4 = (int32_t *)(v3 + 0x752f5a67); // 0x425380
        uint32_t v5 = *v4; // 0x425380
        *v4 = v5 >> v2 | v5 << 32 - v2;
    }
    // 0x42538d
    return result;
}

// Address range: 0x425393 - 0x425397
int64_t function_425393(int64_t a1) {
    // 0x425393
    int64_t result; // 0x425393
    __asm_out(-41, (int32_t)result);
    return result;
}

// Address range: 0x4253f4 - 0x42545d
int64_t function_4253f4(int64_t a1, int64_t a2) {
    // 0x4253f4
    int64_t v1; // bp-15106, 0x4253f4
    int64_t v2 = (int64_t)&v1 ^ a2;
    int32_t v3 = v2; // 0x4253f9
    int64_t v4; // 0x4253f4
    if (v3 >= 0 != v3 != 0) {
        // 0x4253fd
        return v4 & 0xffffffff;
    }
    int64_t v5 = v2 & 0xffffffff; // 0x4253f9
    int64_t v6 = v4 & 137 | 118; // 0x425409
    *(char *)(int64_t)*(int32_t *)(v5 - 40) = (char)v6;
    if ((*(char *)(v5 + 90) || (char)(v4 / 256)) == 0) {
        // 0x425457
        return function_ffffffffef8dbd1a();
    }
    // 0x425419
    return v6 | v4 & 0xffffff00;
}

// Address range: 0x42547c - 0x42547d
int64_t function_42547c(void) {
    // 0x42547c
    int64_t result; // 0x42547c
    return result;
}

// Address range: 0x42548b - 0x4254b4
int64_t function_42548b(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x42548b
    int64_t v1; // 0x42548b
    bool v2; // 0x42548b
    int32_t v3 = (int32_t)v1 - (v2 ? 0x1d73878c : 0x1d73878b); // 0x42548b
    int64_t v4 = unknown_ffffffff874586d0(); // 0x425497
    int64_t v5; // 0x42548b
    int64_t result = (int64_t)&v5 & 0xfffffff8; // 0x4254a6
    if ((0x2fed4b11 - v3 & v3) >= 0) {
        result = function_42547c();
    }
    int32_t * v6 = (int32_t *)(v4 & 0xffffffff); // 0x4254ab
    *v6 = *v6 & (int32_t)a2;
    return result;
}

// Address range: 0x4254c5 - 0x4254c9
int64_t function_4254c5(int64_t a1) {
    // 0x4254c5
    int64_t result; // 0x4254c5
    return result;
}

// Address range: 0x4254c9 - 0x4254d1
int64_t function_4254c9(int64_t a1) {
    // 0x4254c9
    int64_t v1; // 0x4254c9
    return v1 & 0xffffffff ^ 0xae2e5292;
}

// Address range: 0x4254dd - 0x4254e9
int64_t function_4254dd(uint64_t a1, int64_t a2, int64_t a3) {
    // 0x4254dd
    int64_t v1; // 0x4254dd
    __asm_hlt(a1, a2, v1);
    char * v2 = (char *)(a2 + 0x6af7a7dc); // 0x4254e1
    *v2 = *v2 + 80;
    return a1 & 0xffffff00 | (int64_t)*(char *)(v1 + a1 % 256);
}

// Address range: 0x4254ee - 0x4254ef
int64_t function_4254ee(void) {
    // 0x4254ee
    int64_t result; // 0x4254ee
    return result;
}

// Address range: 0x425519 - 0x42551b
int64_t function_425519(void) {
    // 0x425519
    int64_t v1; // 0x425519
    return function_42555b(v1, v1);
}

// Address range: 0x42551d - 0x42551f
int64_t function_42551d(int64_t a1) {
    // 0x42551d
    int64_t v1; // 0x42551d
    return v1 & 0xffffffff;
}

// Address range: 0x42552d - 0x425543
int64_t function_42552d(void) {
    // 0x42552d
    int64_t v1; // 0x42552d
    int32_t * v2 = (int32_t *)(v1 - 0x161503f3); // 0x425531
    *v2 = -*v2;
    __asm_wait(v1, v1);
    return function_ffffffffe641a55c();
}

// Address range: 0x425543 - 0x425556
int64_t function_425543(int64_t a1, int64_t a2, int64_t a3) {
    // 0x425543
    __asm_out_4((int16_t)a2, (char)a1);
    int64_t v1 = a1 & 0xffffffff; // 0x42554c
    bool v2; // 0x425543
    if (!v2) {
        v1 = function_4254ee();
    }
    // 0x42554e
    int64_t v3; // 0x425543
    return (0x100000000 * v1 >> 32) * (0x100000000 * v3 >> 32) & 0xffffffff;
}

// Address range: 0x42555b - 0x4255d8
int64_t function_42555b(int64_t a1, int64_t a2) {
    // 0x42555b
    int64_t v1; // 0x42555b
    int64_t v2 = v1 & 0xffffffff | 0x100000000 * a2; // 0x42555b
    int64_t v3 = v1 & 0xffffffff; // 0x42555b
    int64_t v4 = v2 / v3; // 0x42555b
    if (a1 == 1) {
        // 0x42555f
        return v4 & 0xffffffff;
    }
    char * v5 = (char *)(v1 + 68); // 0x4255c9
    unsigned char v6 = *v5; // 0x4255c9
    *v5 = v6 / 128 | 2 * v6;
    *(int32_t *)(a1 - 128) = (int32_t)(v2 % v3 & 0xffffff00 | v4 % 256);
    return v4 + 0xa7817882 & 0xffffffff;
}

// Address range: 0x4255db - 0x4255fc
int64_t function_4255db(int64_t a1, int64_t a2) {
    // 0x4255db
    int64_t v1; // 0x4255db
    int64_t v2 = v1 + 0x36d99752; // 0x4255db
    char v3 = *(char *)(v1 - 119) + (char)v2; // 0x4255e6
    int64_t result = v2 & 0xffffff00 | (int64_t)v3; // 0x4255e6
    __asm_outsd((int16_t)a2 & -256 | 19, (int32_t)v1);
    if (v3 >= 0) {
        // 0x425661
        return result;
    }
    // 0x4255f1
    __asm_int(29);
    *(char *)0x7f1af181 = 19;
    return result;
}

// Address range: 0x425613 - 0x425616
int64_t function_425613(void) {
    // 0x425613
    int64_t result; // 0x425613
    return result;
}

// Address range: 0x42565b - 0x425661
int64_t function_42565b(void) {
    // 0x42565b
    int64_t v1; // 0x42565b
    return __asm_int1(v1, v1);
}

// Address range: 0x425662 - 0x42571c
int64_t function_425662(int64_t a1, int64_t a2, int64_t a3) {
    // 0x425662
    int64_t v1; // 0x425662
    int64_t result = v1 & -256 | (int64_t)*(char *)-0xa69595a42f7600c; // 0x425664
    uint32_t v2 = (int32_t)v1;
    uint32_t v3 = (int32_t)result; // 0x4256e0
    int16_t v4 = a2; // 0x4256e1
    __asm_outsb(v4, (char)v1);
    int64_t v5 = a1 - 1; // 0x4256e2
    if (v5 != 0 != (v2 == v3)) {
        // 0x42566f
        return result;
    }
    // 0x425710
    bool v6; // 0x425662
    *(char *)((v6 ? -4 : 4) + v1) = __asm_insb(v4);
    char v7 = *(char *)v5; // 0x425712
    return (256 * (int64_t)((char)(v2 > v3) + (char)(v1 / 256) + v7) | result & 0xffff00ff) + 0x1e846bf0 & 0xffffff00 | (int64_t)__asm_in_6(v4);
}

// Address range: 0x425728 - 0x42572d
int64_t function_425728(void) {
    // 0x425728
    return function_ffffffffcd2e8e8b();
}

// Address range: 0x425731 - 0x4257b1
int64_t function_425731(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x425731
    int64_t v1; // 0x425731
    int64_t v2 = v1;
    *(char *)v1 = __asm_insb((int16_t)a2);
    if (a1 == 1) {
        // 0x425734
        unknown_1c535e7a(0);
        int64_t result = __asm_fnstenv(); // 0x425739
        *(int224_t *)(v1 - 111) = (int224_t)result;
        return result;
    }
    // 0x425758
    bool v3; // 0x425731
    int64_t v4 = v1 + 0xa1a6b018 + (int64_t)v3; // 0x425758
    int64_t result2 = v4 & 0xffffffff; // 0x425758
    if (*(int32_t *)(v2 - 50 + 4 * result2) == (int32_t)v2) {
        // 0x425766
        return result2;
    }
    char * v5 = (char *)(v1 + 27); // 0x4257ae
    *v5 = *v5 - (char)v4;
    return result2;
}

// Address range: 0x4257c4 - 0x4257c7
int64_t function_4257c4(int64_t a1) {
    // 0x4257c4
    int64_t result; // 0x4257c4
    return result;
}

// Address range: 0x4257d2 - 0x4257e4
int64_t function_4257d2(int64_t a1) {
    // 0x4257d2
    return (int64_t)*(int32_t *)0x43a63815af3bd57e;
}

// Address range: 0x4257f5 - 0x4257f7
int64_t function_4257f5(void) {
    // 0x4257f5
    int64_t result; // 0x4257f5
    return result;
}

// Address range: 0x42580f - 0x425810
int64_t function_42580f(void) {
    // 0x42580f
    int64_t result; // 0x42580f
    return result;
}

// Address range: 0x425823 - 0x42582c
int64_t function_425823(void) {
    // 0x425823
    int64_t result; // 0x425823
    *(char *)-0x4ebdb4adf5ce18a6 = (char)result;
    return result;
}

// Address range: 0x425830 - 0x4258a0
int64_t function_425830(int64_t a1, int64_t a2) {
    // 0x425830
    int64_t v1; // 0x425830
    int32_t v2 = __asm_in(38); // 0x425839
    *(int64_t *)0xe73bbdd2 = 0xe73bbdda;
    *(int32_t *)v1 = __asm_insd((int16_t)a2 + 0x422e);
    return (int64_t)(v2 & -256) | (int64_t)(v2 & 199);
}

// Address range: 0x4258a0 - 0x4258a1
int64_t function_4258a0(void) {
    // 0x4258a0
    int64_t result; // 0x4258a0
    return result;
}

// Address range: 0x4258a1 - 0x4258a9
int64_t function_4258a1(int64_t a1, int64_t a2) {
    // 0x4258a1
    int64_t result; // 0x4258a1
    bool v1; // 0x4258a1
    if (a1 != 1 == v1) {
        result = function_4258a0();
    }
    // 0x4258a3
    return result;
}

// Address range: 0x4258aa - 0x4258bd
int64_t function_4258aa(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4258aa
    __asm_in_3((int16_t)a2);
    return a2 & 0xffffffff;
}

// Address range: 0x4258c0 - 0x4258c8
int64_t function_4258c0(int64_t a1) {
    // 0x4258c0
    int64_t result; // 0x4258c0
    char * v1 = (char *)(result - 0x28ed59b2); // 0x4258c0
    unsigned char v2 = *v1; // 0x4258c0
    *v1 = v2 / 128 | 2 * v2;
    return result;
}

// Address range: 0x4258e7 - 0x4258e8
int64_t function_4258e7(void) {
    // 0x4258e7
    int64_t result; // 0x4258e7
    return result;
}

// Address range: 0x4258e8 - 0x4258ec
int64_t function_4258e8(void) {
    // 0x4258e8
    int64_t result; // 0x4258e8
    return result;
}

// Address range: 0x4258ee - 0x4258ef
int64_t function_4258ee(void) {
    // 0x4258ee
    int64_t result; // 0x4258ee
    return result;
}

// Address range: 0x425900 - 0x425908
int64_t function_425900(void) {
    // 0x425900
    return function_425945();
}

// Address range: 0x425925 - 0x42592e
int64_t function_425925(int64_t a1) {
    // 0x425925
    int64_t result; // 0x425925
    float80_t v1; // 0x425925
    *(float32_t *)(result + 0x5bce8e1f) = (float32_t)v1;
    return result;
}

// Address range: 0x42592e - 0x425931
int64_t function_42592e(void) {
    // 0x42592e
    bool v1; // 0x42592e
    if (true == !v1) {
        function_4258e7();
    }
    // 0x425930
    int64_t v2; // 0x42592e
    return __asm_iretd(v2, v2);
}

// Address range: 0x425945 - 0x425946
int64_t function_425945(void) {
    // 0x425945
    int64_t result; // 0x425945
    return result;
}

// Address range: 0x425950 - 0x425ad7
int64_t function_425950(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x425950
    int64_t v1; // 0x425950
    int64_t result = v1 & -63; // 0x425950
    int32_t v2 = result; // 0x425952
    __asm_out(61, v2);
    *(int32_t *)a2 = (int32_t)v1;
    int64_t v3; // 0x425950
    *(char *)v1 = *(char *)&v3;
    int64_t v4 = v1 ^ a2;
    if ((int32_t)v4 == 0) {
        unsigned char v5 = llvm_ctpop_i8((char)v4); // 0x4259ce
        bool v6; // 0x425950
        *(int32_t *)((v6 ? -1 : 1) + v1) = v2;
        if (v5 % 2 == 0) {
            // 0x4259d5
            return result;
        }
        // 0x4259a0
        __asm_int(-73);
        return result;
    }
    // 0x425a4a
    __asm_out_1(-105, (char)result);
    int64_t v7; // 0x425950
    int32_t * v8 = (int32_t *)(v7 + 2 * v1); // 0x425a53
    int32_t v9 = *v8 - (int32_t)a1; // 0x425a53
    unsigned char v10 = llvm_ctpop_i8((char)v9); // 0x425a53
    *v8 = v9;
    if (v10 % 2 == 0) {
        // 0x425ad1
        return unknown_ffffffffcf897639();
    }
    uint64_t v11 = (v1 & 0xffffffc1) * (int64_t)*(int32_t *)&v7 / 0x100000000; // 0x425a51
    int16_t v12 = v11; // 0x425a70
    __asm_in_3(v12);
    uint64_t v13 = v7;
    if (llvm_ctpop_i8((char)(v13 / 256) - (char)v13) % 2 != 0) {
        int64_t result2 = __asm_in_3(v12); // 0x425a13
        int128_t v14; // 0x425950
        *(int128_t *)result2 = (int128_t)__asm_movaps(v14);
        return result2;
    }
    // 0x425a75
    __asm_int3(a1, v11);
    int32_t * v15 = (int32_t *)(v13 - 0x20272cff); // 0x425a86
    *v15 = *v15 - 1;
    int64_t v16; // bp+5233, 0x425950
    return &v16;
}

// Address range: 0x425ae2 - 0x425afe
int64_t function_425ae2(void) {
    // 0x425ae2
    int64_t result; // 0x425ae2
    return result;
}

// Address range: 0x425b00 - 0x425b05
int64_t function_425b00(void) {
    // 0x425b00
    return function_6fe866dd();
}

// Address range: 0x425b06 - 0x425b07
int64_t function_425b06(int64_t a1) {
    // 0x425b06
    int64_t result; // 0x425b06
    return result;
}

// Address range: 0x425b08 - 0x425b17
int64_t function_425b08(int64_t a1, int64_t a2, int64_t a3) {
    char v1 = __asm_in_2(-84); // 0x425b08
    int64_t v2; // 0x425b08
    int64_t result = v2 & -256 | (int64_t)v1; // 0x425b08
    int64_t v3 = 256 * (int64_t)*(char *)result | a2 & -0xff01; // 0x425b0a
    __asm_out_4((int16_t)v3, v1);
    bool v4; // 0x425b08
    if (true == !v4) {
        // 0x425b13
        return result;
    }
    // 0x425b10
    return v3 & 0xffffffff;
}

// Address range: 0x425b4e - 0x425b57
int64_t function_425b4e(int64_t a1) {
    // 0x425b4e
    int64_t result; // 0x425b4e
    return result;
}

// Address range: 0x425ba8 - 0x425bb3
int64_t function_425ba8(void) {
    // 0x425ba8
    int64_t v1; // 0x425ba8
    bool v2; // 0x425ba8
    return v1 & -0xff01 | 256 * (64 * (int64_t)v2 | 128 * (int64_t)v2 | 16 * (int64_t)v2 | (int64_t)v2 | 4 * (int64_t)v2) | 512;
}

// Address range: 0x425bc0 - 0x425bcd
int64_t function_425bc0(void) {
    // 0x425bc0
    return function_7be2628a();
}

// Address range: 0x425c4c - 0x425c4d
int64_t function_425c4c(void) {
    // 0x425c4c
    int64_t result; // 0x425c4c
    return result;
}

// Address range: 0x425ca5 - 0x425cbe
int64_t function_425ca5(void) {
    // 0x425ca5
    int64_t v1; // 0x425ca5
    int32_t * v2 = (int32_t *)(v1 - 0x4ac1885a); // 0x425caa
    int32_t v3 = *v2 ^ (int32_t)v1; // 0x425caa
    unsigned char v4 = llvm_ctpop_i8((char)v3); // 0x425caa
    *v2 = v3;
    if (v4 % 2 != 0) {
        function_425c4c();
    }
    // 0x425cb4
    unknown_fffffffffc42c6db();
    return function_5ce858bd();
}

// Address range: 0x425cbf - 0x425cc4
int64_t function_425cbf(void) {
    // 0x425cbf
    return function_ffffffffc1c242a5();
}

// Address range: 0x425cd8 - 0x425cd9
int64_t function_425cd8(void) {
    // 0x425cd8
    int64_t result; // 0x425cd8
    return result;
}

// Address range: 0x425d0c - 0x425d8c
int64_t function_425d0c(int64_t a1, int64_t a2, int64_t a3) {
    int64_t v1 = a1 - 1; // 0x425d0c
    if (v1 == 0) {
        // 0x425d0e
        return function_425cd8();
    }
    int64_t v2 = __asm_int1(v1, a2); // 0x425d37
    int64_t result = v2; // 0x425d38
    bool v3; // 0x425d0c
    if (v3) {
        // 0x425d3a
        int64_t v4; // 0x425d0c
        int32_t * v5 = (int32_t *)(v4 - 0x579ed0ff); // 0x425d3e
        int32_t * v6 = (int32_t *)(4 * v1 - 104 + v2); // 0x425d3a
        *v6 = (int32_t)v2;
        *v5 = *v5 + (int32_t)v4;
        result = (int64_t)*v6;
    }
    // 0x425d25
    return result;
}

// Address range: 0x425da2 - 0x425dac
int64_t function_425da2(int64_t a1) {
    // 0x425da2
    bool v1; // 0x425da2
    bool v2 = v1;
    int64_t result; // 0x425da2
    uint32_t v3 = (int32_t)result; // 0x425da2
    uint32_t v4 = *(int32_t *)(result + 73) + v3; // 0x425da2
    bool v5 = v2 ? v4 + (int32_t)v2 <= v3 : v4 < v3; // 0x425da2
    char * v6 = (char *)(result - 0x56db1708); // 0x425da5
    *v6 = *v6 - (char)a1 + (char)v5;
    return result;
}

// Address range: 0x425dae - 0x425db9
int64_t function_425dae(void) {
    // 0x425dae
    int64_t v1; // 0x425dae
    *(int32_t *)0x1ece5ba6 = (int32_t)v1;
    return function_7539ece0();
}

// Address range: 0x425deb - 0x425dec
int64_t function_425deb(void) {
    // 0x425deb
    int64_t result; // 0x425deb
    return result;
}

// Address range: 0x425e1b - 0x425e24
int64_t function_425e1b(int64_t a1) {
    // 0x425e1b
    int64_t result; // 0x425e1b
    int32_t * v1 = (int32_t *)(4 * result - 0x3c5fd1a3); // 0x425e1c
    *v1 = *v1 - (int32_t)result;
    return result;
}

// Address range: 0x425e47 - 0x425e4b
int64_t function_425e47(void) {
    // 0x425e47
    int64_t result; // 0x425e47
    return result;
}

// Address range: 0x425e4e - 0x425e50
int64_t function_425e4e(void) {
    // 0x425e4e
    int64_t v1; // 0x425e4e
    return function_425e9b(v1, v1);
}

// Address range: 0x425e51 - 0x425e54
int64_t function_425e51(int64_t a1) {
    // 0x425e51
    return function_425deb();
}

// Address range: 0x425e70 - 0x425e7a
int64_t function_425e70(void) {
    // 0x425e70
    int64_t result; // 0x425e70
    bool v1; // 0x425e70
    *(char *)result = *(char *)(2 * result + (int64_t)v1);
    return result;
}

// Address range: 0x425e7d - 0x425e8c
int64_t function_425e7d(void) {
    // 0x425e7d
    int64_t v1; // 0x425e7d
    int32_t * v2 = (int32_t *)(v1 - 30); // 0x425e84
    *v2 = *v2 - ((int32_t)v1 ^ 247);
    return function_ffffffffab99456e();
}

// Address range: 0x425e8d - 0x425e92
int64_t function_425e8d(void) {
    // 0x425e8d
    return function_ffffffffbf58068c();
}

// Address range: 0x425e9b - 0x425eee
int64_t function_425e9b(int64_t a1, int64_t a2) {
    // 0x425e9b
    int64_t result; // 0x425e9b
    uint64_t v1 = result;
    bool v2; // 0x425e9b
    if (true != !v2) {
        // 0x425e9d
        return result;
    }
    int32_t * v3 = (int32_t *)(a1 - 0x308f2f71); // 0x425ed1
    *v3 = *v3 >> 1;
    __asm_in_3((int16_t)a2);
    unsigned char v4 = (char)a1 % 32; // 0x425edb
    int64_t v5 = v1 & 0xffffffff; // 0x425edb
    if (v4 != 0) {
        unsigned char v6 = (char)(v1 / 256); // 0x425edb
        v5 = 256 * (int64_t)(v6 << 8 - v4 | v6 >> v4) | v1 & 0xffff00ff;
    }
    int64_t v7; // 0x425e9b
    int32_t * v8 = (int32_t *)(v7 - 1); // 0x425eeb
    uint32_t v9 = *v8; // 0x425eeb
    *v8 = v9 / 0x100000 | 0x1000 * v9;
    return (v5 ^ 97) * a1 & 0xffffff00 | (int64_t)*(char *)&v7;
}

// Address range: 0x425ef3 - 0x425f03
int64_t function_425ef3(int64_t a1, uint64_t a2) {
    // 0x425ef3
    int64_t v1; // 0x425ef3
    char v2 = *(char *)(2 * v1); // 0x425ef3
    return function_425f3d(a1, (v1 + a2) % 256 | a2 & -0x10000 | 256 * (int64_t)((char)(a2 / 256) - v2));
}

// Address range: 0x425f09 - 0x425f0a
int64_t function_425f09(void) {
    // 0x425f09
    int64_t result; // 0x425f09
    return result;
}

// Address range: 0x425f3d - 0x425f6d
int64_t function_425f3d(int64_t a1, int64_t a2) {
    int32_t v1 = __asm_in(71); // 0x425f40
    int64_t v2; // 0x425f3d
    char * v3 = (char *)(v2 - 0x63ba92b2); // 0x425f44
    char v4 = a2; // 0x425f44
    *v3 = *v3 + v4;
    bool v5; // 0x425f3d
    int64_t v6 = (v5 ? -1 : 1) + v2; // 0x425f4a
    int32_t * v7 = (int32_t *)(2 * v2 + 0x23f8d232); // 0x425f4b
    *v7 = *v7 ^ (int32_t)v2;
    *(int32_t *)(int64_t)v1 = *(int32_t *)v6;
    char v8 = *(char *)(v6 + (v5 ? -2 : 6)); // 0x425f58
    return (a2 & 0xff00 & v2 | a2 & 0xffff0000 | (int64_t)(v8 ^ v4)) + 0x27b820d1 & 0xffffffff;
}

// Address range: 0x425f79 - 0x425f7c
int64_t function_425f79(int64_t a1) {
    // 0x425f79
    int64_t result; // 0x425f79
    return result;
}

// Address range: 0x425f7e - 0x425f84
int64_t function_425f7e(int64_t a1) {
    // 0x425f7e
    int64_t v1; // 0x425f7e
    int64_t v2 = v1;
    int32_t * v3 = (int32_t *)(v1 - 25); // 0x425f7e
    *v3 = *v3 & (int32_t)v1;
    return (v2 + 209) % 256 | v2 & -256;
}

// Address range: 0x425f84 - 0x425f8e
int64_t function_425f84(int64_t a1, int64_t a2, int64_t a3) {
    // 0x425f84
    int64_t result; // 0x425f84
    return result;
}

// Address range: 0x425fca - 0x426068
int64_t function_425fca(int64_t a1, int64_t a2, int64_t a3) {
    // 0x425fca
    bool v1; // 0x425fca
    bool v2 = v1;
    unsigned char v3 = (char)a2; // 0x425fd0
    int64_t v4; // 0x425fca
    unsigned char v5 = (char)v4 + v3; // 0x425fd0
    bool v6 = v2 ? v5 + (char)v2 <= v3 : v5 < v3; // 0x425fd0
    char * v7 = (char *)(v4 + 49); // 0x425fd2
    *v7 = *v7 - 12 + (char)v6;
    *(int32_t *)0xcbd5e0cf = *(int32_t *)0xcbd5e0cf + 0x1cb1c34;
    return v4 & 0xffffffff;
}

// Address range: 0x4260ae - 0x4260b5
int64_t function_4260ae(int64_t a1) {
    // 0x4260ae
    int64_t result; // 0x4260ae
    return result;
}

// Address range: 0x4260e3 - 0x4260f3
int64_t function_4260e3(int64_t a1, int64_t a2) {
    // 0x4260e3
    return (uint64_t)(a2 + 189) % 256 | a2 & 0xffffff00;
}

// Address range: 0x4260f9 - 0x4260fa
int64_t function_4260f9(void) {
    // 0x4260f9
    int64_t result; // 0x4260f9
    return result;
}

// Address range: 0x426118 - 0x426119
int64_t function_426118(void) {
    // 0x426118
    int64_t result; // 0x426118
    return result;
}

// Address range: 0x426123 - 0x42612a
int64_t function_426123(int64_t a1, int64_t a2) {
    int64_t result; // 0x426123
    if (a1 != 1) {
        result = function_426118();
    }
    // 0x426125
    return result;
}

// Address range: 0x426133 - 0x426136
int64_t function_426133(void) {
    // 0x426133
    int64_t result; // 0x426133
    return result;
}

// Address range: 0x42614c - 0x426151
int64_t function_42614c(int64_t a1) {
    // 0x42614c
    int64_t result; // 0x42614c
    result = function_4260f9();
    // 0x42614e
    return result;
}

// Address range: 0x426152 - 0x426153
int64_t function_426152(void) {
    // 0x426152
    int64_t result; // 0x426152
    return result;
}

// Address range: 0x426165 - 0x426166
int64_t function_426165(void) {
    // 0x426165
    int64_t result; // 0x426165
    return result;
}

// Address range: 0x42617b - 0x42617c
int64_t function_42617b(void) {
    // 0x42617b
    int64_t result; // 0x42617b
    return result;
}

// Address range: 0x426181 - 0x426262
int64_t function_426181(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    unsigned char v1 = *(char *)-0x125f6a15a6f4b76b; // 0x426186
    __asm_out_4((int16_t)a2, v1);
    int64_t v2; // 0x426181
    *(int32_t *)v2 = (int32_t)((v2 & 0xffffff00 | (int64_t)v1) - a1);
    return __asm_in(107);
}

// Address range: 0x426266 - 0x426268
int64_t function_426266(int64_t a1) {
    // 0x426266
    int64_t result; // 0x426266
    return result;
}

// Address range: 0x426268 - 0x426269
int64_t function_426268(void) {
    // 0x426268
    int64_t result; // 0x426268
    return result;
}

// Address range: 0x4262a7 - 0x4262aa
int64_t function_4262a7(void) {
    // 0x4262a7
    int64_t result; // 0x4262a7
    return result;
}

// Address range: 0x426314 - 0x426316
int64_t function_426314(int64_t a1) {
    // 0x426314
    int64_t result; // 0x426314
    return result;
}

// Address range: 0x426316 - 0x4263bc
int64_t function_426316(int64_t a1, int64_t a2) {
    // 0x426316
    int64_t v1; // 0x426316
    char * v2 = (char *)(v1 - 116); // 0x426318
    *v2 = *v2 >> 1;
    int64_t result = v1 & 0x1300a690; // 0x426322
    unsigned char v3 = llvm_ctpop_i8((char)0); // 0x426338
    __asm_out_1(-8, (char)result);
    if (v3 % 2 != 0) {
        // 0x426345
        return result;
    }
    // 0x4263b6
    int64_t v4; // 0x426316
    *(char *)(0xcfca663c * a1 & 0xfffffffc) = *(char *)&v4;
    return result;
}

// Address range: 0x4263c8 - 0x4263cc
int64_t function_4263c8(void) {
    // 0x4263c8
    return function_426427();
}

// Address range: 0x4263d9 - 0x4263de
int64_t function_4263d9(void) {
    // 0x4263d9
    int64_t result; // 0x4263d9
    return result;
}

// Address range: 0x426427 - 0x42642a
int64_t function_426427(void) {
    // 0x426427
    int64_t v1; // 0x426427
    return v1 & 0xffffffff;
}

// Address range: 0x426495 - 0x42649a
int64_t function_426495(void) {
    // 0x426495
    return function_1fbddef();
}

// Address range: 0x4264a4 - 0x4264a5
int64_t function_4264a4(void) {
    // 0x4264a4
    int64_t result; // 0x4264a4
    return result;
}

// Address range: 0x426562 - 0x426567
int64_t function_426562(void) {
    // 0x426562
    return function_5bcd9153();
}

// Address range: 0x42656b - 0x42656c
int64_t function_42656b(void) {
    // 0x42656b
    int64_t result; // 0x42656b
    return result;
}

// Address range: 0x426579 - 0x4266a9
int64_t function_426579(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x426579
    int64_t v1; // 0x426579
    uint64_t v2 = v1;
    *(char *)-0x295a229c = *(char *)-0x295a229c & -116;
    int16_t v3 = 2 * (int16_t)a2; // 0x4265bd
    __asm_out_4(v3, (char)v1 | -72);
    uint32_t v4 = __asm_in_3(v3) + 0x289463d5; // 0x4265c6
    *(char *)0xd58b7aef = (char)v4;
    char * v5 = (char *)(a3 + 40); // 0x4265d9
    *v5 = *v5 | -16;
    char v6 = *(char *)0x3b554ab9; // 0x4265dd
    *(int64_t *)0x54a84e9a = 256 * (int64_t)((char)(v2 / 256) - v6) | v2 & -0xff01;
    char * v7 = (char *)(v1 + a3); // 0x4265e4
    unsigned char v8 = *v7; // 0x4265e4
    *v7 = v8 / 2;
    return (int64_t)v4 + 0x26068529 + (int64_t)(v8 % 2 != 0);
}

// Address range: 0x4266ad - 0x4266b0
int64_t function_4266ad(int64_t a1) {
    // 0x4266ad
    int64_t result; // 0x4266ad
    return result;
}

// Address range: 0x426746 - 0x42674b
int64_t function_426746(void) {
    // 0x426746
    return function_ffffffffb55e5b59();
}

// Address range: 0x42674b - 0x426755
int64_t function_42674b(int64_t a1, uint64_t a2, int64_t a3) {
    // 0x42674b
    bool v1; // 0x42674b
    int64_t v2 = (a2 / 256 + a2 + (int64_t)v1) % 256 | a2 & -256; // 0x42674b
    char * v3 = (char *)v2; // 0x42674d
    int64_t v4; // 0x42674b
    *v3 = *v3 - (char)v4;
    __asm_sti(a1, v2, v4);
    return __asm_in(-114);
}

// Address range: 0x426771 - 0x426795
int64_t function_426771(int64_t a1, int64_t a2) {
    // 0x426771
    int64_t v1; // 0x426771
    int64_t v2 = a1 & 0xff00 & 256 * v1 | a1 & -0xff01; // 0x426771
    int3_t v3; // 0x426771
    int3_t v4 = v3 - 1; // 0x426773
    __frontend_reg_store_fpr(v4, (float80_t)(float32_t)(int32_t)v1);
    int64_t v5; // 0x426771
    int64_t * v6 = (int64_t *)v5;
    int64_t result = *v6 & (a2 | -256); // 0x426779
    *v6 = 0x5180d384;
    __asm_out_5((int16_t)a2, (int32_t)result);
    unsigned char v7 = *(char *)(v1 + 109) & (char)v2; // 0x426782
    unsigned char v8 = llvm_ctpop_i8(v7); // 0x426782
    v2 = v2 & -256 | (int64_t)v7;
    while (v8 % 2 == 0) {
        // 0x426773
        v5 += 8;
        v4--;
        int64_t v9; // 0x426771
        __frontend_reg_store_fpr(v4, (float80_t)*(float32_t *)&v9);
        v6 = (int64_t *)v5;
        result = *v6 & (a2 | -256);
        *v6 = 0x5180d384;
        __asm_out_5((int16_t)a2, (int32_t)result);
        v7 = *(char *)(v1 + 109) & (char)v2;
        v8 = llvm_ctpop_i8(v7);
        v2 = v2 & -256 | (int64_t)v7;
    }
    int32_t * v10 = (int32_t *)(*v6 + 0x43d33a26); // 0x42678c
    *v10 = *v10 - (int32_t)v2;
    return result;
}

// Address range: 0x4267a3 - 0x4267a4
int64_t function_4267a3(void) {
    // 0x4267a3
    int64_t result; // 0x4267a3
    return result;
}

// Address range: 0x4267be - 0x4267bf
int64_t function_4267be(void) {
    // 0x4267be
    int64_t result; // 0x4267be
    return result;
}

// Address range: 0x4267c1 - 0x4267c2
int64_t function_4267c1(void) {
    // 0x4267c1
    int64_t result; // 0x4267c1
    return result;
}

// Address range: 0x4267c6 - 0x4267ca
int64_t function_4267c6(void) {
    // 0x4267c6
    return function_4267a3();
}

// Address range: 0x426809 - 0x42680a
int64_t function_426809(void) {
    // 0x426809
    int64_t result; // 0x426809
    return result;
}

// Address range: 0x42680e - 0x42684a
int64_t function_42680e(int64_t a1, int64_t a2) {
    // 0x42680e
    __asm_in_6((int16_t)a2);
    int64_t v1 = *(int64_t *)0x9a52be6e; // 0x426819
    v1 = function_426809();
    int64_t v2 = v1; // 0x42681b
    bool v3; // 0x42680e
    if (v3 || false) {
        v2 = function_4267be();
    }
    int64_t v4 = 256 * (64 * (int64_t)v3 | 128 * (int64_t)v3 | 16 * (int64_t)v3 | (int64_t)v3 | 4 * (int64_t)v3) | v2 & -0x10000 | 512; // 0x42681d
    int64_t v5; // 0x42680e
    uint64_t v6 = v2 + v5; // 0x426823
    int32_t * v7 = (int32_t *)((v5 & -256 | 163) - 19); // 0x426826
    *v7 = *v7 - (int32_t)(v6 % 256 | v4);
    int64_t v8; // 0x42680e
    *(char *)v8 = -1 - *(char *)&v8;
    int64_t v9 = (v6 & 89 | v4) + 0xbc19eb9d; // 0x42682e
    int64_t v10 = v9 & 0xffffffff; // 0x426839
    if ((int32_t)v9 - *(int32_t *)0x25cb289f < 0) {
        v10 = function_4267c1();
    }
    // 0x42683b
    int64_t v11; // 0x42680e
    __asm_outsd(0x62e1, *(int32_t *)&v11);
    int64_t * v12 = (int64_t *)(v5 - 106); // 0x42683c
    *v12 = *v12 | v10;
    return function_ffffffff9797429f();
}

// Address range: 0x42684b - 0x426857
int64_t function_42684b(int32_t a1) {
    // 0x42684b
    int64_t v1; // 0x42684b
    uint32_t result = (int32_t)v1 | a1; // 0x42684f
    *(int32_t *)v1 = result;
    return result;
}

// Address range: 0x426868 - 0x426873
int64_t function_426868(void) {
    // 0x426868
    int64_t v1; // 0x426868
    *(char *)-0x7310d5b604a9311f = (char)v1;
    return function_4268a4(v1, v1);
}

// Address range: 0x42687f - 0x426888
int64_t function_42687f(int64_t a1) {
    // 0x42687f
    int64_t v1; // 0x42687f
    char * v2 = (char *)(v1 + 0x7077bdf); // 0x42687f
    bool v3; // 0x42687f
    *v2 = *v2 + (char)v1 + (char)v3;
    return __asm_sysret(a1);
}

// Address range: 0x426896 - 0x426899
int64_t function_426896(void) {
    // 0x426896
    int64_t result; // 0x426896
    return result;
}

// Address range: 0x4268a4 - 0x4268b9
int64_t function_4268a4(int64_t a1, int64_t a2) {
    // 0x4268a4
    int64_t v1; // 0x4268a4
    __asm_sti(a1, a2, v1);
    __asm_in(115);
    return 0xbc2ac1f2;
}

// Address range: 0x4268bb - 0x426948
int64_t function_4268bb(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4268bb
    int64_t v1; // 0x4268bb
    int64_t v2 = v1;
    if (a1 != 0) {
        // 0x4268bd
        return (v2 - v1) % 256 | v2 & -256;
    }
    // 0x4268c0
    abort();
    // UNREACHABLE
}

// Address range: 0x426949 - 0x42695e
int64_t function_426949(int64_t a1) {
    // 0x426949
    int64_t v1; // 0x426949
    *(int32_t *)0x1c024ad1 = *(int32_t *)0x1c024ad1 & (int32_t)v1;
    __asm_int3(a1, 0x3650b756);
    return function_2513e838();
}

// Address range: 0x426960 - 0x426963
int64_t function_426960(int64_t a1) {
    // 0x426960
    int64_t result; // 0x426960
    return result;
}

// Address range: 0x426963 - 0x42699c
int64_t function_426963(int64_t a1, int64_t a2, int64_t a3) {
    // 0x426963
    int64_t v1; // 0x426963
    int64_t v2 = v1;
    char v3 = *(char *)(a1 + 0x579f5e17); // 0x426963
    bool v4; // 0x426963
    int64_t v5 = a2 & -256 | (int64_t)(v3 + (char)a2 + (char)v4); // 0x426963
    *(char *)(a1 + 103) = (char)((v1 + 0xae46) / 256);
    *(char *)v1 = *(char *)-0x557503c630256920;
    *(int864_t *)(a1 - 36) = (int864_t)__asm_fnsave((int32_t)a1, v5);
    *(char *)0x1fa1a75a43ea4851 = (char)__asm_sti(a1, v5, v1);
    return v2 + 256 & 0xff00 | v2 & 0xffff00ff;
}

// Address range: 0x4269f5 - 0x4269f6
int64_t function_4269f5(void) {
    // 0x4269f5
    int64_t result; // 0x4269f5
    return result;
}

// Address range: 0x4269ff - 0x426a02
int64_t function_4269ff(int64_t a1) {
    // 0x4269ff
    int64_t result; // 0x4269ff
    bool v1; // 0x4269ff
    *(char *)result = (char)v1;
    return result;
}

// Address range: 0x426a04 - 0x426a50
int64_t function_426a04(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x426a04
    int64_t v1; // 0x426a04
    bool v2; // 0x426a04
    int64_t v3 = !v2 ? v1 : a1;
    int64_t v4 = v3 & 0xffffffff; // 0x426a04
    int64_t v5 = a2 & -0xff01 | 0x8600; // 0x426a07
    int64_t v6 = __asm_int1(v4, v5); // 0x426a0e
    int32_t * v7 = (int32_t *)(v1 + 17); // 0x426a16
    int32_t v8 = *v7 | (int32_t)v1; // 0x426a16
    *v7 = v8;
    if (v8 < 0) {
        // 0x426a1c
        return v6 + 0xc30cb14 & 0xffffff00 | 232;
    }
    uint32_t v9 = (int32_t)v3; // 0x426a04
    int64_t v10 = __asm_iretd(v4, v5); // 0x426a3e
    int32_t * v11 = (int32_t *)(a3 - 34); // 0x426a41
    uint32_t v12 = *v11; // 0x426a41
    uint32_t v13 = v9 % 32; // 0x426a41
    int32_t v14 = 0; // 0x426a41
    if (v13 != 0) {
        int32_t v15 = v12 >> v13 | v12 << 32 - v13; // 0x426a41
        *v11 = v15;
        v14 = v15 < 0;
    }
    int32_t * v16 = (int32_t *)a4; // 0x426a22
    *v16 = v14 + v9 + *v16;
    return v10 & -256 | (int64_t)*(char *)-0x241139484c68fc22;
}

// Address range: 0x426a7e - 0x426af0
int64_t function_426a7e(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    // 0x426a7e
    int64_t v1; // 0x426a7e
    return (v1 | (int64_t)__asm_in_6((int16_t)a2)) & -256 | 208;
}

// Address range: 0x426b24 - 0x426b28
int64_t function_426b24(void) {
    // 0x426b24
    int64_t v1; // 0x426b24
    return 0x10000 * (int32_t)v1 >> 16;
}

// Address range: 0x426b62 - 0x426b69
int64_t function_426b62(int64_t a1) {
    // 0x426b62
    int64_t result; // 0x426b62
    __asm_out(5, (int32_t)result);
    return result;
}

// Address range: 0x426b69 - 0x426b6e
int64_t function_426b69(void) {
    // 0x426b69
    int64_t result; // 0x426b69
    return result;
}

// Address range: 0x426bc3 - 0x426bca
int64_t function_426bc3(int64_t a1, int64_t a2) {
    // 0x426bc3
    return __asm_in(3);
}

// Address range: 0x426bff - 0x426c00
int64_t function_426bff(int64_t a1) {
    // 0x426bff
    int64_t result; // 0x426bff
    return result;
}

// Address range: 0x426c20 - 0x426c21
int64_t function_426c20(void) {
    // 0x426c20
    int64_t result; // 0x426c20
    return result;
}

// Address range: 0x426c2d - 0x426c3e
int64_t function_426c2d(int64_t a1, int64_t a2) {
    // 0x426c2d
    bool v1; // 0x426c2d
    if (v1 || v1) {
        // 0x426c2f
        return function_426c20();
    }
    // 0x426c3c
    int64_t v2; // 0x426c2d
    return v2 & -0xff01 | 0xee00;
}

// Address range: 0x426c79 - 0x426c7a
int64_t function_426c79(int64_t a1) {
    // 0x426c79
    int64_t result; // 0x426c79
    return result;
}

// Address range: 0x426c8a - 0x426c8f
int64_t function_426c8a(void) {
    // 0x426c8a
    return function_ffffffffa2808a48();
}

// Address range: 0x426cb9 - 0x426cee
int64_t function_426cb9(int64_t a1, int64_t a2, int64_t a3) {
    char v1 = *(char *)(a2 + 101); // 0x426cbe
    int64_t v2; // 0x426cb9
    __asm_pinsrw(v2, *(int16_t *)(((int64_t)(v1 + 72) | 0xe8cf5f00) + 0x28051689), -68);
    int64_t v3 = __asm_wait(0xb54aeef, v2 & 0xffffffff); // 0x426cd7
    *(char *)-0x60ecb596 = (char)v2;
    int64_t v4; // 0x426cb9
    return v3 + (int64_t)&v4 & 0xffffffff;
}

// Address range: 0x426cef - 0x426d82
int64_t function_426cef(int64_t a1, int64_t a2, int64_t a3) {
    // 0x426cef
    int64_t v1; // 0x426cef
    uint64_t v2 = v1;
    int64_t v3 = v2 & 0xffffffff; // 0x426cf0
    bool v4; // 0x426cef
    bool v5; // 0x426cef
    bool v6; // 0x426cef
    if (true != !v5) {
        char v7 = *(char *)(a2 + 58); // 0x426cf2
        int64_t v8 = (char)v2 < 10 ? 0x4facb4cd : 0x4facb4cc; // 0x426cf7
        int64_t v9 = ((v2 + 246) % 256 | v2 & 0xffff0000 | 256 * (int64_t)(v7 & (char)(v2 / 256))) + v8; // 0x426cf7
        unsigned char v10 = (char)v9 - 36 + (char)((int32_t)v9 < 0x973bc197); // 0x426d01
        unsigned char v11 = llvm_ctpop_i8(v10); // 0x426d01
        v3 = v9 & 0xffffff00 | (int64_t)v10;
        v4 = v11 % 2 == 0;
        v6 = v10 == 0;
    }
    // 0x426d03
    if (!v6) {
        // 0x426d17
        return v1 & 0xffffffff;
    }
    // 0x426d05
    int64_t result; // 0x426cef
    if (a1 == 1) {
        // 0x426d08
        result = v1 & 0xffffffff;
        if (*(int32_t *)0x7cfbe543 < 0) {
            __asm_outsd((int16_t)a2, (int32_t)v3);
            return v3 + 0x2079b2a3 & 0xffffffff;
        }
    } else {
        // 0x426d55
        result = v3;
        if (v4) {
            // 0x426d72
            return __asm_in_3((int16_t)a2);
        }
    }
    // 0x426d17
    return result;
}

// Address range: 0x426d8c - 0x426d90
int64_t function_426d8c(void) {
    // 0x426d8c
    int64_t result; // 0x426d8c
    return result;
}

// Address range: 0x426da6 - 0x426da8
int64_t function_426da6(void) {
    // 0x426da6
    int64_t result; // 0x426da6
    return result;
}

// Address range: 0x426dac - 0x426dad
int64_t function_426dac(void) {
    // 0x426dac
    int64_t result; // 0x426dac
    return result;
}

// Address range: 0x426dd6 - 0x426dd7
int64_t function_426dd6(void) {
    // 0x426dd6
    int64_t result; // 0x426dd6
    return result;
}

// Address range: 0x426e0d - 0x426e29
int64_t function_426e0d(int64_t a1, int64_t a2) {
    // 0x426e1b
    int64_t v1; // 0x426e0d
    int64_t v2 = v1;
    __asm_int(-125);
    bool v3; // 0x426e0d
    int64_t v4 = (v3 ? -4 : 4) + v1; // 0x426e10
    *(char *)v4 = (char)(v2 + v1 / 256 + (int64_t)((int32_t)v1 > (int32_t)v2));
    char v5 = __asm_in_6((int16_t)a2); // 0x426e18
    int64_t v6; // 0x426e0d
    *(int32_t *)(v4 + (v3 ? -1 : 1)) = *(int32_t *)&v6;
    *(char *)(a1 - 0x3621d1c8) = v5;
    return function_426dac();
}

// Address range: 0x426e98 - 0x426f4f
int64_t function_426e98(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {
    int64_t v1 = a1;
    bool v2; // 0x426e98
    int64_t v3; // 0x426e98
    if (v2) {
        // 0x426e9a
        __asm_outsb((int16_t)a2, (char)v3);
        return __asm_wait(a1, a2);
    }
    unsigned char v4 = (char)v3; // 0x426eaf
    unsigned char v5 = v2 ? -47 : -48; // 0x426eaf
    unsigned char v6 = v4 - v5; // 0x426eaf
    bool v7 = v2 | v5 > v4; // 0x426eaf
    if (!v7 && v6 != 0) {
        uint32_t v8 = *(int32_t *)(a1 - 66); // 0x426f37
        float80_t v9; // 0x426e98
        *(int32_t *)(v3 - 0x43a4adb4 + (v3 & 0xf4011400 | (int64_t)v6 | 0xbfeeb34)) = (int32_t)v9;
        int32_t v10 = *(int32_t *)&v1; // 0x426f42
        int32_t * v11 = (int32_t *)(v3 + 4 * v3); // 0x426f45
        *v11 = *v11 + (int32_t)a3;
        return (int32_t)(v8 > -1 - (int32_t)v3) + (int32_t)v3 - v10;
    }
    char * v12 = (char *)(a1 - 0x620f2fcb); // 0x426eb4
    unsigned char v13 = *v12; // 0x426eb4
    unsigned char v14 = (char)a1 % 32; // 0x426eb4
    v1 = a1;
    if (v14 != 0) {
        *v12 = v13 << v14 | (char)v7 << v14 - 1 | (char)((int16_t)v13 >> (int16_t)(9 - v14));
    }
    int64_t result = v3 & 0xffffffff; // 0x426eb3
    *(int32_t *)result = (int32_t)v1;
    return result;
}

// Address range: 0x426f51 - 0x426f56
int64_t function_426f51(int64_t a1, int64_t a2, int64_t a3) {
    // 0x426f51
    return a2 & 0xffffffff;
}

// Address range: 0x426f8c - 0x426fa4
int64_t function_426f8c(int64_t a1, int64_t a2, int64_t a3) {
    int64_t v1 = a2 & -256 | (int64_t)((char)a2 - *(char *)(a2 + 0x3132856e)); // 0x426f8c
    int64_t v2; // 0x426f8c
    uint32_t v3 = *(int32_t *)(v2 - 0x152c2435 + 4 * v1); // 0x426f92
    return (0x100000000 * v1 | v2 & 0xffffffff) / (int64_t)v3 & 0xffffffff;
}

// Address range: 0x426fbf - 0x426fc6
int64_t function_426fbf(void) {
    // 0x426fbf
    int64_t result; // 0x426fbf
    float80_t v1; // 0x426fbf
    *(int32_t *)(result + 0x7bb0b887) = (int32_t)v1;
    return result;
}

// Address range: 0x426fdb - 0x426fe0
int64_t function_426fdb(int64_t a1) {
    // 0x426fdb
    int64_t result; // 0x426fdb
    int64_t v1 = result;
    *(char *)v1 = (char)v1;
    return result;
}

// Address range: 0x426fe0 - 0x426fe5
int64_t function_426fe0(int64_t result) {
    // 0x426fe0
    return result;
}

// Address range: 0x42705c - 0x4271a7
int64_t function_42705c(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {
    // 0x42705c
    int64_t v1; // 0x42705c
    uint64_t v2 = v1;
    int64_t v3 = 2 * v1; // 0x42705c
    bool v4; // 0x42705c
    int64_t v5 = v3 & 0xfffffffe | (int64_t)v4; // 0x42705c
    int32_t * v6 = (int32_t *)(v5 + 0x4a09452); // 0x42705f
    int32_t v7 = v1; // 0x42705f
    int32_t v8 = *v6 + v7; // 0x42705f
    *v6 = v8;
    int64_t v9 = a2; // 0x427065
    int64_t v10 = v5; // 0x427065
    if (v8 == 0) {
        int64_t v11 = v7 >> 31; // 0x427067
        v9 = __asm_int3(a1, v11) % 256 | v11;
        v10 = v3 & 0xffffff00 | 170;
    }
    int32_t * v12 = (int32_t *)(v10 - 15); // 0x4270b7
    *v12 = *v12 - (int32_t)v9;
    *(char *)v1 = (char)v2;
    int64_t v13 = v4 ? -1 : 1; // 0x4270c3
    int64_t v14 = v13 + v1; // 0x4270c3
    int64_t v15; // 0x42705c
    *(char *)v14 = *(char *)&v15;
    int64_t v16 = v15 + v13; // 0x4270c7
    v15 = v16;
    char v17 = (char)(v10 / 256) < 225 ? -30 : -31; // 0x4270ca
    *(char *)(v2 & 0xffffffff) = *(char *)(char *)&g1 + v17;
    unsigned char v18 = (char)(v2 / 256); // 0x4270ce
    unsigned char v19 = *(char *)(v1 + 0x6e22aab2 + v16); // 0x4270ce
    __asm_in_2(-67);
    if (v19 != v18) {
        char * v20 = (char *)(v14 + v13); // 0x427135
        *v20 = *v20 + (v19 > v18 ? -16 : -17);
        return (int64_t)*(char *)230 | 0xf997e100;
    }
    uint64_t v21 = 0x100000000000000 * v1 >> 56; // 0x4270d8
    int64_t result = (v21 + 76) % 256 | v21 & -256; // 0x4270e2
    char * v22 = (char *)result; // 0x4270e6
    *v22 = *v22 ^ (char)(v21 / 256);
    return result;
}

// Address range: 0x4271a8 - 0x4271ac
int64_t function_4271a8(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4271a8
    int64_t result; // 0x4271a8
    *(char *)result = (char)result;
    if (a1 == 0) {
        // ._crit_edge
        return result;
    }
    int64_t v1 = a1; // 0x4271a9
    bool v2; // 0x4271a8
    *(int32_t *)((v2 ? -1 : 1) + result) = __asm_insd((int16_t)a2);
    while (v1 != 1) {
        v1--;
        *(int32_t *)((v2 ? -1 : 1) + result) = __asm_insd((int16_t)a2);
    }
    // ._crit_edge
    return result;
}

// Address range: 0x4271ac - 0x4271c6
int64_t function_4271ac(int64_t a1, uint64_t a2) {
    // 0x4271ac
    int64_t v1; // 0x4271ac
    bool v2; // 0x4271ac
    int64_t v3 = (v2 ? -1 : 1) + v1; // 0x4271b8
    unsigned char v4 = *(char *)(v3 - 42); // 0x4271b9
    char v5 = *(char *)-0x3510e6f2; // 0x4271bc
    char v6 = *(char *)v3; // 0x4271c2
    __asm_outsb(256 * (int16_t)(v5 + (char)(a2 / 256)) | (int16_t)v4, v6);
    return v1 % 256 | v1 & 0xffffff00;
}

// Address range: 0x4271c7 - 0x4271d3
int64_t function_4271c7(int64_t a1) {
    // 0x4271c7
    int64_t v1; // 0x4271c7
    unsigned char v2 = (char)v1; // 0x4271c7
    char v3 = v2 + 49; // 0x4271c7
    return v1 & -0x10000 | (int64_t)v3 | 256 * (64 * (int64_t)(v3 == 0) | (int64_t)(v2 < 207) | 128 * (int64_t)(v3 < 0) | 16 * (int64_t)(v2 % 16 > 30) | 4 * (int64_t)(llvm_ctpop_i8(v3) % 2 == 0)) | 512;
}

// Address range: 0x4271fa - 0x427202
int64_t function_4271fa(void) {
    // 0x4271fa
    return function_ffffffffb074801b();
}

// Address range: 0x42724e - 0x427257
int64_t function_42724e(int64_t a1, uint64_t a2, int64_t a3) {
    // 0x42724e
    int64_t result; // 0x42724e
    char * v1 = (char *)(result - 0x73c19f27); // 0x42724e
    *v1 = *v1 + (char)(a2 / 256);
    return result;
}

// Address range: 0x42725d - 0x42725e
int64_t function_42725d(int64_t a1) {
    // 0x42725d
    int64_t result; // 0x42725d
    return result;
}

// Address range: 0x4272b6 - 0x4272b7
int64_t function_4272b6(void) {
    // 0x4272b6
    int64_t result; // 0x4272b6
    return result;
}

// Address range: 0x4272c6 - 0x4272cb
int64_t function_4272c6(int64_t a1, int64_t a2, int64_t a3) {
    // 0x4272c6
    int64_t result; // 0x4272c6
    return result;
}

// Address range: 0x4275f5 - 0x4275f6
int64_t function_4275f5(void) {
    // 0x4275f5
    int64_t result; // 0x4275f5
    return result;
}

// Address range: 0x42784d - 0x427850
int64_t function_42784d(int64_t a1, int64_t a2) {
    // 0x42784d
    int64_t result; // 0x42784d
    return result;
}

// Address range: 0x428749 - 0x428750
int64_t function_428749(int64_t a1, int64_t a2) {
    // 0x428749
    int64_t result; // 0x428749
    char v1 = result;
    *(char *)result = 2 * v1;
    int64_t v2; // 0x428749
    *(char *)a2 = *(char *)&v2 + v1;
    return result;
}

// Address range: 0x4289ca - 0x4289d4
int64_t function_4289ca(void) {
    // 0x4289ca
    int64_t v1; // 0x4289ca
    int64_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int64_t result; // 0x4289ca
    int64_t v3 = result;
    *(char *)v3 = *(char *)&result + (char)v3;
    return result;
}

// Address range: 0x104f9c2 - 0x104f9c3
int64_t function_104f9c2(void) {
    // 0x104f9c2
    int64_t result; // 0x104f9c2
    return result;
}

// Address range: 0x1fbddef - 0x1fbddf0
int64_t function_1fbddef(void) {
    // 0x1fbddef
    int64_t result; // 0x1fbddef
    return result;
}

// Address range: 0x2412996 - 0x2412997
int64_t function_2412996(void) {
    // 0x2412996
    int64_t result; // 0x2412996
    return result;
}

// Address range: 0x31d7c0d - 0x31d7c0e
int64_t function_31d7c0d(void) {
    // 0x31d7c0d
    int64_t result; // 0x31d7c0d
    return result;
}

// Address range: 0x3204623 - 0x3204624
int64_t function_3204623(void) {
    // 0x3204623
    int64_t result; // 0x3204623
    return result;
}

// Address range: 0x540f02d - 0x540f02e
int64_t function_540f02d(void) {
    // 0x540f02d
    int64_t result; // 0x540f02d
    return result;
}

// Address range: 0x642aa37 - 0x642aa38
int64_t function_642aa37(void) {
    // 0x642aa37
    int64_t result; // 0x642aa37
    return result;
}

// Address range: 0x647c30b - 0x647c30c
int64_t function_647c30b(void) {
    // 0x647c30b
    int64_t result; // 0x647c30b
    return result;
}

// Address range: 0x8751c66 - 0x8751c67
int64_t function_8751c66(void) {
    // 0x8751c66
    int64_t result; // 0x8751c66
    return result;
}

// Address range: 0x8877eee - 0x8877eef
int64_t function_8877eee(void) {
    // 0x8877eee
    int64_t result; // 0x8877eee
    return result;
}

// Address range: 0x9433239 - 0x943323a
int64_t function_9433239(void) {
    // 0x9433239
    int64_t result; // 0x9433239
    return result;
}

// Address range: 0x94bb48b - 0x94bb48c
int64_t function_94bb48b(void) {
    // 0x94bb48b
    int64_t result; // 0x94bb48b
    return result;
}

// Address range: 0x951495e - 0x951495f
int64_t function_951495e(void) {
    // 0x951495e
    int64_t result; // 0x951495e
    return result;
}

// Address range: 0xaeae6bd - 0xaeae6be
int64_t function_aeae6bd(void) {
    // 0xaeae6bd
    int64_t result; // 0xaeae6bd
    return result;
}

// Address range: 0xb502d54 - 0xb502d55
int64_t function_b502d54(void) {
    // 0xb502d54
    int64_t result; // 0xb502d54
    return result;
}

// Address range: 0xb5bb721 - 0xb5bb722
int64_t function_b5bb721(void) {
    // 0xb5bb721
    int64_t result; // 0xb5bb721
    return result;
}

// Address range: 0xcac49f4 - 0xcac49f5
int64_t function_cac49f4(void) {
    // 0xcac49f4
    int64_t result; // 0xcac49f4
    return result;
}

// Address range: 0xd3e30de - 0xd3e30df
int64_t function_d3e30de(void) {
    // 0xd3e30de
    int64_t result; // 0xd3e30de
    return result;
}

// Address range: 0xd3fc927 - 0xd3fc928
int64_t function_d3fc927(void) {
    // 0xd3fc927
    int64_t result; // 0xd3fc927
    return result;
}

// Address range: 0xd3fc9f0 - 0xd3fc9f1
int64_t function_d3fc9f0(void) {
    // 0xd3fc9f0
    int64_t result; // 0xd3fc9f0
    return result;
}

// Address range: 0xd3fca11 - 0xd3fca12
int64_t function_d3fca11(void) {
    // 0xd3fca11
    int64_t result; // 0xd3fca11
    return result;
}

// Address range: 0xdd4adf8 - 0xdd4adf9
int64_t function_dd4adf8(void) {
    // 0xdd4adf8
    int64_t result; // 0xdd4adf8
    return result;
}

// Address range: 0xeed5eaa - 0xeed5eab
int64_t function_eed5eaa(void) {
    // 0xeed5eaa
    int64_t result; // 0xeed5eaa
    return result;
}

// Address range: 0xfcb1bcd - 0xfcb1bce
int64_t function_fcb1bcd(void) {
    // 0xfcb1bcd
    int64_t result; // 0xfcb1bcd
    return result;
}

// Address range: 0x1052c946 - 0x1052c947
int64_t function_1052c946(void) {
    // 0x1052c946
    int64_t result; // 0x1052c946
    return result;
}

// Address range: 0x12246426 - 0x12246427
int64_t function_12246426(void) {
    // 0x12246426
    int64_t result; // 0x12246426
    return result;
}

// Address range: 0x12408756 - 0x12408757
int64_t function_12408756(void) {
    // 0x12408756
    int64_t result; // 0x12408756
    return result;
}

// Address range: 0x1240d1fe - 0x1240d1ff
int64_t function_1240d1fe(void) {
    // 0x1240d1fe
    int64_t result; // 0x1240d1fe
    return result;
}

// Address range: 0x1241d081 - 0x1241d082
int64_t function_1241d081(void) {
    // 0x1241d081
    int64_t result; // 0x1241d081
    return result;
}

// Address range: 0x1357c9af - 0x1357c9b0
int64_t function_1357c9af(void) {
    // 0x1357c9af
    int64_t result; // 0x1357c9af
    return result;
}

// Address range: 0x13dc0620 - 0x13dc0621
int64_t function_13dc0620(void) {
    // 0x13dc0620
    int64_t result; // 0x13dc0620
    return result;
}

// Address range: 0x148fba1b - 0x148fba1c
int64_t function_148fba1b(void) {
    // 0x148fba1b
    int64_t result; // 0x148fba1b
    return result;
}

// Address range: 0x15e5f692 - 0x15e5f693
int64_t function_15e5f692(void) {
    // 0x15e5f692
    int64_t result; // 0x15e5f692
    return result;
}

// Address range: 0x16779a9f - 0x16779aa0
int64_t function_16779a9f(void) {
    // 0x16779a9f
    int64_t result; // 0x16779a9f
    return result;
}

// Address range: 0x1754d62b - 0x1754d62c
int64_t function_1754d62b(void) {
    // 0x1754d62b
    int64_t result; // 0x1754d62b
    return result;
}

// Address range: 0x17b4d222 - 0x17b4d223
int64_t function_17b4d222(void) {
    // 0x17b4d222
    int64_t result; // 0x17b4d222
    return result;
}

// Address range: 0x1832b69d - 0x1832b69e
int64_t function_1832b69d(void) {
    // 0x1832b69d
    int64_t result; // 0x1832b69d
    return result;
}

// Address range: 0x1972cc66 - 0x1972cc67
int64_t function_1972cc66(void) {
    // 0x1972cc66
    int64_t result; // 0x1972cc66
    return result;
}

// Address range: 0x1a8d3b07 - 0x1a8d3b08
int64_t function_1a8d3b07(void) {
    // 0x1a8d3b07
    int64_t result; // 0x1a8d3b07
    return result;
}

// Address range: 0x1b8d249a - 0x1b8d249b
int64_t function_1b8d249a(void) {
    // 0x1b8d249a
    int64_t result; // 0x1b8d249a
    return result;
}

// Address range: 0x1c429cfc - 0x1c429cfd
int64_t function_1c429cfc(void) {
    // 0x1c429cfc
    int64_t result; // 0x1c429cfc
    return result;
}

// Address range: 0x1c6581dc - 0x1c6581dd
int64_t function_1c6581dc(void) {
    // 0x1c6581dc
    int64_t result; // 0x1c6581dc
    return result;
}

// Address range: 0x1c7bf71b - 0x1c7bf71c
int64_t function_1c7bf71b(void) {
    // 0x1c7bf71b
    int64_t result; // 0x1c7bf71b
    return result;
}

// Address range: 0x1d371942 - 0x1d371943
int64_t function_1d371942(void) {
    // 0x1d371942
    int64_t result; // 0x1d371942
    return result;
}

// Address range: 0x1f2e87ee - 0x1f2e87ef
int64_t function_1f2e87ee(void) {
    // 0x1f2e87ee
    int64_t result; // 0x1f2e87ee
    return result;
}

// Address range: 0x1f409b7a - 0x1f409b7b
int64_t function_1f409b7a(void) {
    // 0x1f409b7a
    int64_t result; // 0x1f409b7a
    return result;
}

// Address range: 0x20407d31 - 0x20407d32
int64_t function_20407d31(void) {
    // 0x20407d31
    int64_t result; // 0x20407d31
    return result;
}

// Address range: 0x20676f21 - 0x20676f22
int64_t function_20676f21(void) {
    // 0x20676f21
    int64_t result; // 0x20676f21
    return result;
}

// Address range: 0x209ed9b0 - 0x209ed9b1
int64_t function_209ed9b0(void) {
    // 0x209ed9b0
    int64_t result; // 0x209ed9b0
    return result;
}

// Address range: 0x21c2ab30 - 0x21c2ab31
int64_t function_21c2ab30(void) {
    // 0x21c2ab30
    int64_t result; // 0x21c2ab30
    return result;
}

// Address range: 0x2255b126 - 0x2255b127
int64_t function_2255b126(void) {
    // 0x2255b126
    int64_t result; // 0x2255b126
    return result;
}

// Address range: 0x2287875c - 0x2287875d
int64_t function_2287875c(void) {
    // 0x2287875c
    int64_t result; // 0x2287875c
    return result;
}

// Address range: 0x23870220 - 0x23870221
int64_t function_23870220(void) {
    // 0x23870220
    int64_t result; // 0x23870220
    return result;
}

// Address range: 0x24429e0a - 0x24429e0b
int64_t function_24429e0a(void) {
    // 0x24429e0a
    int64_t result; // 0x24429e0a
    return result;
}

// Address range: 0x24431495 - 0x24431496
int64_t function_24431495(void) {
    // 0x24431495
    int64_t result; // 0x24431495
    return result;
}

// Address range: 0x2513e838 - 0x2513e839
int64_t function_2513e838(void) {
    // 0x2513e838
    int64_t result; // 0x2513e838
    return result;
}

// Address range: 0x25c881ea - 0x25c881eb
int64_t function_25c881ea(void) {
    // 0x25c881ea
    int64_t result; // 0x25c881ea
    return result;
}

// Address range: 0x28ca876c - 0x28ca876d
int64_t function_28ca876c(void) {
    // 0x28ca876c
    int64_t result; // 0x28ca876c
    return result;
}

// Address range: 0x294f6eb9 - 0x294f6eba
int64_t function_294f6eb9(void) {
    // 0x294f6eb9
    int64_t result; // 0x294f6eb9
    return result;
}

// Address range: 0x298bc388 - 0x298bc389
int64_t function_298bc388(void) {
    // 0x298bc388
    int64_t result; // 0x298bc388
    return result;
}

// Address range: 0x29bd6b5d - 0x29bd6b5e
int64_t function_29bd6b5d(void) {
    // 0x29bd6b5d
    int64_t result; // 0x29bd6b5d
    return result;
}

// Address range: 0x2a4ae174 - 0x2a4ae175
int64_t function_2a4ae174(void) {
    // 0x2a4ae174
    int64_t result; // 0x2a4ae174
    return result;
}

// Address range: 0x2ac73058 - 0x2ac73059
int64_t function_2ac73058(void) {
    // 0x2ac73058
    int64_t result; // 0x2ac73058
    return result;
}

// Address range: 0x2c9a4c73 - 0x2c9a4c74
int64_t function_2c9a4c73(void) {
    // 0x2c9a4c73
    int64_t result; // 0x2c9a4c73
    return result;
}

// Address range: 0x2e61d632 - 0x2e61d633
int64_t function_2e61d632(void) {
    // 0x2e61d632
    int64_t result; // 0x2e61d632
    return result;
}

// Address range: 0x2f55d12c - 0x2f55d12d
int64_t function_2f55d12c(void) {
    // 0x2f55d12c
    int64_t result; // 0x2f55d12c
    return result;
}

// Address range: 0x301a295f - 0x301a2960
int64_t function_301a295f(void) {
    // 0x301a295f
    int64_t result; // 0x301a295f
    return result;
}

// Address range: 0x32dffe3d - 0x32dffe3e
int64_t function_32dffe3d(void) {
    // 0x32dffe3d
    int64_t result; // 0x32dffe3d
    return result;
}

// Address range: 0x33317529 - 0x3331752a
int64_t function_33317529(void) {
    // 0x33317529
    int64_t result; // 0x33317529
    return result;
}

// Address range: 0x34429f26 - 0x34429f27
int64_t function_34429f26(void) {
    // 0x34429f26
    int64_t result; // 0x34429f26
    return result;
}

// Address range: 0x34de015c - 0x34de015d
int64_t function_34de015c(void) {
    // 0x34de015c
    int64_t result; // 0x34de015c
    return result;
}

// Address range: 0x371b503f - 0x371b5040
int64_t function_371b503f(void) {
    // 0x371b503f
    int64_t result; // 0x371b503f
    return result;
}

// Address range: 0x374189a1 - 0x374189a2
int64_t function_374189a1(void) {
    // 0x374189a1
    int64_t result; // 0x374189a1
    return result;
}

// Address range: 0x3749a8d9 - 0x3749a8da
int64_t function_3749a8d9(void) {
    // 0x3749a8d9
    int64_t result; // 0x3749a8d9
    return result;
}

// Address range: 0x37f9c53e - 0x37f9c53f
int64_t function_37f9c53e(void) {
    // 0x37f9c53e
    int64_t result; // 0x37f9c53e
    return result;
}

// Address range: 0x38167e9a - 0x38167e9b
int64_t function_38167e9a(void) {
    // 0x38167e9a
    int64_t result; // 0x38167e9a
    return result;
}

// Address range: 0x381da545 - 0x381da546
int64_t function_381da545(void) {
    // 0x381da545
    int64_t result; // 0x381da545
    return result;
}

// Address range: 0x3840b120 - 0x3840b121
int64_t function_3840b120(void) {
    // 0x3840b120
    int64_t result; // 0x3840b120
    return result;
}

// Address range: 0x3855e932 - 0x3855e933
int64_t function_3855e932(void) {
    // 0x3855e932
    int64_t result; // 0x3855e932
    return result;
}

// Address range: 0x38f6eff5 - 0x38f6eff6
int64_t function_38f6eff5(void) {
    // 0x38f6eff5
    int64_t result; // 0x38f6eff5
    return result;
}

// Address range: 0x39f8e121 - 0x39f8e122
int64_t function_39f8e121(void) {
    // 0x39f8e121
    int64_t result; // 0x39f8e121
    return result;
}

// Address range: 0x3a405f4b - 0x3a405f4c
int64_t function_3a405f4b(void) {
    // 0x3a405f4b
    int64_t result; // 0x3a405f4b
    return result;
}

// Address range: 0x3a9700a6 - 0x3a9700a7
int64_t function_3a9700a6(void) {
    // 0x3a9700a6
    int64_t result; // 0x3a9700a6
    return result;
}

// Address range: 0x3c644146 - 0x3c644147
int64_t function_3c644146(void) {
    // 0x3c644146
    int64_t result; // 0x3c644146
    return result;
}

// Address range: 0x3e5027ca - 0x3e5027cb
int64_t function_3e5027ca(void) {
    // 0x3e5027ca
    int64_t result; // 0x3e5027ca
    return result;
}

// Address range: 0x40560b38 - 0x40560b39
int64_t function_40560b38(void) {
    // 0x40560b38
    int64_t result; // 0x40560b38
    return result;
}

// Address range: 0x4388ae39 - 0x4388ae3a
int64_t function_4388ae39(void) {
    // 0x4388ae39
    int64_t result; // 0x4388ae39
    return result;
}

// Address range: 0x4510bde9 - 0x4510bdea
int64_t function_4510bde9(void) {
    // 0x4510bde9
    int64_t result; // 0x4510bde9
    return result;
}

// Address range: 0x45b64d37 - 0x45b64d38
int64_t function_45b64d37(void) {
    // 0x45b64d37
    int64_t result; // 0x45b64d37
    return result;
}

// Address range: 0x48e26420 - 0x48e26421
int64_t function_48e26420(void) {
    // 0x48e26420
    int64_t result; // 0x48e26420
    return result;
}

// Address range: 0x4948500a - 0x4948500b
int64_t function_4948500a(void) {
    // 0x4948500a
    int64_t result; // 0x4948500a
    return result;
}

// Address range: 0x4b6f6ccb - 0x4b6f6ccc
int64_t function_4b6f6ccb(void) {
    // 0x4b6f6ccb
    int64_t result; // 0x4b6f6ccb
    return result;
}

// Address range: 0x4c49785b - 0x4c49785c
int64_t function_4c49785b(void) {
    // 0x4c49785b
    int64_t result; // 0x4c49785b
    return result;
}

// Address range: 0x4f766307 - 0x4f766308
int64_t function_4f766307(void) {
    // 0x4f766307
    int64_t result; // 0x4f766307
    return result;
}

// Address range: 0x508aa8a5 - 0x508aa8a6
int64_t function_508aa8a5(void) {
    // 0x508aa8a5
    int64_t result; // 0x508aa8a5
    return result;
}

// Address range: 0x54a14c85 - 0x54a14c86
int64_t function_54a14c85(void) {
    // 0x54a14c85
    int64_t result; // 0x54a14c85
    return result;
}

// Address range: 0x565fbaf3 - 0x565fbaf4
int64_t function_565fbaf3(void) {
    // 0x565fbaf3
    int64_t result; // 0x565fbaf3
    return result;
}

// Address range: 0x57459686 - 0x57459687
int64_t function_57459686(void) {
    // 0x57459686
    int64_t result; // 0x57459686
    return result;
}

// Address range: 0x5749f4eb - 0x5749f4ec
int64_t function_5749f4eb(void) {
    // 0x5749f4eb
    int64_t result; // 0x5749f4eb
    return result;
}

// Address range: 0x574c4227 - 0x574c4228
int64_t function_574c4227(void) {
    // 0x574c4227
    int64_t result; // 0x574c4227
    return result;
}

// Address range: 0x585985f2 - 0x585985f3
int64_t function_585985f2(void) {
    // 0x585985f2
    int64_t result; // 0x585985f2
    return result;
}

// Address range: 0x59484f7a - 0x59484f7b
int64_t function_59484f7a(void) {
    // 0x59484f7a
    int64_t result; // 0x59484f7a
    return result;
}

// Address range: 0x59db732f - 0x59db7330
int64_t function_59db732f(void) {
    // 0x59db732f
    int64_t result; // 0x59db732f
    return result;
}

// Address range: 0x5a5ca4e5 - 0x5a5ca4e6
int64_t function_5a5ca4e5(void) {
    // 0x5a5ca4e5
    int64_t result; // 0x5a5ca4e5
    return result;
}

// Address range: 0x5bcd9153 - 0x5bcd9154
int64_t function_5bcd9153(void) {
    // 0x5bcd9153
    int64_t result; // 0x5bcd9153
    return result;
}

// Address range: 0x5c819705 - 0x5c819706
int64_t function_5c819705(void) {
    // 0x5c819705
    int64_t result; // 0x5c819705
    return result;
}

// Address range: 0x5ce858bd - 0x5ce858be
int64_t function_5ce858bd(void) {
    // 0x5ce858bd
    int64_t result; // 0x5ce858bd
    return result;
}

// Address range: 0x5e971fe0 - 0x5e971fe1
int64_t function_5e971fe0(void) {
    // 0x5e971fe0
    int64_t result; // 0x5e971fe0
    return result;
}

// Address range: 0x5ea97a08 - 0x5ea97a09
int64_t function_5ea97a08(void) {
    // 0x5ea97a08
    int64_t result; // 0x5ea97a08
    return result;
}

// Address range: 0x5ead1356 - 0x5ead1357
int64_t function_5ead1356(void) {
    // 0x5ead1356
    int64_t result; // 0x5ead1356
    return result;
}

// Address range: 0x6015db9f - 0x6015dba0
int64_t function_6015db9f(void) {
    // 0x6015db9f
    int64_t result; // 0x6015db9f
    return result;
}

// Address range: 0x608c0f34 - 0x608c0f35
int64_t function_608c0f34(void) {
    // 0x608c0f34
    int64_t result; // 0x608c0f34
    return result;
}

// Address range: 0x64d0f283 - 0x64d0f284
int64_t function_64d0f283(void) {
    // 0x64d0f283
    int64_t result; // 0x64d0f283
    return result;
}

// Address range: 0x660142fc - 0x660142fd
int64_t function_660142fc(void) {
    // 0x660142fc
    int64_t result; // 0x660142fc
    return result;
}

// Address range: 0x6687983c - 0x6687983d
int64_t function_6687983c(void) {
    // 0x6687983c
    int64_t result; // 0x6687983c
    return result;
}

// Address range: 0x6755d1f8 - 0x6755d1f9
int64_t function_6755d1f8(void) {
    // 0x6755d1f8
    int64_t result; // 0x6755d1f8
    return result;
}

// Address range: 0x67a23335 - 0x67a23336
int64_t function_67a23335(void) {
    // 0x67a23335
    int64_t result; // 0x67a23335
    return result;
}

// Address range: 0x6940ee7f - 0x6940ee80
int64_t function_6940ee7f(void) {
    // 0x6940ee7f
    int64_t result; // 0x6940ee7f
    return result;
}

// Address range: 0x6b40b873 - 0x6b40b874
int64_t function_6b40b873(void) {
    // 0x6b40b873
    int64_t result; // 0x6b40b873
    return result;
}

// Address range: 0x6c4298e8 - 0x6c4298e9
int64_t function_6c4298e8(void) {
    // 0x6c4298e8
    int64_t result; // 0x6c4298e8
    return result;
}

// Address range: 0x6f53cb30 - 0x6f53cb31
int64_t function_6f53cb30(void) {
    // 0x6f53cb30
    int64_t result; // 0x6f53cb30
    return result;
}

// Address range: 0x6fe866dd - 0x6fe866de
int64_t function_6fe866dd(void) {
    // 0x6fe866dd
    int64_t result; // 0x6fe866dd
    return result;
}

// Address range: 0x7041ea34 - 0x7041ea35
int64_t function_7041ea34(void) {
    // 0x7041ea34
    int64_t result; // 0x7041ea34
    return result;
}

// Address range: 0x70d7cf7b - 0x70d7cf7c
int64_t function_70d7cf7b(void) {
    // 0x70d7cf7b
    int64_t result; // 0x70d7cf7b
    return result;
}

// Address range: 0x71d553e9 - 0x71d553ea
int64_t function_71d553e9(void) {
    // 0x71d553e9
    int64_t result; // 0x71d553e9
    return result;
}

// Address range: 0x744314a3 - 0x744314a4
int64_t function_744314a3(void) {
    // 0x744314a3
    int64_t result; // 0x744314a3
    return result;
}

// Address range: 0x7446834a - 0x7446834b
int64_t function_7446834a(void) {
    // 0x7446834a
    int64_t result; // 0x7446834a
    return result;
}

// Address range: 0x7539ece0 - 0x7539ece1
int64_t function_7539ece0(void) {
    // 0x7539ece0
    int64_t result; // 0x7539ece0
    return result;
}

// Address range: 0x755597ec - 0x755597ed
int64_t function_755597ec(void) {
    // 0x755597ec
    int64_t result; // 0x755597ec
    return result;
}

// Address range: 0x76480a03 - 0x76480a04
int64_t function_76480a03(void) {
    // 0x76480a03
    int64_t result; // 0x76480a03
    return result;
}

// Address range: 0x7b3e6d65 - 0x7b3e6d66
int64_t function_7b3e6d65(void) {
    // 0x7b3e6d65
    int64_t result; // 0x7b3e6d65
    return result;
}

// Address range: 0x7be2628a - 0x7be2628b
int64_t function_7be2628a(void) {
    // 0x7be2628a
    int64_t result; // 0x7be2628a
    return result;
}

// Address range: 0x7c425596 - 0x7c425597
int64_t function_7c425596(void) {
    // 0x7c425596
    int64_t result; // 0x7c425596
    return result;
}

// Address range: 0x7d4cbec1 - 0x7d4cbec2
int64_t function_7d4cbec1(void) {
    // 0x7d4cbec1
    int64_t result; // 0x7d4cbec1
    return result;
}

// Address range: 0x7e61c962 - 0x7e61c963
int64_t function_7e61c962(void) {
    // 0x7e61c962
    int64_t result; // 0x7e61c962
    return result;
}

// Address range: 0xffffffff8041ec50 - 0xffffffff8041ec51
int64_t function_ffffffff8041ec50(void) {
    // 0xffffffff8041ec50
    int64_t result; // 0xffffffff8041ec50
    return result;
}

// Address range: 0xffffffff814c8ff7 - 0xffffffff814c8ff8
int64_t function_ffffffff814c8ff7(void) {
    // 0xffffffff814c8ff7
    int64_t result; // 0xffffffff814c8ff7
    return result;
}

// Address range: 0xffffffff81968385 - 0xffffffff81968386
int64_t function_ffffffff81968385(void) {
    // 0xffffffff81968385
    int64_t result; // 0xffffffff81968385
    return result;
}

// Address range: 0xffffffff81a848bb - 0xffffffff81a848bc
int64_t function_ffffffff81a848bb(void) {
    // 0xffffffff81a848bb
    int64_t result; // 0xffffffff81a848bb
    return result;
}

// Address range: 0xffffffff82f15c93 - 0xffffffff82f15c94
int64_t function_ffffffff82f15c93(void) {
    // 0xffffffff82f15c93
    int64_t result; // 0xffffffff82f15c93
    return result;
}

// Address range: 0xffffffff83748822 - 0xffffffff83748823
int64_t function_ffffffff83748822(void) {
    // 0xffffffff83748822
    int64_t result; // 0xffffffff83748822
    return result;
}

// Address range: 0xffffffff84431479 - 0xffffffff8443147a
int64_t function_ffffffff84431479(void) {
    // 0xffffffff84431479
    int64_t result; // 0xffffffff84431479
    return result;
}

// Address range: 0xffffffff84431876 - 0xffffffff84431877
int64_t function_ffffffff84431876(void) {
    // 0xffffffff84431876
    int64_t result; // 0xffffffff84431876
    return result;
}

// Address range: 0xffffffff87de042c - 0xffffffff87de042d
int64_t function_ffffffff87de042c(void) {
    // 0xffffffff87de042c
    int64_t result; // 0xffffffff87de042c
    return result;
}

// Address range: 0xffffffff8841ed5e - 0xffffffff8841ed5f
int64_t function_ffffffff8841ed5e(void) {
    // 0xffffffff8841ed5e
    int64_t result; // 0xffffffff8841ed5e
    return result;
}

// Address range: 0xffffffff887db3ce - 0xffffffff887db3cf
int64_t function_ffffffff887db3ce(void) {
    // 0xffffffff887db3ce
    int64_t result; // 0xffffffff887db3ce
    return result;
}

// Address range: 0xffffffff8be9fdb9 - 0xffffffff8be9fdba
int64_t function_ffffffff8be9fdb9(void) {
    // 0xffffffff8be9fdb9
    int64_t result; // 0xffffffff8be9fdb9
    return result;
}

// Address range: 0xffffffff8c41cb20 - 0xffffffff8c41cb21
int64_t function_ffffffff8c41cb20(void) {
    // 0xffffffff8c41cb20
    int64_t result; // 0xffffffff8c41cb20
    return result;
}

// Address range: 0xffffffff8c4256a4 - 0xffffffff8c4256a5
int64_t function_ffffffff8c4256a4(void) {
    // 0xffffffff8c4256a4
    int64_t result; // 0xffffffff8c4256a4
    return result;
}

// Address range: 0xffffffff8c431425 - 0xffffffff8c431426
int64_t function_ffffffff8c431425(void) {
    // 0xffffffff8c431425
    int64_t result; // 0xffffffff8c431425
    return result;
}

// Address range: 0xffffffff8c697402 - 0xffffffff8c697403
int64_t function_ffffffff8c697402(void) {
    // 0xffffffff8c697402
    int64_t result; // 0xffffffff8c697402
    return result;
}

// Address range: 0xffffffff8c949638 - 0xffffffff8c949639
int64_t function_ffffffff8c949638(void) {
    // 0xffffffff8c949638
    int64_t result; // 0xffffffff8c949638
    return result;
}

// Address range: 0xffffffff8d8c793a - 0xffffffff8d8c793b
int64_t function_ffffffff8d8c793a(void) {
    // 0xffffffff8d8c793a
    int64_t result; // 0xffffffff8d8c793a
    return result;
}

// Address range: 0xffffffff8de8849d - 0xffffffff8de8849e
int64_t function_ffffffff8de8849d(void) {
    // 0xffffffff8de8849d
    int64_t result; // 0xffffffff8de8849d
    return result;
}

// Address range: 0xffffffff8df1daf8 - 0xffffffff8df1daf9
int64_t function_ffffffff8df1daf8(void) {
    // 0xffffffff8df1daf8
    int64_t result; // 0xffffffff8df1daf8
    return result;
}

// Address range: 0xffffffff8f6721ed - 0xffffffff8f6721ee
int64_t function_ffffffff8f6721ed(void) {
    // 0xffffffff8f6721ed
    int64_t result; // 0xffffffff8f6721ed
    return result;
}

// Address range: 0xffffffff8fe374e6 - 0xffffffff8fe374e7
int64_t function_ffffffff8fe374e6(void) {
    // 0xffffffff8fe374e6
    int64_t result; // 0xffffffff8fe374e6
    return result;
}

// Address range: 0xffffffff91e64768 - 0xffffffff91e64769
int64_t function_ffffffff91e64768(void) {
    // 0xffffffff91e64768
    int64_t result; // 0xffffffff91e64768
    return result;
}

// Address range: 0xffffffff925f0cfc - 0xffffffff925f0cfd
int64_t function_ffffffff925f0cfc(void) {
    // 0xffffffff925f0cfc
    int64_t result; // 0xffffffff925f0cfc
    return result;
}

// Address range: 0xffffffff93a5c3de - 0xffffffff93a5c3df
int64_t function_ffffffff93a5c3de(void) {
    // 0xffffffff93a5c3de
    int64_t result; // 0xffffffff93a5c3de
    return result;
}

// Address range: 0xffffffff947a23e6 - 0xffffffff947a23e7
int64_t function_ffffffff947a23e6(void) {
    // 0xffffffff947a23e6
    int64_t result; // 0xffffffff947a23e6
    return result;
}

// Address range: 0xffffffff948556b9 - 0xffffffff948556ba
int64_t function_ffffffff948556b9(void) {
    // 0xffffffff948556b9
    int64_t result; // 0xffffffff948556b9
    return result;
}

// Address range: 0xffffffff95dd6171 - 0xffffffff95dd6172
int64_t function_ffffffff95dd6171(void) {
    // 0xffffffff95dd6171
    int64_t result; // 0xffffffff95dd6171
    return result;
}

// Address range: 0xffffffff9661c9d2 - 0xffffffff9661c9d3
int64_t function_ffffffff9661c9d2(void) {
    // 0xffffffff9661c9d2
    int64_t result; // 0xffffffff9661c9d2
    return result;
}

// Address range: 0xffffffff97826008 - 0xffffffff97826009
int64_t function_ffffffff97826008(void) {
    // 0xffffffff97826008
    int64_t result; // 0xffffffff97826008
    return result;
}

// Address range: 0xffffffff9797429f - 0xffffffff979742a0
int64_t function_ffffffff9797429f(void) {
    // 0xffffffff9797429f
    int64_t result; // 0xffffffff9797429f
    return result;
}

// Address range: 0xffffffff98bc19b7 - 0xffffffff98bc19b8
int64_t function_ffffffff98bc19b7(void) {
    // 0xffffffff98bc19b7
    int64_t result; // 0xffffffff98bc19b7
    return result;
}

// Address range: 0xffffffff9979c9bc - 0xffffffff9979c9bd
int64_t function_ffffffff9979c9bc(void) {
    // 0xffffffff9979c9bc
    int64_t result; // 0xffffffff9979c9bc
    return result;
}

// Address range: 0xffffffff99bf1d81 - 0xffffffff99bf1d82
int64_t function_ffffffff99bf1d81(void) {
    // 0xffffffff99bf1d81
    int64_t result; // 0xffffffff99bf1d81
    return result;
}

// Address range: 0xffffffff9bc8a1a0 - 0xffffffff9bc8a1a1
int64_t function_ffffffff9bc8a1a0(void) {
    // 0xffffffff9bc8a1a0
    int64_t result; // 0xffffffff9bc8a1a0
    return result;
}

// Address range: 0xffffffff9f6973f8 - 0xffffffff9f6973f9
int64_t function_ffffffff9f6973f8(void) {
    // 0xffffffff9f6973f8
    int64_t result; // 0xffffffff9f6973f8
    return result;
}

// Address range: 0xffffffffa00b4d45 - 0xffffffffa00b4d46
int64_t function_ffffffffa00b4d45(void) {
    // 0xffffffffa00b4d45
    int64_t result; // 0xffffffffa00b4d45
    return result;
}

// Address range: 0xffffffffa00fc753 - 0xffffffffa00fc754
int64_t function_ffffffffa00fc753(void) {
    // 0xffffffffa00fc753
    int64_t result; // 0xffffffffa00fc753
    return result;
}

// Address range: 0xffffffffa040626c - 0xffffffffa040626d
int64_t function_ffffffffa040626c(void) {
    // 0xffffffffa040626c
    int64_t result; // 0xffffffffa040626c
    return result;
}

// Address range: 0xffffffffa0ed9294 - 0xffffffffa0ed9295
int64_t function_ffffffffa0ed9294(void) {
    // 0xffffffffa0ed9294
    int64_t result; // 0xffffffffa0ed9294
    return result;
}

// Address range: 0xffffffffa0f30717 - 0xffffffffa0f30718
int64_t function_ffffffffa0f30717(void) {
    // 0xffffffffa0f30717
    int64_t result; // 0xffffffffa0f30717
    return result;
}

// Address range: 0xffffffffa2808a48 - 0xffffffffa2808a49
int64_t function_ffffffffa2808a48(void) {
    // 0xffffffffa2808a48
    int64_t result; // 0xffffffffa2808a48
    return result;
}

// Address range: 0xffffffffa6515d3c - 0xffffffffa6515d3d
int64_t function_ffffffffa6515d3c(void) {
    // 0xffffffffa6515d3c
    int64_t result; // 0xffffffffa6515d3c
    return result;
}

// Address range: 0xffffffffa6cd84f1 - 0xffffffffa6cd84f2
int64_t function_ffffffffa6cd84f1(void) {
    // 0xffffffffa6cd84f1
    int64_t result; // 0xffffffffa6cd84f1
    return result;
}

// Address range: 0xffffffffa892fa7b - 0xffffffffa892fa7c
int64_t function_ffffffffa892fa7b(void) {
    // 0xffffffffa892fa7b
    int64_t result; // 0xffffffffa892fa7b
    return result;
}

// Address range: 0xffffffffa9b06007 - 0xffffffffa9b06008
int64_t function_ffffffffa9b06007(void) {
    // 0xffffffffa9b06007
    int64_t result; // 0xffffffffa9b06007
    return result;
}

// Address range: 0xffffffffab0c28ce - 0xffffffffab0c28cf
int64_t function_ffffffffab0c28ce(void) {
    // 0xffffffffab0c28ce
    int64_t result; // 0xffffffffab0c28ce
    return result;
}

// Address range: 0xffffffffab356965 - 0xffffffffab356966
int64_t function_ffffffffab356965(void) {
    // 0xffffffffab356965
    int64_t result; // 0xffffffffab356965
    return result;
}

// Address range: 0xffffffffab99456e - 0xffffffffab99456f
int64_t function_ffffffffab99456e(void) {
    // 0xffffffffab99456e
    int64_t result; // 0xffffffffab99456e
    return result;
}

// Address range: 0xffffffffad2495c5 - 0xffffffffad2495c6
int64_t function_ffffffffad2495c5(void) {
    // 0xffffffffad2495c5
    int64_t result; // 0xffffffffad2495c5
    return result;
}

// Address range: 0xffffffffadae6cc8 - 0xffffffffadae6cc9
int64_t function_ffffffffadae6cc8(void) {
    // 0xffffffffadae6cc8
    int64_t result; // 0xffffffffadae6cc8
    return result;
}

// Address range: 0xffffffffaffcd522 - 0xffffffffaffcd523
int64_t function_ffffffffaffcd522(void) {
    // 0xffffffffaffcd522
    int64_t result; // 0xffffffffaffcd522
    return result;
}

// Address range: 0xffffffffb074801b - 0xffffffffb074801c
int64_t function_ffffffffb074801b(void) {
    // 0xffffffffb074801b
    int64_t result; // 0xffffffffb074801b
    return result;
}

// Address range: 0xffffffffb174f917 - 0xffffffffb174f918
int64_t function_ffffffffb174f917(void) {
    // 0xffffffffb174f917
    int64_t result; // 0xffffffffb174f917
    return result;
}

// Address range: 0xffffffffb55e5b59 - 0xffffffffb55e5b5a
int64_t function_ffffffffb55e5b59(void) {
    // 0xffffffffb55e5b59
    int64_t result; // 0xffffffffb55e5b59
    return result;
}

// Address range: 0xffffffffb6e4480e - 0xffffffffb6e4480f
int64_t function_ffffffffb6e4480e(void) {
    // 0xffffffffb6e4480e
    int64_t result; // 0xffffffffb6e4480e
    return result;
}

// Address range: 0xffffffffb7323045 - 0xffffffffb7323046
int64_t function_ffffffffb7323045(void) {
    // 0xffffffffb7323045
    int64_t result; // 0xffffffffb7323045
    return result;
}

// Address range: 0xffffffffb781cae8 - 0xffffffffb781cae9
int64_t function_ffffffffb781cae8(void) {
    // 0xffffffffb781cae8
    int64_t result; // 0xffffffffb781cae8
    return result;
}

// Address range: 0xffffffffb9d810f4 - 0xffffffffb9d810f5
int64_t function_ffffffffb9d810f4(void) {
    // 0xffffffffb9d810f4
    int64_t result; // 0xffffffffb9d810f4
    return result;
}

// Address range: 0xffffffffba4a8b2f - 0xffffffffba4a8b30
int64_t function_ffffffffba4a8b2f(void) {
    // 0xffffffffba4a8b2f
    int64_t result; // 0xffffffffba4a8b2f
    return result;
}

// Address range: 0xffffffffbafcb4e9 - 0xffffffffbafcb4ea
int64_t function_ffffffffbafcb4e9(void) {
    // 0xffffffffbafcb4e9
    int64_t result; // 0xffffffffbafcb4e9
    return result;
}

// Address range: 0xffffffffbb795cc4 - 0xffffffffbb795cc5
int64_t function_ffffffffbb795cc4(void) {
    // 0xffffffffbb795cc4
    int64_t result; // 0xffffffffbb795cc4
    return result;
}

// Address range: 0xffffffffbb9fbb1d - 0xffffffffbb9fbb1e
int64_t function_ffffffffbb9fbb1d(void) {
    // 0xffffffffbb9fbb1d
    int64_t result; // 0xffffffffbb9fbb1d
    return result;
}

// Address range: 0xffffffffbd40db32 - 0xffffffffbd40db33
int64_t function_ffffffffbd40db32(void) {
    // 0xffffffffbd40db32
    int64_t result; // 0xffffffffbd40db32
    return result;
}

// Address range: 0xffffffffbd8522ab - 0xffffffffbd8522ac
int64_t function_ffffffffbd8522ab(void) {
    // 0xffffffffbd8522ab
    int64_t result; // 0xffffffffbd8522ab
    return result;
}

// Address range: 0xffffffffbe6e4d68 - 0xffffffffbe6e4d69
int64_t function_ffffffffbe6e4d68(void) {
    // 0xffffffffbe6e4d68
    int64_t result; // 0xffffffffbe6e4d68
    return result;
}

// Address range: 0xffffffffbf58068c - 0xffffffffbf58068d
int64_t function_ffffffffbf58068c(void) {
    // 0xffffffffbf58068c
    int64_t result; // 0xffffffffbf58068c
    return result;
}

// Address range: 0xffffffffbf5ab58d - 0xffffffffbf5ab58e
int64_t function_ffffffffbf5ab58d(void) {
    // 0xffffffffbf5ab58d
    int64_t result; // 0xffffffffbf5ab58d
    return result;
}

// Address range: 0xffffffffc1c242a5 - 0xffffffffc1c242a6
int64_t function_ffffffffc1c242a5(void) {
    // 0xffffffffc1c242a5
    int64_t result; // 0xffffffffc1c242a5
    return result;
}

// Address range: 0xffffffffcb48b961 - 0xffffffffcb48b962
int64_t function_ffffffffcb48b961(void) {
    // 0xffffffffcb48b961
    int64_t result; // 0xffffffffcb48b961
    return result;
}

// Address range: 0xffffffffccc0ce4f - 0xffffffffccc0ce50
int64_t function_ffffffffccc0ce4f(void) {
    // 0xffffffffccc0ce4f
    int64_t result; // 0xffffffffccc0ce4f
    return result;
}

// Address range: 0xffffffffcd2e8e8b - 0xffffffffcd2e8e8c
int64_t function_ffffffffcd2e8e8b(void) {
    // 0xffffffffcd2e8e8b
    int64_t result; // 0xffffffffcd2e8e8b
    return result;
}

// Address range: 0xffffffffcdb879ea - 0xffffffffcdb879eb
int64_t function_ffffffffcdb879ea(void) {
    // 0xffffffffcdb879ea
    int64_t result; // 0xffffffffcdb879ea
    return result;
}

// Address range: 0xffffffffce00bf50 - 0xffffffffce00bf51
int64_t function_ffffffffce00bf50(void) {
    // 0xffffffffce00bf50
    int64_t result; // 0xffffffffce00bf50
    return result;
}

// Address range: 0xffffffffd0392167 - 0xffffffffd0392168
int64_t function_ffffffffd0392167(void) {
    // 0xffffffffd0392167
    int64_t result; // 0xffffffffd0392167
    return result;
}

// Address range: 0xffffffffd406a4a5 - 0xffffffffd406a4a6
int64_t function_ffffffffd406a4a5(void) {
    // 0xffffffffd406a4a5
    int64_t result; // 0xffffffffd406a4a5
    return result;
}

// Address range: 0xffffffffd42f724a - 0xffffffffd42f724b
int64_t function_ffffffffd42f724a(void) {
    // 0xffffffffd42f724a
    int64_t result; // 0xffffffffd42f724a
    return result;
}

// Address range: 0xffffffffd4431487 - 0xffffffffd4431488
int64_t function_ffffffffd4431487(void) {
    // 0xffffffffd4431487
    int64_t result; // 0xffffffffd4431487
    return result;
}

// Address range: 0xffffffffd443154a - 0xffffffffd443154b
int64_t function_ffffffffd443154a(void) {
    // 0xffffffffd443154a
    int64_t result; // 0xffffffffd443154a
    return result;
}

// Address range: 0xffffffffd56243ba - 0xffffffffd56243bb
int64_t function_ffffffffd56243ba(void) {
    // 0xffffffffd56243ba
    int64_t result; // 0xffffffffd56243ba
    return result;
}

// Address range: 0xffffffffd58861b2 - 0xffffffffd58861b3
int64_t function_ffffffffd58861b2(void) {
    // 0xffffffffd58861b2
    int64_t result; // 0xffffffffd58861b2
    return result;
}

// Address range: 0xffffffffd6beccf0 - 0xffffffffd6beccf1
int64_t function_ffffffffd6beccf0(void) {
    // 0xffffffffd6beccf0
    int64_t result; // 0xffffffffd6beccf0
    return result;
}

// Address range: 0xffffffffd938b8c5 - 0xffffffffd938b8c6
int64_t function_ffffffffd938b8c5(void) {
    // 0xffffffffd938b8c5
    int64_t result; // 0xffffffffd938b8c5
    return result;
}

// Address range: 0xffffffffda2ec930 - 0xffffffffda2ec931
int64_t function_ffffffffda2ec930(void) {
    // 0xffffffffda2ec930
    int64_t result; // 0xffffffffda2ec930
    return result;
}

// Address range: 0xffffffffdbd127e5 - 0xffffffffdbd127e6
int64_t function_ffffffffdbd127e5(void) {
    // 0xffffffffdbd127e5
    int64_t result; // 0xffffffffdbd127e5
    return result;
}

// Address range: 0xffffffffdc431433 - 0xffffffffdc431434
int64_t function_ffffffffdc431433(void) {
    // 0xffffffffdc431433
    int64_t result; // 0xffffffffdc431433
    return result;
}

// Address range: 0xffffffffdcf21017 - 0xffffffffdcf21018
int64_t function_ffffffffdcf21017(void) {
    // 0xffffffffdcf21017
    int64_t result; // 0xffffffffdcf21017
    return result;
}

// Address range: 0xffffffffde2fb419 - 0xffffffffde2fb41a
int64_t function_ffffffffde2fb419(void) {
    // 0xffffffffde2fb419
    int64_t result; // 0xffffffffde2fb419
    return result;
}

// Address range: 0xffffffffde446d1f - 0xffffffffde446d20
int64_t function_ffffffffde446d1f(void) {
    // 0xffffffffde446d1f
    int64_t result; // 0xffffffffde446d1f
    return result;
}

// Address range: 0xffffffffe425f671 - 0xffffffffe425f672
int64_t function_ffffffffe425f671(void) {
    // 0xffffffffe425f671
    int64_t result; // 0xffffffffe425f671
    return result;
}

// Address range: 0xffffffffe46f905a - 0xffffffffe46f905b
int64_t function_ffffffffe46f905a(void) {
    // 0xffffffffe46f905a
    int64_t result; // 0xffffffffe46f905a
    return result;
}

// Address range: 0xffffffffe4966e46 - 0xffffffffe4966e47
int64_t function_ffffffffe4966e46(void) {
    // 0xffffffffe4966e46
    int64_t result; // 0xffffffffe4966e46
    return result;
}

// Address range: 0xffffffffe6115e1a - 0xffffffffe6115e1b
int64_t function_ffffffffe6115e1a(void) {
    // 0xffffffffe6115e1a
    int64_t result; // 0xffffffffe6115e1a
    return result;
}

// Address range: 0xffffffffe61a258c - 0xffffffffe61a258d
int64_t function_ffffffffe61a258c(void) {
    // 0xffffffffe61a258c
    int64_t result; // 0xffffffffe61a258c
    return result;
}

// Address range: 0xffffffffe641a55c - 0xffffffffe641a55d
int64_t function_ffffffffe641a55c(void) {
    // 0xffffffffe641a55c
    int64_t result; // 0xffffffffe641a55c
    return result;
}

// Address range: 0xffffffffe6420c57 - 0xffffffffe6420c58
int64_t function_ffffffffe6420c57(void) {
    // 0xffffffffe6420c57
    int64_t result; // 0xffffffffe6420c57
    return result;
}

// Address range: 0xffffffffe673642d - 0xffffffffe673642e
int64_t function_ffffffffe673642d(void) {
    // 0xffffffffe673642d
    int64_t result; // 0xffffffffe673642d
    return result;
}

// Address range: 0xffffffffe6bb61c9 - 0xffffffffe6bb61ca
int64_t function_ffffffffe6bb61c9(void) {
    // 0xffffffffe6bb61c9
    int64_t result; // 0xffffffffe6bb61c9
    return result;
}

// Address range: 0xffffffffe72caca4 - 0xffffffffe72caca5
int64_t function_ffffffffe72caca4(void) {
    // 0xffffffffe72caca4
    int64_t result; // 0xffffffffe72caca4
    return result;
}

// Address range: 0xffffffffe769b80c - 0xffffffffe769b80d
int64_t function_ffffffffe769b80c(void) {
    // 0xffffffffe769b80c
    int64_t result; // 0xffffffffe769b80c
    return result;
}

// Address range: 0xffffffffeb6b5b8e - 0xffffffffeb6b5b8f
int64_t function_ffffffffeb6b5b8e(void) {
    // 0xffffffffeb6b5b8e
    int64_t result; // 0xffffffffeb6b5b8e
    return result;
}

// Address range: 0xffffffffecf0bc75 - 0xffffffffecf0bc76
int64_t function_ffffffffecf0bc75(void) {
    // 0xffffffffecf0bc75
    int64_t result; // 0xffffffffecf0bc75
    return result;
}

// Address range: 0xffffffffed206649 - 0xffffffffed20664a
int64_t function_ffffffffed206649(void) {
    // 0xffffffffed206649
    int64_t result; // 0xffffffffed206649
    return result;
}

// Address range: 0xffffffffee5db4f5 - 0xffffffffee5db4f6
int64_t function_ffffffffee5db4f5(void) {
    // 0xffffffffee5db4f5
    int64_t result; // 0xffffffffee5db4f5
    return result;
}

// Address range: 0xffffffffef746321 - 0xffffffffef746322
int64_t function_ffffffffef746321(void) {
    // 0xffffffffef746321
    int64_t result; // 0xffffffffef746321
    return result;
}

// Address range: 0xffffffffef77988f - 0xffffffffef779890
int64_t function_ffffffffef77988f(void) {
    // 0xffffffffef77988f
    int64_t result; // 0xffffffffef77988f
    return result;
}

// Address range: 0xffffffffef8dbd1a - 0xffffffffef8dbd1b
int64_t function_ffffffffef8dbd1a(void) {
    // 0xffffffffef8dbd1a
    int64_t result; // 0xffffffffef8dbd1a
    return result;
}

// Address range: 0xffffffffefd063f5 - 0xffffffffefd063f6
int64_t function_ffffffffefd063f5(void) {
    // 0xffffffffefd063f5
    int64_t result; // 0xffffffffefd063f5
    return result;
}

// Address range: 0xfffffffff040b620 - 0xfffffffff040b621
int64_t function_fffffffff040b620(void) {
    // 0xfffffffff040b620
    int64_t result; // 0xfffffffff040b620
    return result;
}

// Address range: 0xfffffffff086169e - 0xfffffffff086169f
int64_t function_fffffffff086169e(void) {
    // 0xfffffffff086169e
    int64_t result; // 0xfffffffff086169e
    return result;
}

// Address range: 0xfffffffff3c1d621 - 0xfffffffff3c1d622
int64_t function_fffffffff3c1d621(void) {
    // 0xfffffffff3c1d621
    int64_t result; // 0xfffffffff3c1d621
    return result;
}

// Address range: 0xfffffffff441cbd6 - 0xfffffffff441cbd7
int64_t function_fffffffff441cbd6(void) {
    // 0xfffffffff441cbd6
    int64_t result; // 0xfffffffff441cbd6
    return result;
}

// Address range: 0xfffffffff441e67d - 0xfffffffff441e67e
int64_t function_fffffffff441e67d(void) {
    // 0xfffffffff441e67d
    int64_t result; // 0xfffffffff441e67d
    return result;
}

// Address range: 0xfffffffff5271057 - 0xfffffffff5271058
int64_t function_fffffffff5271057(void) {
    // 0xfffffffff5271057
    int64_t result; // 0xfffffffff5271057
    return result;
}

// Address range: 0xfffffffff6f2517d - 0xfffffffff6f2517e
int64_t function_fffffffff6f2517d(void) {
    // 0xfffffffff6f2517d
    int64_t result; // 0xfffffffff6f2517d
    return result;
}

// Address range: 0xfffffffff7296421 - 0xfffffffff7296422
int64_t function_fffffffff7296421(void) {
    // 0xfffffffff7296421
    int64_t result; // 0xfffffffff7296421
    return result;
}

// Address range: 0xfffffffff7c5e66f - 0xfffffffff7c5e670
int64_t function_fffffffff7c5e66f(void) {
    // 0xfffffffff7c5e66f
    int64_t result; // 0xfffffffff7c5e66f
    return result;
}

// Address range: 0xfffffffff8431441 - 0xfffffffff8431442
int64_t function_fffffffff8431441(void) {
    // 0xfffffffff8431441
    int64_t result; // 0xfffffffff8431441
    return result;
}

// Address range: 0xfffffffff89abb09 - 0xfffffffff89abb0a
int64_t function_fffffffff89abb09(void) {
    // 0xfffffffff89abb09
    int64_t result; // 0xfffffffff89abb09
    return result;
}

// Address range: 0xfffffffff9594a1f - 0xfffffffff9594a20
int64_t function_fffffffff9594a1f(void) {
    // 0xfffffffff9594a1f
    int64_t result; // 0xfffffffff9594a1f
    return result;
}

// Address range: 0xfffffffffa7e35ba - 0xfffffffffa7e35bb
int64_t function_fffffffffa7e35ba(void) {
    // 0xfffffffffa7e35ba
    int64_t result; // 0xfffffffffa7e35ba
    return result;
}

// Address range: 0xfffffffffa8c656d - 0xfffffffffa8c656e
int64_t function_fffffffffa8c656d(void) {
    // 0xfffffffffa8c656d
    int64_t result; // 0xfffffffffa8c656d
    return result;
}

// Address range: 0xfffffffffa8ed5c6 - 0xfffffffffa8ed5c7
int64_t function_fffffffffa8ed5c6(void) {
    // 0xfffffffffa8ed5c6
    int64_t result; // 0xfffffffffa8ed5c6
    return result;
}

// Address range: 0xfffffffffc4b824e - 0xfffffffffc4b824f
int64_t function_fffffffffc4b824e(void) {
    // 0xfffffffffc4b824e
    int64_t result; // 0xfffffffffc4b824e
    return result;
}

// Address range: 0xfffffffffc9073be - 0xfffffffffc9073bf
int64_t function_fffffffffc9073be(void) {
    // 0xfffffffffc9073be
    int64_t result; // 0xfffffffffc9073be
    return result;
}

// Address range: 0xfffffffffe408895 - 0xfffffffffe408896
int64_t function_fffffffffe408895(void) {
    // 0xfffffffffe408895
    int64_t result; // 0xfffffffffe408895
    return result;
}

// Address range: 0xfffffffffe408e81 - 0xfffffffffe408e82
int64_t function_fffffffffe408e81(void) {
    // 0xfffffffffe408e81
    int64_t result; // 0xfffffffffe408e81
    return result;
}

// Address range: 0xfffffffffe409154 - 0xfffffffffe409155
int64_t function_fffffffffe409154(void) {
    // 0xfffffffffe409154
    int64_t result; // 0xfffffffffe409154
    return result;
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: eziriz .net reactor (4.0.0.0 - 6.0.0.0)
// Detected functions: 1772

